// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"

	types "github.com/tellor-io/layer/x/oracle/types"
)

// OracleKeeper is an autogenerated mock type for the OracleKeeper type
type OracleKeeper struct {
	mock.Mock
}

// GetAggregatedReportsByHeight provides a mock function with given fields: ctx, height
func (_m *OracleKeeper) GetAggregatedReportsByHeight(ctx context.Context, height int64) []types.Aggregate {
	ret := _m.Called(ctx, height)

	var r0 []types.Aggregate
	if rf, ok := ret.Get(0).(func(context.Context, int64) []types.Aggregate); ok {
		r0 = rf(ctx, height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Aggregate)
		}
	}

	return r0
}

// GetTimestampAfter provides a mock function with given fields: ctx, queryId, timestamp
func (_m *OracleKeeper) GetTimestampAfter(ctx context.Context, queryId []byte, timestamp time.Time) (time.Time, error) {
	ret := _m.Called(ctx, queryId, timestamp)

	var r0 time.Time
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte, time.Time) (time.Time, error)); ok {
		return rf(ctx, queryId, timestamp)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte, time.Time) time.Time); ok {
		r0 = rf(ctx, queryId, timestamp)
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte, time.Time) error); ok {
		r1 = rf(ctx, queryId, timestamp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTimestampBefore provides a mock function with given fields: ctx, queryId, timestamp
func (_m *OracleKeeper) GetTimestampBefore(ctx context.Context, queryId []byte, timestamp time.Time) (time.Time, error) {
	ret := _m.Called(ctx, queryId, timestamp)

	var r0 time.Time
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte, time.Time) (time.Time, error)); ok {
		return rf(ctx, queryId, timestamp)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte, time.Time) time.Time); ok {
		r0 = rf(ctx, queryId, timestamp)
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte, time.Time) error); ok {
		r1 = rf(ctx, queryId, timestamp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewOracleKeeper interface {
	mock.TestingT
	Cleanup(func())
}

// NewOracleKeeper creates a new instance of OracleKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOracleKeeper(t mockConstructorTestingTNewOracleKeeper) *OracleKeeper {
	mock := &OracleKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
