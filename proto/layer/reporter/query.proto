syntax = "proto3";
package layer.reporter;

import "amino/amino.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "layer/reporter/oracle_reporter.proto";
import "layer/reporter/params.proto";
import "layer/reporter/selection.proto";

option go_package = "github.com/tellor-io/layer/x/reporter/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/tellor-io/layer/reporter/params";
  }
  // Reporters queries all the staked reporters.
  rpc Reporters(QueryReportersRequest) returns (QueryReportersResponse) {
    option (google.api.http).get = "/tellor-io/layer/reporter/reporters";
  }
  // SelectorReporter queries the reporter of a selector.
  rpc SelectorReporter(QuerySelectorReporterRequest) returns (QuerySelectorReporterResponse) {
    option (google.api.http).get = "/tellor-io/layer/reporter/selector-reporter/{selector_address}";
  }
  // AllowedAmount queries the currently allowed amount to stake or unstake.
  rpc AllowedAmount(QueryAllowedAmountRequest) returns (QueryAllowedAmountResponse) {
    option (google.api.http).get = "/tellor-io/layer/reporter/allowed-amount";
  }

  rpc AllowedAmountExpiration(QueryAllowedAmountExpirationRequest) returns (QueryAllowedAmountExpirationResponse) {
    option (google.api.http).get = "/tellor-io/layer/reporter/allowed-amount-expiration";
  }

  // NumOfSelectorsByReporter queries the number of selectors by a reporter.
  rpc NumOfSelectorsByReporter(QueryNumOfSelectorsByReporterRequest) returns (QueryNumOfSelectorsByReporterResponse) {
    option (google.api.http).get = "/tellor-io/layer/reporter/num-of-selectors-by-reporter/{reporter_address}";
  }
  //  SpaceAvailableByReporter queries the space available in a reporter.
  rpc SpaceAvailableByReporter(QuerySpaceAvailableByReporterRequest) returns (QuerySpaceAvailableByReporterResponse) {
    option (google.api.http).get = "/tellor-io/layer/reporter/space-available-by-reporter/{reporter_address}";
  }
  //  AvailableTips queries the tips available for withdrawal for a given selector.
  rpc AvailableTips(QueryAvailableTipsRequest) returns (QueryAvailableTipsResponse) {
    option (google.api.http).get = "/tellor-io/layer/reporter/available-tips/{selector_address}";
  }
  // SelectionsTo queries the selections for a given reporter.
  rpc SelectionsTo(QuerySelectionsToRequest) returns (QuerySelectionsToResponse) {
    option (google.api.http).get = "/tellor-io/layer/reporter/selections-to/{reporter_address}";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// QueryReportersRequest is the request type for the Query/Reporters RPC method.
message QueryReportersRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}
message reporter {
  string address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  OracleReporter metadata = 2;
  uint64 power = 3;
}

// QueryReportersResponse is the response type for the Query/Reporters RPC method.
message QueryReportersResponse {
  // all the reporters.
  repeated reporter reporters = 1;
  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QuerySelectorReporterRequest is the request type for the
// Query/SelectorReporter RPC method.
message QuerySelectorReporterRequest {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // selector_address defines the selector address to query for.
  string selector_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// QuerySelectorReporterResponse is the response type for the
// Query/SelectorReporter RPC method.
message QuerySelectorReporterResponse {
  // reporter defines the reporter of a selector.
  string reporter = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message QueryAllowedAmountRequest {}

message QueryAllowedAmountResponse {
  // allowed_amount defines the currently allowed amount to stake or unstake.
  string staking_amount = 1 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
  string unstaking_amount = 2 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
}

message QueryAllowedAmountExpirationRequest {}

message QueryAllowedAmountExpirationResponse {
  uint64 expiration = 1;
}

// QueryNumOfSelectorsByReporterRequest is the request type for the
// Query/NumOfSelectorsByReporter RPC method.
message QueryNumOfSelectorsByReporterRequest {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // reporter_address defines the reporter address to query for.
  string reporter_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// QueryNumOfSelectorsByReporterResponse is the response type for the
// Query/NumOfSelectorsByReporter RPC method.
message QueryNumOfSelectorsByReporterResponse {
  // num_of_selectors defines the number of selectors by a reporter.
  int32 num_of_selectors = 1;
}

// QuerySpaceAvailableByReporterRequest is the request type for the
// Query/SpaceAvailableByReporter RPC method.
message QuerySpaceAvailableByReporterRequest {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // reporter_address defines the reporter address to query for.
  string reporter_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// QuerySpaceAvailableByReporterResponse is the response type for the
// Query/SpaceAvailableByReporter RPC method.
message QuerySpaceAvailableByReporterResponse {
  // space_available defines the space available in a reporter.
  int32 space_available = 1;
}

message QueryAvailableTipsRequest {
  // selector address defines the address of the selector to query for.
  string selector_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message QueryAvailableTipsResponse {
  // available_tips defines the tips available for withdrawal for a given selector.
  string available_tips = 1 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
}

message QuerySelectionsToRequest {
  // reporter address defines the address of the reporter to query selections for.
  string reporter_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message QuerySelectionsToResponse {
  // reporter is the address of the reporter
  string reporter = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // selections contains all selectors delegated to this reporter
  repeated FormattedSelection selections = 2;
}