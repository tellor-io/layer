syntax = "proto3";

package layer.oracle;

import "amino/amino.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "layer/oracle/aggregate.proto";
import "layer/oracle/micro_report.proto";
import "layer/oracle/params.proto";
import "layer/oracle/query_meta.proto";
import "layer/oracle/reports.proto";
import "layer/oracle/tips.proto";
import "layer/oracle/user_tip.proto";

option go_package = "github.com/tellor-io/layer/x/oracle/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/layer/oracle/params";
  }

  // Queries a list of GetReportsbyQid items.
  rpc GetReportsbyQid(QueryGetReportsbyQidRequest) returns (QueryMicroReportsResponse) {
    option (google.api.http).get = "/layer/oracle/get_reportsby_qid/{query_id}";
  }
  rpc GetReportsbyReporter(QueryGetReportsbyReporterRequest) returns (QueryMicroReportsResponse) {
    option (google.api.http).get = "/layer/oracle/get_reportsby_reporter/{reporter}";
  }
  rpc GetReportsbyReporterQid(QueryGetReportsbyReporterQidRequest) returns (QueryMicroReportsResponse) {
    option (google.api.http).get = "/layer/oracle/get_reportsby_reporter_qid/{reporter}/{query_id}";
  }

  // Queries a list of GetCurrentTip items.
  rpc GetCurrentTip(QueryGetCurrentTipRequest) returns (QueryGetCurrentTipResponse) {
    option (google.api.http).get = "/tellor-io/layer/oracle/get_current_tip/{query_data}";
  }

  // Queries a list of GetUserTipTotal items.
  rpc GetUserTipTotal(QueryGetUserTipTotalRequest) returns (QueryGetUserTipTotalResponse) {
    option (google.api.http).get = "/tellor-io/layer/oracle/get_user_tip_total/{tipper}";
  }

  // Queries a list of GetAggregatedReport items.
  rpc GetDataBefore(QueryGetDataBeforeRequest) returns (QueryGetDataBeforeResponse) {
    option (google.api.http).get = "/tellor-io/layer/oracle/get_data_before/{query_id}/{timestamp}";
  }

  rpc GetDataAfter(QueryGetDataAfterRequest) returns (QueryGetDataAfterResponse) {
    option (google.api.http).get = "/tellor-io/layer/oracle/get_data_after/{query_id}/{timestamp}";
  }

  // Queries a list of GetTimeBasedRewards items.
  rpc GetTimeBasedRewards(QueryGetTimeBasedRewardsRequest) returns (QueryGetTimeBasedRewardsResponse) {
    option (google.api.http).get = "/tellor-io/layer/oracle/get_time_based_rewards";
  }

  // Queries a list of CurrentCyclelistQuery items.
  rpc CurrentCyclelistQuery(QueryCurrentCyclelistQueryRequest) returns (QueryCurrentCyclelistQueryResponse) {
    option (google.api.http).get = "/tellor-io/layer/oracle/current_cyclelist_query";
  }

  // Queries a list of NextCyclelistQuery items.
  rpc NextCyclelistQuery(QueryNextCyclelistQueryRequest) returns (QueryNextCyclelistQueryResponse) {
    option (google.api.http).get = "/tellor-io/layer/oracle/next_cyclelist_query";
  }

  rpc RetrieveData(QueryRetrieveDataRequest) returns (QueryRetrieveDataResponse) {
    option (google.api.http).get = "/tellor-io/layer/oracle/retrieve_data/{query_id}/{timestamp}";
  }
  rpc GetCurrentAggregateReport(QueryGetCurrentAggregateReportRequest) returns (QueryGetCurrentAggregateReportResponse) {
    option (google.api.http).get = "/tellor-io/layer/oracle/get_current_aggregate_report/{query_id}";
  }
  rpc GetAggregateBeforeByReporter(QueryGetAggregateBeforeByReporterRequest) returns (QueryGetAggregateBeforeByReporterResponse) {
    option (google.api.http).get = "/tellor-io/layer/oracle/get_aggregate_before_by_reporter/{query_id}/{timestamp}/{reporter}";
  }
  rpc GetQuery(QueryGetQueryRequest) returns (QueryGetQueryResponse) {
    option (google.api.http).get = "/tellor-io/layer/oracle/get_query/{query_id}/{id}";
  }
  rpc TippedQueries(QueryTippedQueriesRequest) returns (QueryTippedQueriesResponse) {
    option (google.api.http).get = "/tellor-io/layer/oracle/tipped_queries";
  }
  rpc GetReportsByAggregate(QueryGetReportsByAggregateRequest) returns (QueryGetReportsByAggregateResponse) {
    option (google.api.http).get = "/tellor-io/layer/oracle/get_reports_by_aggregate/{query_id}/{timestamp}";
  }
  rpc GetCurrentQueryByQueryId(QueryGetCurrentQueryByQueryIdRequest) returns (QueryGetCurrentQueryByQueryIdResponse) {
    option (google.api.http).get = "/tellor-io/layer/oracle/get_current_query_by_query_id/{query_id}";
  }
  rpc GetQueryDataLimit(QueryGetQueryDataLimitRequest) returns (QueryGetQueryDataLimitResponse) {
    option (google.api.http).get = "/tellor-io/layer/oracle/get_query_data_limit";
  }
  rpc ReportedIdsByReporter(QueryReportedIdsByReporterRequest) returns (QueryReportedIdsByReporterResponse) {
    option (google.api.http).get = "/tellor-io/layer/oracle/reported_ids_by_reporter/{reporter_address}";
  }
  rpc GetCycleList(QueryGetCycleListRequest) returns (QueryGetCycleListResponse) {
    option (google.api.http).get = "/tellor-io/layer/oracle/get_cycle_list";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}
message QueryMicroReportsResponse {
  repeated MicroReport microReports = 1 [(gogoproto.nullable) = false];
  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
message QueryGetReportsbyQidRequest {
  // query id of requested data
  string query_id = 1;
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryGetReportsbyReporterRequest {
  string reporter = 1;
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryGetReportsbyReporterQidRequest {
  string reporter = 1;
  string query_id = 2;
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 3;
}

message QueryGetCurrentTipRequest {
  string query_data = 1;
}

message QueryGetCurrentTipResponse {
  string tips = 1 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
}

message QueryGetUserTipTotalRequest {
  string tipper = 1;
}

message QueryGetUserTipTotalResponse {
  string total_tips = 1 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
}

message QueryGetDataBeforeRequest {
  string query_id = 1;
  uint64 timestamp = 2;
}

message QueryGetDataBeforeResponse {
  Aggregate aggregate = 1;
  uint64 timestamp = 2;
}

message QueryGetDataAfterRequest {
  string query_id = 1;
  uint64 timestamp = 2;
}

message QueryGetDataAfterResponse {
  Aggregate aggregate = 1;
  uint64 timestamp = 2;
}

message QueryGetTimeBasedRewardsRequest {}

message QueryGetTimeBasedRewardsResponse {
  cosmos.base.v1beta1.Coin reward = 1 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

message QueryCurrentCyclelistQueryRequest {}

message QueryCurrentCyclelistQueryResponse {
  string query_data = 1;
  QueryMeta query_meta = 2;
}

message QueryNextCyclelistQueryRequest {}

message QueryNextCyclelistQueryResponse {
  string query_data = 1;
  QueryMeta query_meta = 2;
}

message QueryRetrieveDataRequest {
  string query_id = 1;
  uint64 timestamp = 2;
}

message QueryRetrieveDataResponse {
  Aggregate aggregate = 1;
}

// QueryGetCurrentAggregateReportRequest is the request type for the Query/GetCurrentAggregateReport RPC method.
message QueryGetCurrentAggregateReportRequest {
  // query_id defines the query id hex string.
  string query_id = 1;
}

// QueryGetCurrentAggregateReportResponse is the response type for the Query/GetCurrentAggregateReport RPC method.
message QueryGetCurrentAggregateReportResponse {
  // aggregate defines the current aggregate report.
  Aggregate aggregate = 1;
  // timestamp defines the timestamp of the aggregate report.
  uint64 timestamp = 2;
}

// QueryGetAggregateBeforeByReporterRequest is the request type for the Query/GetAggregateBeforeByReporter RPC method.
message QueryGetAggregateBeforeByReporterRequest {
  // query_id defines the query id hex string.
  string query_id = 1;
  // timestamp defines the timestamp of the aggregate report.
  uint64 timestamp = 2;
  // reporter defines the reporter address.
  string reporter = 3;
}

// QueryGetAggregateBeforeByReporterResponse is the response type for the Query/GetAggregateBeforeByReporter RPC method.
message QueryGetAggregateBeforeByReporterResponse {
  // aggregate defines the aggregate report.
  Aggregate aggregate = 1;
}

// QueryGetQueryRequest is the request type for the Query/GetQuery RPC method.
message QueryGetQueryRequest {
  // query_id defines the query id hex string.
  string query_id = 1;
  // id defines the query id.
  uint64 id = 2;
}

// QueryGetQueryResponse is the response type for the Query/GetQuery RPC method.
message QueryGetQueryResponse {
  // query defines the query.
  QueryMeta query = 1;
}

// QueryTippedQueriesRequest is the request type for the Query/TippedQueries RPC method.
message QueryTippedQueriesRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryTippedQueriesResponse is the response type for the Query/TippedQueries RPC method.
message QueryTippedQueriesResponse {
  // queries defines the tipped queries.
  repeated QueryMeta queries = 1;
}

message QueryGetReportsByAggregateRequest {
  string query_id = 1;
  uint64 timestamp = 2;
  cosmos.base.query.v1beta1.PageRequest pagination = 3;
}

message QueryGetReportsByAggregateResponse {
  repeated MicroReport microReports = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetCurrentQueryByQueryIdRequest {
  string query_id = 1;
}

message QueryGetCurrentQueryByQueryIdResponse {
  QueryMeta query = 1;
}

message QueryGetQueryDataLimitRequest {}

message QueryGetQueryDataLimitResponse {
  uint64 limit = 1;
}
message QueryReportedIdsByReporterRequest {
  string reporter_address = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryReportedIdsByReporterResponse {
  repeated uint64 ids = 1;
  repeated bytes query_ids =2;
  cosmos.base.query.v1beta1.PageResponse pagination = 3;
}

message QueryGetCycleListRequest {}

message QueryGetCycleListResponse {
  repeated bytes cycle_list = 1;
}