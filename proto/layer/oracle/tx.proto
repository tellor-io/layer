syntax = "proto3";

package layer.oracle;

import "amino/amino.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "layer/oracle/params.proto";

option go_package = "github.com/tellor-io/layer/x/oracle/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;
  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
  rpc SubmitValue(MsgSubmitValue) returns (MsgSubmitValueResponse);
  rpc Tip(MsgTip) returns (MsgTipResponse);
  rpc UpdateCyclelist(MsgUpdateCyclelist) returns (MsgUpdateCyclelistResponse);
  rpc UpdateQueryDataLimit(MsgUpdateQueryDataLimit) returns (MsgUpdateQueryDataLimitResponse);
  rpc NoStakeReport(MsgNoStakeReport) returns (MsgNoStakeReportResponse);
}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "layer/x/oracle/MsgUpdateParams";

  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the module parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}
message MsgUpdateParamsResponse {}
message MsgSubmitValue {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  bytes query_data = 2;
  string value = 3;
}

message MsgSubmitValueResponse {
  uint64 id = 1;
}

// MsgNoStakeReport is the Msg/NoStakeReport request type.
message MsgNoStakeReport {
  // msg signer is the reporter address
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // query data bytes
  bytes query_data = 2;
  // encoded hex value
  string value = 3;
}

// MsgNoStakeReportResponse is the Msg/NoStakeReport response type.
message MsgNoStakeReportResponse {}

message MsgTip {
  option (cosmos.msg.v1.signer) = "tipper";
  string tipper = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  bytes query_data = 2;
  cosmos.base.v1beta1.Coin amount = 3 [(gogoproto.nullable) = false];
}

message MsgTipResponse {}

// MsgUpdateCycleRequest is the Msg/UpdateCycle request type.
message MsgUpdateCyclelist {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "layer/x/oracle/MsgUpdateCyclelist";

  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // list of query data hex strings
  repeated bytes cyclelist = 2;
}

// MsgUpdateCycleResponse defines the Msg/UpdateCycle response type.
message MsgUpdateCyclelistResponse {}

message MsgUpdateQueryDataLimit {
  option (cosmos.msg.v1.signer) = "authority";
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  uint64 limit = 2;
}

message MsgUpdateQueryDataLimitResponse {}