syntax = "proto3";
package layer.dispute;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "layer/dispute/params.proto";
import "layer/dispute/dispute.proto";

option go_package = "github.com/tellor-io/layer/x/dispute/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/tellor-io/layer/dispute/params";
  }
    // Reporters queries all the staked reporters.
  rpc Disputes(QueryDisputesRequest) returns (QueryDisputesResponse) {
    option (google.api.http).get = "/tellor-io/layer/dispute/disputes";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryDisputesRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message Disputes {
  uint64 disputeId = 1;
  Dispute metadata = 2;
}

message QueryDisputesResponse {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageResponse pagination = 1;
  repeated Disputes disputes = 2;
}
