// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: layer/dispute/genesis.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the dispute module's genesis state.
type GenesisState struct {
	Params                          Params                                       `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	Disputes                        []*DisputeStateEntry                         `protobuf:"bytes,2,rep,name=disputes,proto3" json:"disputes,omitempty"`
	Votes                           []*VotesStateEntry                           `protobuf:"bytes,3,rep,name=votes,proto3" json:"votes,omitempty"`
	Voter                           []*VoterStateEntry                           `protobuf:"bytes,4,rep,name=voter,proto3" json:"voter,omitempty"`
	ReportersWithDelegatorsWhoVoted []*ReportersWithDelegatorsWhoVotedStateEntry `protobuf:"bytes,5,rep,name=reporters_with_delegators_who_voted,json=reportersWithDelegatorsWhoVoted,proto3" json:"reporters_with_delegators_who_voted,omitempty"`
	BlockInfo                       []*BlockInfoStateEntry                       `protobuf:"bytes,6,rep,name=block_info,json=blockInfo,proto3" json:"block_info,omitempty"`
	DisputeFeePayer                 []*DisputeFeePayerStateEntry                 `protobuf:"bytes,7,rep,name=dispute_fee_payer,json=disputeFeePayer,proto3" json:"dispute_fee_payer,omitempty"`
	Dust                            cosmossdk_io_math.Int                        `protobuf:"bytes,8,opt,name=dust,proto3,customtype=cosmossdk.io/math.Int" json:"dust"`
	VoteCountsByGroup               []*VoteCountsByGroupStateEntry               `protobuf:"bytes,9,rep,name=vote_counts_by_group,json=voteCountsByGroup,proto3" json:"vote_counts_by_group,omitempty"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_8abee26cd752ac91, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetDisputes() []*DisputeStateEntry {
	if m != nil {
		return m.Disputes
	}
	return nil
}

func (m *GenesisState) GetVotes() []*VotesStateEntry {
	if m != nil {
		return m.Votes
	}
	return nil
}

func (m *GenesisState) GetVoter() []*VoterStateEntry {
	if m != nil {
		return m.Voter
	}
	return nil
}

func (m *GenesisState) GetReportersWithDelegatorsWhoVoted() []*ReportersWithDelegatorsWhoVotedStateEntry {
	if m != nil {
		return m.ReportersWithDelegatorsWhoVoted
	}
	return nil
}

func (m *GenesisState) GetBlockInfo() []*BlockInfoStateEntry {
	if m != nil {
		return m.BlockInfo
	}
	return nil
}

func (m *GenesisState) GetDisputeFeePayer() []*DisputeFeePayerStateEntry {
	if m != nil {
		return m.DisputeFeePayer
	}
	return nil
}

func (m *GenesisState) GetVoteCountsByGroup() []*VoteCountsByGroupStateEntry {
	if m != nil {
		return m.VoteCountsByGroup
	}
	return nil
}

type DisputeStateEntry struct {
	DisputeId uint64   `protobuf:"varint,1,opt,name=dispute_id,json=disputeId,proto3" json:"dispute_id,omitempty"`
	Dispute   *Dispute `protobuf:"bytes,2,opt,name=dispute,proto3" json:"dispute,omitempty"`
}

func (m *DisputeStateEntry) Reset()         { *m = DisputeStateEntry{} }
func (m *DisputeStateEntry) String() string { return proto.CompactTextString(m) }
func (*DisputeStateEntry) ProtoMessage()    {}
func (*DisputeStateEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_8abee26cd752ac91, []int{1}
}
func (m *DisputeStateEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DisputeStateEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DisputeStateEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DisputeStateEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisputeStateEntry.Merge(m, src)
}
func (m *DisputeStateEntry) XXX_Size() int {
	return m.Size()
}
func (m *DisputeStateEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_DisputeStateEntry.DiscardUnknown(m)
}

var xxx_messageInfo_DisputeStateEntry proto.InternalMessageInfo

func (m *DisputeStateEntry) GetDisputeId() uint64 {
	if m != nil {
		return m.DisputeId
	}
	return 0
}

func (m *DisputeStateEntry) GetDispute() *Dispute {
	if m != nil {
		return m.Dispute
	}
	return nil
}

type VotesStateEntry struct {
	DisputeId uint64 `protobuf:"varint,1,opt,name=dispute_id,json=disputeId,proto3" json:"dispute_id,omitempty"`
	Vote      *Vote  `protobuf:"bytes,2,opt,name=vote,proto3" json:"vote,omitempty"`
}

func (m *VotesStateEntry) Reset()         { *m = VotesStateEntry{} }
func (m *VotesStateEntry) String() string { return proto.CompactTextString(m) }
func (*VotesStateEntry) ProtoMessage()    {}
func (*VotesStateEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_8abee26cd752ac91, []int{2}
}
func (m *VotesStateEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VotesStateEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VotesStateEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VotesStateEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VotesStateEntry.Merge(m, src)
}
func (m *VotesStateEntry) XXX_Size() int {
	return m.Size()
}
func (m *VotesStateEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_VotesStateEntry.DiscardUnknown(m)
}

var xxx_messageInfo_VotesStateEntry proto.InternalMessageInfo

func (m *VotesStateEntry) GetDisputeId() uint64 {
	if m != nil {
		return m.DisputeId
	}
	return 0
}

func (m *VotesStateEntry) GetVote() *Vote {
	if m != nil {
		return m.Vote
	}
	return nil
}

type VoterStateEntry struct {
	DisputeId    uint64 `protobuf:"varint,1,opt,name=dispute_id,json=disputeId,proto3" json:"dispute_id,omitempty"`
	VoterAddress []byte `protobuf:"bytes,2,opt,name=voter_address,json=voterAddress,proto3" json:"voter_address,omitempty"`
	Voter        *Voter `protobuf:"bytes,3,opt,name=voter,proto3" json:"voter,omitempty"`
}

func (m *VoterStateEntry) Reset()         { *m = VoterStateEntry{} }
func (m *VoterStateEntry) String() string { return proto.CompactTextString(m) }
func (*VoterStateEntry) ProtoMessage()    {}
func (*VoterStateEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_8abee26cd752ac91, []int{3}
}
func (m *VoterStateEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoterStateEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoterStateEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoterStateEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoterStateEntry.Merge(m, src)
}
func (m *VoterStateEntry) XXX_Size() int {
	return m.Size()
}
func (m *VoterStateEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_VoterStateEntry.DiscardUnknown(m)
}

var xxx_messageInfo_VoterStateEntry proto.InternalMessageInfo

func (m *VoterStateEntry) GetDisputeId() uint64 {
	if m != nil {
		return m.DisputeId
	}
	return 0
}

func (m *VoterStateEntry) GetVoterAddress() []byte {
	if m != nil {
		return m.VoterAddress
	}
	return nil
}

func (m *VoterStateEntry) GetVoter() *Voter {
	if m != nil {
		return m.Voter
	}
	return nil
}

type ReportersWithDelegatorsWhoVotedStateEntry struct {
	DisputeId       uint64                `protobuf:"varint,1,opt,name=dispute_id,json=disputeId,proto3" json:"dispute_id,omitempty"`
	ReporterAddress []byte                `protobuf:"bytes,2,opt,name=reporter_address,json=reporterAddress,proto3" json:"reporter_address,omitempty"`
	VotedAmount     cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=voted_amount,json=votedAmount,proto3,customtype=cosmossdk.io/math.Int" json:"voted_amount"`
}

func (m *ReportersWithDelegatorsWhoVotedStateEntry) Reset() {
	*m = ReportersWithDelegatorsWhoVotedStateEntry{}
}
func (m *ReportersWithDelegatorsWhoVotedStateEntry) String() string {
	return proto.CompactTextString(m)
}
func (*ReportersWithDelegatorsWhoVotedStateEntry) ProtoMessage() {}
func (*ReportersWithDelegatorsWhoVotedStateEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_8abee26cd752ac91, []int{4}
}
func (m *ReportersWithDelegatorsWhoVotedStateEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReportersWithDelegatorsWhoVotedStateEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReportersWithDelegatorsWhoVotedStateEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReportersWithDelegatorsWhoVotedStateEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportersWithDelegatorsWhoVotedStateEntry.Merge(m, src)
}
func (m *ReportersWithDelegatorsWhoVotedStateEntry) XXX_Size() int {
	return m.Size()
}
func (m *ReportersWithDelegatorsWhoVotedStateEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportersWithDelegatorsWhoVotedStateEntry.DiscardUnknown(m)
}

var xxx_messageInfo_ReportersWithDelegatorsWhoVotedStateEntry proto.InternalMessageInfo

func (m *ReportersWithDelegatorsWhoVotedStateEntry) GetDisputeId() uint64 {
	if m != nil {
		return m.DisputeId
	}
	return 0
}

func (m *ReportersWithDelegatorsWhoVotedStateEntry) GetReporterAddress() []byte {
	if m != nil {
		return m.ReporterAddress
	}
	return nil
}

type BlockInfoStateEntry struct {
	HashId    []byte     `protobuf:"bytes,1,opt,name=hash_id,json=hashId,proto3" json:"hash_id,omitempty"`
	BlockInfo *BlockInfo `protobuf:"bytes,2,opt,name=block_info,json=blockInfo,proto3" json:"block_info,omitempty"`
}

func (m *BlockInfoStateEntry) Reset()         { *m = BlockInfoStateEntry{} }
func (m *BlockInfoStateEntry) String() string { return proto.CompactTextString(m) }
func (*BlockInfoStateEntry) ProtoMessage()    {}
func (*BlockInfoStateEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_8abee26cd752ac91, []int{5}
}
func (m *BlockInfoStateEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockInfoStateEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockInfoStateEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockInfoStateEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockInfoStateEntry.Merge(m, src)
}
func (m *BlockInfoStateEntry) XXX_Size() int {
	return m.Size()
}
func (m *BlockInfoStateEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockInfoStateEntry.DiscardUnknown(m)
}

var xxx_messageInfo_BlockInfoStateEntry proto.InternalMessageInfo

func (m *BlockInfoStateEntry) GetHashId() []byte {
	if m != nil {
		return m.HashId
	}
	return nil
}

func (m *BlockInfoStateEntry) GetBlockInfo() *BlockInfo {
	if m != nil {
		return m.BlockInfo
	}
	return nil
}

type DisputeFeePayerStateEntry struct {
	DisputeId uint64     `protobuf:"varint,1,opt,name=dispute_id,json=disputeId,proto3" json:"dispute_id,omitempty"`
	Payer     []byte     `protobuf:"bytes,2,opt,name=payer,proto3" json:"payer,omitempty"`
	PayerInfo *PayerInfo `protobuf:"bytes,3,opt,name=payer_info,json=payerInfo,proto3" json:"payer_info,omitempty"`
}

func (m *DisputeFeePayerStateEntry) Reset()         { *m = DisputeFeePayerStateEntry{} }
func (m *DisputeFeePayerStateEntry) String() string { return proto.CompactTextString(m) }
func (*DisputeFeePayerStateEntry) ProtoMessage()    {}
func (*DisputeFeePayerStateEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_8abee26cd752ac91, []int{6}
}
func (m *DisputeFeePayerStateEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DisputeFeePayerStateEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DisputeFeePayerStateEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DisputeFeePayerStateEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisputeFeePayerStateEntry.Merge(m, src)
}
func (m *DisputeFeePayerStateEntry) XXX_Size() int {
	return m.Size()
}
func (m *DisputeFeePayerStateEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_DisputeFeePayerStateEntry.DiscardUnknown(m)
}

var xxx_messageInfo_DisputeFeePayerStateEntry proto.InternalMessageInfo

func (m *DisputeFeePayerStateEntry) GetDisputeId() uint64 {
	if m != nil {
		return m.DisputeId
	}
	return 0
}

func (m *DisputeFeePayerStateEntry) GetPayer() []byte {
	if m != nil {
		return m.Payer
	}
	return nil
}

func (m *DisputeFeePayerStateEntry) GetPayerInfo() *PayerInfo {
	if m != nil {
		return m.PayerInfo
	}
	return nil
}

type VoteCountsByGroupStateEntry struct {
	DisputeId uint64      `protobuf:"varint,1,opt,name=dispute_id,json=disputeId,proto3" json:"dispute_id,omitempty"`
	Users     *VoteCounts `protobuf:"bytes,2,opt,name=users,proto3" json:"users,omitempty"`
	Reporters *VoteCounts `protobuf:"bytes,3,opt,name=reporters,proto3" json:"reporters,omitempty"`
	Team      *VoteCounts `protobuf:"bytes,4,opt,name=team,proto3" json:"team,omitempty"`
}

func (m *VoteCountsByGroupStateEntry) Reset()         { *m = VoteCountsByGroupStateEntry{} }
func (m *VoteCountsByGroupStateEntry) String() string { return proto.CompactTextString(m) }
func (*VoteCountsByGroupStateEntry) ProtoMessage()    {}
func (*VoteCountsByGroupStateEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_8abee26cd752ac91, []int{7}
}
func (m *VoteCountsByGroupStateEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoteCountsByGroupStateEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoteCountsByGroupStateEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoteCountsByGroupStateEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoteCountsByGroupStateEntry.Merge(m, src)
}
func (m *VoteCountsByGroupStateEntry) XXX_Size() int {
	return m.Size()
}
func (m *VoteCountsByGroupStateEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_VoteCountsByGroupStateEntry.DiscardUnknown(m)
}

var xxx_messageInfo_VoteCountsByGroupStateEntry proto.InternalMessageInfo

func (m *VoteCountsByGroupStateEntry) GetDisputeId() uint64 {
	if m != nil {
		return m.DisputeId
	}
	return 0
}

func (m *VoteCountsByGroupStateEntry) GetUsers() *VoteCounts {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *VoteCountsByGroupStateEntry) GetReporters() *VoteCounts {
	if m != nil {
		return m.Reporters
	}
	return nil
}

func (m *VoteCountsByGroupStateEntry) GetTeam() *VoteCounts {
	if m != nil {
		return m.Team
	}
	return nil
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "layer.dispute.GenesisState")
	proto.RegisterType((*DisputeStateEntry)(nil), "layer.dispute.DisputeStateEntry")
	proto.RegisterType((*VotesStateEntry)(nil), "layer.dispute.VotesStateEntry")
	proto.RegisterType((*VoterStateEntry)(nil), "layer.dispute.VoterStateEntry")
	proto.RegisterType((*ReportersWithDelegatorsWhoVotedStateEntry)(nil), "layer.dispute.ReportersWithDelegatorsWhoVotedStateEntry")
	proto.RegisterType((*BlockInfoStateEntry)(nil), "layer.dispute.BlockInfoStateEntry")
	proto.RegisterType((*DisputeFeePayerStateEntry)(nil), "layer.dispute.DisputeFeePayerStateEntry")
	proto.RegisterType((*VoteCountsByGroupStateEntry)(nil), "layer.dispute.VoteCountsByGroupStateEntry")
}

func init() { proto.RegisterFile("layer/dispute/genesis.proto", fileDescriptor_8abee26cd752ac91) }

var fileDescriptor_8abee26cd752ac91 = []byte{
	// 759 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0xcf, 0x4f, 0x13, 0x41,
	0x14, 0xee, 0xd2, 0x1f, 0xd0, 0x47, 0x09, 0x32, 0x14, 0xdd, 0x42, 0x2c, 0xcd, 0x72, 0xb0, 0x60,
	0x68, 0x0d, 0x98, 0xe0, 0xc1, 0xc4, 0x50, 0x51, 0xd2, 0x8b, 0x21, 0xab, 0x91, 0xa8, 0x87, 0xcd,
	0xb6, 0x3b, 0x74, 0x37, 0xb4, 0x9d, 0xcd, 0xcc, 0x14, 0xed, 0xd1, 0x8b, 0x89, 0x37, 0xff, 0x11,
	0x6f, 0xfe, 0x0b, 0x26, 0x1c, 0x89, 0x89, 0x89, 0xf1, 0x40, 0x0c, 0xfc, 0x23, 0x66, 0x66, 0x76,
	0x4b, 0xbb, 0x6e, 0x29, 0x9e, 0xba, 0xf3, 0xbe, 0xef, 0x7b, 0xef, 0xdb, 0x37, 0xef, 0x75, 0x61,
	0xa5, 0x6d, 0xf7, 0x31, 0xad, 0x3a, 0x1e, 0xf3, 0x7b, 0x1c, 0x57, 0x5b, 0xb8, 0x8b, 0x99, 0xc7,
	0x2a, 0x3e, 0x25, 0x9c, 0xa0, 0x39, 0x09, 0x56, 0x02, 0x70, 0xb9, 0xd0, 0x24, 0xac, 0x43, 0x98,
	0x25, 0xc1, 0xaa, 0x3a, 0x28, 0xe6, 0x72, 0xbe, 0x45, 0x5a, 0x44, 0xc5, 0xc5, 0x53, 0x10, 0x5d,
	0x1e, 0x4d, 0xee, 0xdb, 0xd4, 0xee, 0x84, 0x8a, 0x48, 0xe1, 0xe0, 0x37, 0x00, 0xf5, 0x51, 0xf0,
	0x84, 0x0c, 0x90, 0xc2, 0x28, 0xc2, 0xed, 0x76, 0xbb, 0xaf, 0x20, 0xe3, 0x6b, 0x1a, 0x72, 0xfb,
	0xca, 0xff, 0x4b, 0x6e, 0x73, 0x8c, 0xb6, 0x21, 0xa3, 0x4a, 0xea, 0x5a, 0x49, 0x2b, 0xcf, 0x6e,
	0x2d, 0x55, 0x46, 0xde, 0xa7, 0x72, 0x20, 0xc1, 0x5a, 0xea, 0xf4, 0x7c, 0x35, 0x61, 0x06, 0x54,
	0xf4, 0x18, 0x66, 0x02, 0x9c, 0xe9, 0x53, 0xa5, 0x64, 0x79, 0x76, 0xab, 0x14, 0x91, 0xed, 0xa9,
	0x5f, 0x59, 0xe3, 0x59, 0x97, 0xd3, 0xbe, 0x39, 0x50, 0xa0, 0x87, 0x90, 0x16, 0x66, 0x99, 0x9e,
	0x94, 0xd2, 0x62, 0x44, 0xfa, 0x5a, 0x60, 0x43, 0x42, 0x45, 0x0e, 0x55, 0x54, 0x4f, 0x8d, 0x55,
	0xd1, 0xa8, 0x8a, 0xa2, 0x4f, 0x1a, 0xac, 0x51, 0xec, 0x13, 0xca, 0x31, 0x65, 0xd6, 0x7b, 0x8f,
	0xbb, 0x96, 0x83, 0xdb, 0xb8, 0x65, 0x73, 0x22, 0xce, 0x2e, 0xb1, 0x04, 0xcf, 0xd1, 0xd3, 0x32,
	0xe9, 0xa3, 0x48, 0x52, 0x33, 0x54, 0x1e, 0x7a, 0xdc, 0xdd, 0x1b, 0xe8, 0x0e, 0x5d, 0x22, 0xca,
	0x39, 0x43, 0xe5, 0x56, 0xe9, 0xf5, 0x54, 0xb4, 0x0b, 0xd0, 0x68, 0x93, 0xe6, 0xb1, 0xe5, 0x75,
	0x8f, 0x88, 0x9e, 0x91, 0xe5, 0x8c, 0x48, 0xb9, 0x9a, 0x20, 0xd4, 0xbb, 0x47, 0x64, 0x28, 0x71,
	0xb6, 0x11, 0x06, 0xd1, 0x2b, 0x58, 0x08, 0x98, 0xd6, 0x11, 0xc6, 0x96, 0x2f, 0xb4, 0xfa, 0xb4,
	0xcc, 0x54, 0x8e, 0x6f, 0xff, 0x73, 0x8c, 0x0f, 0x44, 0x7c, 0x28, 0xdf, 0xbc, 0x33, 0x0a, 0xa1,
	0x27, 0x90, 0x72, 0x7a, 0x8c, 0xeb, 0x33, 0x25, 0xad, 0x9c, 0xad, 0xdd, 0x17, 0xf7, 0xfc, 0xfb,
	0x7c, 0x75, 0x49, 0x4d, 0x2e, 0x73, 0x8e, 0x2b, 0x1e, 0xa9, 0x76, 0x6c, 0xee, 0x56, 0xea, 0x5d,
	0xfe, 0xe3, 0xdb, 0x26, 0x04, 0x23, 0x5d, 0xef, 0x72, 0x53, 0x0a, 0xd1, 0x3b, 0xc8, 0x8b, 0x1e,
	0x5a, 0x4d, 0xd2, 0xeb, 0x72, 0x66, 0x35, 0xfa, 0x56, 0x8b, 0x92, 0x9e, 0xaf, 0x67, 0xa5, 0xb3,
	0x8d, 0x98, 0x7b, 0x7a, 0x2a, 0x99, 0xb5, 0xfe, 0xbe, 0xe0, 0x0d, 0x79, 0x5b, 0x38, 0x89, 0x82,
	0x86, 0x03, 0x0b, 0xff, 0x8c, 0x12, 0xba, 0x0b, 0x10, 0x36, 0xc2, 0x73, 0xe4, 0xdc, 0xa6, 0xcc,
	0x6c, 0x10, 0xa9, 0x3b, 0xe8, 0x01, 0x4c, 0x07, 0x07, 0x7d, 0x4a, 0xce, 0xf4, 0xed, 0xf8, 0xee,
	0x98, 0x21, 0xcd, 0x78, 0x03, 0xf3, 0x91, 0xa9, 0x9b, 0x54, 0xe3, 0x1e, 0xa4, 0x84, 0xd9, 0xa0,
	0xc0, 0x62, 0xcc, 0x4b, 0x9a, 0x92, 0x60, 0x7c, 0xd4, 0x54, 0x6e, 0x7a, 0xf3, 0xdc, 0x6b, 0x30,
	0x27, 0x87, 0xd7, 0xb2, 0x1d, 0x87, 0x62, 0xc6, 0x64, 0x91, 0x9c, 0x99, 0x93, 0xc1, 0x5d, 0x15,
	0x43, 0x1b, 0xe1, 0x3a, 0x24, 0xa5, 0x83, 0x7c, 0xdc, 0x3a, 0x04, 0x4b, 0x60, 0x7c, 0xd7, 0x60,
	0xfd, 0xc6, 0xa3, 0x3c, 0xc9, 0xdd, 0x3a, 0xdc, 0x0a, 0x67, 0x3d, 0x62, 0x70, 0x3e, 0x8c, 0x87,
	0x1e, 0x5f, 0x80, 0xf4, 0xec, 0x58, 0x76, 0x47, 0x5c, 0xaa, 0xb4, 0xfa, 0x9f, 0x23, 0x36, 0x2b,
	0x13, 0xec, 0x4a, 0xbd, 0xd1, 0x82, 0xc5, 0x98, 0x15, 0x41, 0x77, 0x60, 0xda, 0xb5, 0x99, 0x1b,
	0xba, 0xcd, 0x99, 0x19, 0x71, 0xac, 0x3b, 0x68, 0x67, 0x64, 0xe7, 0xd4, 0x55, 0xe9, 0xe3, 0x76,
	0x6e, 0x68, 0xd3, 0x8c, 0xcf, 0x1a, 0x14, 0xc6, 0xae, 0xd0, 0xa4, 0x06, 0xe5, 0x21, 0xad, 0x56,
	0x53, 0x75, 0x45, 0x1d, 0x84, 0x17, 0xf9, 0xa0, 0xbc, 0x24, 0x63, 0xbd, 0xc8, 0x42, 0xca, 0x8b,
	0x1f, 0x3e, 0x1a, 0x3f, 0x35, 0x58, 0xb9, 0x66, 0x69, 0x26, 0xb9, 0xa9, 0x42, 0xba, 0xc7, 0x30,
	0x65, 0xc1, 0xeb, 0x17, 0xc6, 0xae, 0xa3, 0xa9, 0x78, 0x68, 0x07, 0xb2, 0x83, 0xff, 0xb2, 0xc0,
	0xe7, 0x35, 0xa2, 0x2b, 0x2e, 0xda, 0x84, 0x14, 0xc7, 0x76, 0x47, 0x4f, 0x4d, 0xd2, 0x48, 0x5a,
	0x6d, 0xef, 0xf4, 0xa2, 0xa8, 0x9d, 0x5d, 0x14, 0xb5, 0x3f, 0x17, 0x45, 0xed, 0xcb, 0x65, 0x31,
	0x71, 0x76, 0x59, 0x4c, 0xfc, 0xba, 0x2c, 0x26, 0xde, 0x6e, 0xb4, 0x3c, 0xee, 0xf6, 0x1a, 0x95,
	0x26, 0xe9, 0x54, 0x39, 0x6e, 0xb7, 0x09, 0xdd, 0xf4, 0x48, 0x55, 0x7d, 0xd3, 0x3e, 0x5c, 0x7d,
	0xd5, 0xfa, 0x3e, 0x66, 0x8d, 0x8c, 0xfc, 0xac, 0x6d, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x07,
	0x64, 0xbf, 0x58, 0xa3, 0x07, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VoteCountsByGroup) > 0 {
		for iNdEx := len(m.VoteCountsByGroup) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VoteCountsByGroup[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	{
		size := m.Dust.Size()
		i -= size
		if _, err := m.Dust.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if len(m.DisputeFeePayer) > 0 {
		for iNdEx := len(m.DisputeFeePayer) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DisputeFeePayer[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.BlockInfo) > 0 {
		for iNdEx := len(m.BlockInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BlockInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.ReportersWithDelegatorsWhoVoted) > 0 {
		for iNdEx := len(m.ReportersWithDelegatorsWhoVoted) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReportersWithDelegatorsWhoVoted[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Voter) > 0 {
		for iNdEx := len(m.Voter) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Voter[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Votes) > 0 {
		for iNdEx := len(m.Votes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Votes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Disputes) > 0 {
		for iNdEx := len(m.Disputes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Disputes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *DisputeStateEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DisputeStateEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DisputeStateEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Dispute != nil {
		{
			size, err := m.Dispute.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.DisputeId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.DisputeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VotesStateEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VotesStateEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VotesStateEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Vote != nil {
		{
			size, err := m.Vote.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.DisputeId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.DisputeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VoterStateEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoterStateEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoterStateEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Voter != nil {
		{
			size, err := m.Voter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VoterAddress) > 0 {
		i -= len(m.VoterAddress)
		copy(dAtA[i:], m.VoterAddress)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.VoterAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.DisputeId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.DisputeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReportersWithDelegatorsWhoVotedStateEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportersWithDelegatorsWhoVotedStateEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReportersWithDelegatorsWhoVotedStateEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.VotedAmount.Size()
		i -= size
		if _, err := m.VotedAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.ReporterAddress) > 0 {
		i -= len(m.ReporterAddress)
		copy(dAtA[i:], m.ReporterAddress)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.ReporterAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.DisputeId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.DisputeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BlockInfoStateEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockInfoStateEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockInfoStateEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockInfo != nil {
		{
			size, err := m.BlockInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.HashId) > 0 {
		i -= len(m.HashId)
		copy(dAtA[i:], m.HashId)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.HashId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DisputeFeePayerStateEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DisputeFeePayerStateEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DisputeFeePayerStateEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PayerInfo != nil {
		{
			size, err := m.PayerInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Payer) > 0 {
		i -= len(m.Payer)
		copy(dAtA[i:], m.Payer)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Payer)))
		i--
		dAtA[i] = 0x12
	}
	if m.DisputeId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.DisputeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VoteCountsByGroupStateEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoteCountsByGroupStateEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoteCountsByGroupStateEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Team != nil {
		{
			size, err := m.Team.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Reporters != nil {
		{
			size, err := m.Reporters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Users != nil {
		{
			size, err := m.Users.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.DisputeId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.DisputeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.Disputes) > 0 {
		for _, e := range m.Disputes {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Votes) > 0 {
		for _, e := range m.Votes {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Voter) > 0 {
		for _, e := range m.Voter {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.ReportersWithDelegatorsWhoVoted) > 0 {
		for _, e := range m.ReportersWithDelegatorsWhoVoted {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.BlockInfo) > 0 {
		for _, e := range m.BlockInfo {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.DisputeFeePayer) > 0 {
		for _, e := range m.DisputeFeePayer {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	l = m.Dust.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.VoteCountsByGroup) > 0 {
		for _, e := range m.VoteCountsByGroup {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *DisputeStateEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisputeId != 0 {
		n += 1 + sovGenesis(uint64(m.DisputeId))
	}
	if m.Dispute != nil {
		l = m.Dispute.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *VotesStateEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisputeId != 0 {
		n += 1 + sovGenesis(uint64(m.DisputeId))
	}
	if m.Vote != nil {
		l = m.Vote.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *VoterStateEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisputeId != 0 {
		n += 1 + sovGenesis(uint64(m.DisputeId))
	}
	l = len(m.VoterAddress)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.Voter != nil {
		l = m.Voter.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *ReportersWithDelegatorsWhoVotedStateEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisputeId != 0 {
		n += 1 + sovGenesis(uint64(m.DisputeId))
	}
	l = len(m.ReporterAddress)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = m.VotedAmount.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *BlockInfoStateEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HashId)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.BlockInfo != nil {
		l = m.BlockInfo.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *DisputeFeePayerStateEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisputeId != 0 {
		n += 1 + sovGenesis(uint64(m.DisputeId))
	}
	l = len(m.Payer)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.PayerInfo != nil {
		l = m.PayerInfo.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *VoteCountsByGroupStateEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisputeId != 0 {
		n += 1 + sovGenesis(uint64(m.DisputeId))
	}
	if m.Users != nil {
		l = m.Users.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.Reporters != nil {
		l = m.Reporters.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.Team != nil {
		l = m.Team.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disputes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Disputes = append(m.Disputes, &DisputeStateEntry{})
			if err := m.Disputes[len(m.Disputes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Votes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Votes = append(m.Votes, &VotesStateEntry{})
			if err := m.Votes[len(m.Votes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Voter = append(m.Voter, &VoterStateEntry{})
			if err := m.Voter[len(m.Voter)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportersWithDelegatorsWhoVoted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReportersWithDelegatorsWhoVoted = append(m.ReportersWithDelegatorsWhoVoted, &ReportersWithDelegatorsWhoVotedStateEntry{})
			if err := m.ReportersWithDelegatorsWhoVoted[len(m.ReportersWithDelegatorsWhoVoted)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockInfo = append(m.BlockInfo, &BlockInfoStateEntry{})
			if err := m.BlockInfo[len(m.BlockInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeFeePayer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisputeFeePayer = append(m.DisputeFeePayer, &DisputeFeePayerStateEntry{})
			if err := m.DisputeFeePayer[len(m.DisputeFeePayer)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dust", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Dust.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteCountsByGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoteCountsByGroup = append(m.VoteCountsByGroup, &VoteCountsByGroupStateEntry{})
			if err := m.VoteCountsByGroup[len(m.VoteCountsByGroup)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DisputeStateEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DisputeStateEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DisputeStateEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeId", wireType)
			}
			m.DisputeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisputeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dispute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dispute == nil {
				m.Dispute = &Dispute{}
			}
			if err := m.Dispute.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VotesStateEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VotesStateEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VotesStateEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeId", wireType)
			}
			m.DisputeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisputeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vote == nil {
				m.Vote = &Vote{}
			}
			if err := m.Vote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoterStateEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoterStateEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoterStateEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeId", wireType)
			}
			m.DisputeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisputeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoterAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoterAddress = append(m.VoterAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.VoterAddress == nil {
				m.VoterAddress = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Voter == nil {
				m.Voter = &Voter{}
			}
			if err := m.Voter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReportersWithDelegatorsWhoVotedStateEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportersWithDelegatorsWhoVotedStateEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportersWithDelegatorsWhoVotedStateEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeId", wireType)
			}
			m.DisputeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisputeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReporterAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReporterAddress = append(m.ReporterAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.ReporterAddress == nil {
				m.ReporterAddress = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotedAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VotedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockInfoStateEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockInfoStateEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockInfoStateEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HashId = append(m.HashId[:0], dAtA[iNdEx:postIndex]...)
			if m.HashId == nil {
				m.HashId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockInfo == nil {
				m.BlockInfo = &BlockInfo{}
			}
			if err := m.BlockInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DisputeFeePayerStateEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DisputeFeePayerStateEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DisputeFeePayerStateEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeId", wireType)
			}
			m.DisputeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisputeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payer = append(m.Payer[:0], dAtA[iNdEx:postIndex]...)
			if m.Payer == nil {
				m.Payer = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayerInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PayerInfo == nil {
				m.PayerInfo = &PayerInfo{}
			}
			if err := m.PayerInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoteCountsByGroupStateEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoteCountsByGroupStateEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoteCountsByGroupStateEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeId", wireType)
			}
			m.DisputeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisputeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Users == nil {
				m.Users = &VoteCounts{}
			}
			if err := m.Users.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reporters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reporters == nil {
				m.Reporters = &VoteCounts{}
			}
			if err := m.Reporters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Team", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Team == nil {
				m.Team = &VoteCounts{}
			}
			if err := m.Team.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
