// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: layer/dispute/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	types1 "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/tellor-io/layer/x/oracle/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgAddEvidence struct {
	CallerAddress string               `protobuf:"bytes,1,opt,name=caller_address,json=callerAddress,proto3" json:"caller_address,omitempty"`
	DisputeId     uint64               `protobuf:"varint,2,opt,name=dispute_id,json=disputeId,proto3" json:"dispute_id,omitempty"`
	Reports       []*types.MicroReport `protobuf:"bytes,3,rep,name=reports,proto3" json:"reports,omitempty"`
}

func (m *MsgAddEvidence) Reset()         { *m = MsgAddEvidence{} }
func (m *MsgAddEvidence) String() string { return proto.CompactTextString(m) }
func (*MsgAddEvidence) ProtoMessage()    {}
func (*MsgAddEvidence) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a591d7bef5d6e8a, []int{0}
}
func (m *MsgAddEvidence) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddEvidence) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddEvidence.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddEvidence) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddEvidence.Merge(m, src)
}
func (m *MsgAddEvidence) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddEvidence) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddEvidence.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddEvidence proto.InternalMessageInfo

func (m *MsgAddEvidence) GetCallerAddress() string {
	if m != nil {
		return m.CallerAddress
	}
	return ""
}

func (m *MsgAddEvidence) GetDisputeId() uint64 {
	if m != nil {
		return m.DisputeId
	}
	return 0
}

func (m *MsgAddEvidence) GetReports() []*types.MicroReport {
	if m != nil {
		return m.Reports
	}
	return nil
}

type MsgAddEvidenceResponse struct {
}

func (m *MsgAddEvidenceResponse) Reset()         { *m = MsgAddEvidenceResponse{} }
func (m *MsgAddEvidenceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddEvidenceResponse) ProtoMessage()    {}
func (*MsgAddEvidenceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a591d7bef5d6e8a, []int{1}
}
func (m *MsgAddEvidenceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddEvidenceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddEvidenceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddEvidenceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddEvidenceResponse.Merge(m, src)
}
func (m *MsgAddEvidenceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddEvidenceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddEvidenceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddEvidenceResponse proto.InternalMessageInfo

type MsgWithdrawFeeRefund struct {
	CallerAddress string `protobuf:"bytes,1,opt,name=caller_address,json=callerAddress,proto3" json:"caller_address,omitempty"`
	PayerAddress  string `protobuf:"bytes,2,opt,name=payer_address,json=payerAddress,proto3" json:"payer_address,omitempty"`
	Id            uint64 `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgWithdrawFeeRefund) Reset()         { *m = MsgWithdrawFeeRefund{} }
func (m *MsgWithdrawFeeRefund) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawFeeRefund) ProtoMessage()    {}
func (*MsgWithdrawFeeRefund) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a591d7bef5d6e8a, []int{2}
}
func (m *MsgWithdrawFeeRefund) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawFeeRefund) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawFeeRefund.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawFeeRefund) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawFeeRefund.Merge(m, src)
}
func (m *MsgWithdrawFeeRefund) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawFeeRefund) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawFeeRefund.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawFeeRefund proto.InternalMessageInfo

func (m *MsgWithdrawFeeRefund) GetCallerAddress() string {
	if m != nil {
		return m.CallerAddress
	}
	return ""
}

func (m *MsgWithdrawFeeRefund) GetPayerAddress() string {
	if m != nil {
		return m.PayerAddress
	}
	return ""
}

func (m *MsgWithdrawFeeRefund) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MsgWithdrawFeeRefundResponse struct {
}

func (m *MsgWithdrawFeeRefundResponse) Reset()         { *m = MsgWithdrawFeeRefundResponse{} }
func (m *MsgWithdrawFeeRefundResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawFeeRefundResponse) ProtoMessage()    {}
func (*MsgWithdrawFeeRefundResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a591d7bef5d6e8a, []int{3}
}
func (m *MsgWithdrawFeeRefundResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawFeeRefundResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawFeeRefundResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawFeeRefundResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawFeeRefundResponse.Merge(m, src)
}
func (m *MsgWithdrawFeeRefundResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawFeeRefundResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawFeeRefundResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawFeeRefundResponse proto.InternalMessageInfo

type MsgExecuteDispute struct {
	CallerAddress string `protobuf:"bytes,1,opt,name=caller_address,json=callerAddress,proto3" json:"caller_address,omitempty"`
	DisputeId     uint64 `protobuf:"varint,2,opt,name=dispute_id,json=disputeId,proto3" json:"dispute_id,omitempty"`
}

func (m *MsgExecuteDispute) Reset()         { *m = MsgExecuteDispute{} }
func (m *MsgExecuteDispute) String() string { return proto.CompactTextString(m) }
func (*MsgExecuteDispute) ProtoMessage()    {}
func (*MsgExecuteDispute) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a591d7bef5d6e8a, []int{4}
}
func (m *MsgExecuteDispute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExecuteDispute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExecuteDispute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExecuteDispute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExecuteDispute.Merge(m, src)
}
func (m *MsgExecuteDispute) XXX_Size() int {
	return m.Size()
}
func (m *MsgExecuteDispute) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExecuteDispute.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExecuteDispute proto.InternalMessageInfo

func (m *MsgExecuteDispute) GetCallerAddress() string {
	if m != nil {
		return m.CallerAddress
	}
	return ""
}

func (m *MsgExecuteDispute) GetDisputeId() uint64 {
	if m != nil {
		return m.DisputeId
	}
	return 0
}

type MsgExecuteDisputeResponse struct {
}

func (m *MsgExecuteDisputeResponse) Reset()         { *m = MsgExecuteDisputeResponse{} }
func (m *MsgExecuteDisputeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgExecuteDisputeResponse) ProtoMessage()    {}
func (*MsgExecuteDisputeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a591d7bef5d6e8a, []int{5}
}
func (m *MsgExecuteDisputeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExecuteDisputeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExecuteDisputeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExecuteDisputeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExecuteDisputeResponse.Merge(m, src)
}
func (m *MsgExecuteDisputeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgExecuteDisputeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExecuteDisputeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExecuteDisputeResponse proto.InternalMessageInfo

type MsgTallyVote struct {
	CallerAddress string `protobuf:"bytes,1,opt,name=caller_address,json=callerAddress,proto3" json:"caller_address,omitempty"`
	DisputeId     uint64 `protobuf:"varint,2,opt,name=dispute_id,json=disputeId,proto3" json:"dispute_id,omitempty"`
}

func (m *MsgTallyVote) Reset()         { *m = MsgTallyVote{} }
func (m *MsgTallyVote) String() string { return proto.CompactTextString(m) }
func (*MsgTallyVote) ProtoMessage()    {}
func (*MsgTallyVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a591d7bef5d6e8a, []int{6}
}
func (m *MsgTallyVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTallyVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTallyVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTallyVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTallyVote.Merge(m, src)
}
func (m *MsgTallyVote) XXX_Size() int {
	return m.Size()
}
func (m *MsgTallyVote) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTallyVote.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTallyVote proto.InternalMessageInfo

func (m *MsgTallyVote) GetCallerAddress() string {
	if m != nil {
		return m.CallerAddress
	}
	return ""
}

func (m *MsgTallyVote) GetDisputeId() uint64 {
	if m != nil {
		return m.DisputeId
	}
	return 0
}

type MsgTallyVoteResponse struct {
}

func (m *MsgTallyVoteResponse) Reset()         { *m = MsgTallyVoteResponse{} }
func (m *MsgTallyVoteResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTallyVoteResponse) ProtoMessage()    {}
func (*MsgTallyVoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a591d7bef5d6e8a, []int{7}
}
func (m *MsgTallyVoteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTallyVoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTallyVoteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTallyVoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTallyVoteResponse.Merge(m, src)
}
func (m *MsgTallyVoteResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTallyVoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTallyVoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTallyVoteResponse proto.InternalMessageInfo

type MsgProposeDispute struct {
	Creator         string             `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Report          *types.MicroReport `protobuf:"bytes,2,opt,name=report,proto3" json:"report,omitempty"`
	DisputeCategory DisputeCategory    `protobuf:"varint,3,opt,name=dispute_category,json=disputeCategory,proto3,enum=layer.dispute.DisputeCategory" json:"dispute_category,omitempty"`
	Fee             types1.Coin        `protobuf:"bytes,4,opt,name=fee,proto3" json:"fee"`
	PayFromBond     bool               `protobuf:"varint,5,opt,name=pay_from_bond,json=payFromBond,proto3" json:"pay_from_bond,omitempty"`
}

func (m *MsgProposeDispute) Reset()         { *m = MsgProposeDispute{} }
func (m *MsgProposeDispute) String() string { return proto.CompactTextString(m) }
func (*MsgProposeDispute) ProtoMessage()    {}
func (*MsgProposeDispute) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a591d7bef5d6e8a, []int{8}
}
func (m *MsgProposeDispute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProposeDispute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProposeDispute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProposeDispute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProposeDispute.Merge(m, src)
}
func (m *MsgProposeDispute) XXX_Size() int {
	return m.Size()
}
func (m *MsgProposeDispute) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProposeDispute.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProposeDispute proto.InternalMessageInfo

func (m *MsgProposeDispute) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgProposeDispute) GetReport() *types.MicroReport {
	if m != nil {
		return m.Report
	}
	return nil
}

func (m *MsgProposeDispute) GetDisputeCategory() DisputeCategory {
	if m != nil {
		return m.DisputeCategory
	}
	return Unspecified
}

func (m *MsgProposeDispute) GetFee() types1.Coin {
	if m != nil {
		return m.Fee
	}
	return types1.Coin{}
}

func (m *MsgProposeDispute) GetPayFromBond() bool {
	if m != nil {
		return m.PayFromBond
	}
	return false
}

type MsgProposeDisputeResponse struct {
}

func (m *MsgProposeDisputeResponse) Reset()         { *m = MsgProposeDisputeResponse{} }
func (m *MsgProposeDisputeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgProposeDisputeResponse) ProtoMessage()    {}
func (*MsgProposeDisputeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a591d7bef5d6e8a, []int{9}
}
func (m *MsgProposeDisputeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProposeDisputeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProposeDisputeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProposeDisputeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProposeDisputeResponse.Merge(m, src)
}
func (m *MsgProposeDisputeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgProposeDisputeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProposeDisputeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProposeDisputeResponse proto.InternalMessageInfo

type MsgAddFeeToDispute struct {
	Creator     string      `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	DisputeId   uint64      `protobuf:"varint,2,opt,name=dispute_id,json=disputeId,proto3" json:"dispute_id,omitempty"`
	Amount      types1.Coin `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount"`
	PayFromBond bool        `protobuf:"varint,4,opt,name=pay_from_bond,json=payFromBond,proto3" json:"pay_from_bond,omitempty"`
}

func (m *MsgAddFeeToDispute) Reset()         { *m = MsgAddFeeToDispute{} }
func (m *MsgAddFeeToDispute) String() string { return proto.CompactTextString(m) }
func (*MsgAddFeeToDispute) ProtoMessage()    {}
func (*MsgAddFeeToDispute) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a591d7bef5d6e8a, []int{10}
}
func (m *MsgAddFeeToDispute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddFeeToDispute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddFeeToDispute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddFeeToDispute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddFeeToDispute.Merge(m, src)
}
func (m *MsgAddFeeToDispute) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddFeeToDispute) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddFeeToDispute.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddFeeToDispute proto.InternalMessageInfo

func (m *MsgAddFeeToDispute) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgAddFeeToDispute) GetDisputeId() uint64 {
	if m != nil {
		return m.DisputeId
	}
	return 0
}

func (m *MsgAddFeeToDispute) GetAmount() types1.Coin {
	if m != nil {
		return m.Amount
	}
	return types1.Coin{}
}

func (m *MsgAddFeeToDispute) GetPayFromBond() bool {
	if m != nil {
		return m.PayFromBond
	}
	return false
}

type MsgAddFeeToDisputeResponse struct {
}

func (m *MsgAddFeeToDisputeResponse) Reset()         { *m = MsgAddFeeToDisputeResponse{} }
func (m *MsgAddFeeToDisputeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddFeeToDisputeResponse) ProtoMessage()    {}
func (*MsgAddFeeToDisputeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a591d7bef5d6e8a, []int{11}
}
func (m *MsgAddFeeToDisputeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddFeeToDisputeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddFeeToDisputeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddFeeToDisputeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddFeeToDisputeResponse.Merge(m, src)
}
func (m *MsgAddFeeToDisputeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddFeeToDisputeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddFeeToDisputeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddFeeToDisputeResponse proto.InternalMessageInfo

type MsgVote struct {
	Voter string   `protobuf:"bytes,1,opt,name=voter,proto3" json:"voter,omitempty"`
	Id    uint64   `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Vote  VoteEnum `protobuf:"varint,3,opt,name=vote,proto3,enum=layer.dispute.VoteEnum" json:"vote,omitempty"`
}

func (m *MsgVote) Reset()         { *m = MsgVote{} }
func (m *MsgVote) String() string { return proto.CompactTextString(m) }
func (*MsgVote) ProtoMessage()    {}
func (*MsgVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a591d7bef5d6e8a, []int{12}
}
func (m *MsgVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVote.Merge(m, src)
}
func (m *MsgVote) XXX_Size() int {
	return m.Size()
}
func (m *MsgVote) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVote.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVote proto.InternalMessageInfo

func (m *MsgVote) GetVoter() string {
	if m != nil {
		return m.Voter
	}
	return ""
}

func (m *MsgVote) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MsgVote) GetVote() VoteEnum {
	if m != nil {
		return m.Vote
	}
	return VoteEnum_VOTE_INVALID
}

type MsgVoteResponse struct {
}

func (m *MsgVoteResponse) Reset()         { *m = MsgVoteResponse{} }
func (m *MsgVoteResponse) String() string { return proto.CompactTextString(m) }
func (*MsgVoteResponse) ProtoMessage()    {}
func (*MsgVoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a591d7bef5d6e8a, []int{13}
}
func (m *MsgVoteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVoteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVoteResponse.Merge(m, src)
}
func (m *MsgVoteResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgVoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVoteResponse proto.InternalMessageInfo

type MsgUpdateTeam struct {
	CurrentTeamAddress string `protobuf:"bytes,1,opt,name=current_team_address,json=currentTeamAddress,proto3" json:"current_team_address,omitempty"`
	NewTeamAddress     string `protobuf:"bytes,2,opt,name=new_team_address,json=newTeamAddress,proto3" json:"new_team_address,omitempty"`
}

func (m *MsgUpdateTeam) Reset()         { *m = MsgUpdateTeam{} }
func (m *MsgUpdateTeam) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateTeam) ProtoMessage()    {}
func (*MsgUpdateTeam) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a591d7bef5d6e8a, []int{14}
}
func (m *MsgUpdateTeam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateTeam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateTeam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateTeam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateTeam.Merge(m, src)
}
func (m *MsgUpdateTeam) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateTeam) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateTeam.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateTeam proto.InternalMessageInfo

func (m *MsgUpdateTeam) GetCurrentTeamAddress() string {
	if m != nil {
		return m.CurrentTeamAddress
	}
	return ""
}

func (m *MsgUpdateTeam) GetNewTeamAddress() string {
	if m != nil {
		return m.NewTeamAddress
	}
	return ""
}

type MsgUpdateTeamResponse struct {
}

func (m *MsgUpdateTeamResponse) Reset()         { *m = MsgUpdateTeamResponse{} }
func (m *MsgUpdateTeamResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateTeamResponse) ProtoMessage()    {}
func (*MsgUpdateTeamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a591d7bef5d6e8a, []int{15}
}
func (m *MsgUpdateTeamResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateTeamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateTeamResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateTeamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateTeamResponse.Merge(m, src)
}
func (m *MsgUpdateTeamResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateTeamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateTeamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateTeamResponse proto.InternalMessageInfo

type MsgClaimReward struct {
	CallerAddress string `protobuf:"bytes,1,opt,name=caller_address,json=callerAddress,proto3" json:"caller_address,omitempty"`
	DisputeId     uint64 `protobuf:"varint,2,opt,name=dispute_id,json=disputeId,proto3" json:"dispute_id,omitempty"`
}

func (m *MsgClaimReward) Reset()         { *m = MsgClaimReward{} }
func (m *MsgClaimReward) String() string { return proto.CompactTextString(m) }
func (*MsgClaimReward) ProtoMessage()    {}
func (*MsgClaimReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a591d7bef5d6e8a, []int{16}
}
func (m *MsgClaimReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimReward.Merge(m, src)
}
func (m *MsgClaimReward) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimReward) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimReward.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimReward proto.InternalMessageInfo

func (m *MsgClaimReward) GetCallerAddress() string {
	if m != nil {
		return m.CallerAddress
	}
	return ""
}

func (m *MsgClaimReward) GetDisputeId() uint64 {
	if m != nil {
		return m.DisputeId
	}
	return 0
}

type MsgClaimRewardResponse struct {
}

func (m *MsgClaimRewardResponse) Reset()         { *m = MsgClaimRewardResponse{} }
func (m *MsgClaimRewardResponse) String() string { return proto.CompactTextString(m) }
func (*MsgClaimRewardResponse) ProtoMessage()    {}
func (*MsgClaimRewardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a591d7bef5d6e8a, []int{17}
}
func (m *MsgClaimRewardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimRewardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimRewardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimRewardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimRewardResponse.Merge(m, src)
}
func (m *MsgClaimRewardResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimRewardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimRewardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimRewardResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgAddEvidence)(nil), "layer.dispute.MsgAddEvidence")
	proto.RegisterType((*MsgAddEvidenceResponse)(nil), "layer.dispute.MsgAddEvidenceResponse")
	proto.RegisterType((*MsgWithdrawFeeRefund)(nil), "layer.dispute.MsgWithdrawFeeRefund")
	proto.RegisterType((*MsgWithdrawFeeRefundResponse)(nil), "layer.dispute.MsgWithdrawFeeRefundResponse")
	proto.RegisterType((*MsgExecuteDispute)(nil), "layer.dispute.MsgExecuteDispute")
	proto.RegisterType((*MsgExecuteDisputeResponse)(nil), "layer.dispute.MsgExecuteDisputeResponse")
	proto.RegisterType((*MsgTallyVote)(nil), "layer.dispute.MsgTallyVote")
	proto.RegisterType((*MsgTallyVoteResponse)(nil), "layer.dispute.MsgTallyVoteResponse")
	proto.RegisterType((*MsgProposeDispute)(nil), "layer.dispute.MsgProposeDispute")
	proto.RegisterType((*MsgProposeDisputeResponse)(nil), "layer.dispute.MsgProposeDisputeResponse")
	proto.RegisterType((*MsgAddFeeToDispute)(nil), "layer.dispute.MsgAddFeeToDispute")
	proto.RegisterType((*MsgAddFeeToDisputeResponse)(nil), "layer.dispute.MsgAddFeeToDisputeResponse")
	proto.RegisterType((*MsgVote)(nil), "layer.dispute.MsgVote")
	proto.RegisterType((*MsgVoteResponse)(nil), "layer.dispute.MsgVoteResponse")
	proto.RegisterType((*MsgUpdateTeam)(nil), "layer.dispute.MsgUpdateTeam")
	proto.RegisterType((*MsgUpdateTeamResponse)(nil), "layer.dispute.MsgUpdateTeamResponse")
	proto.RegisterType((*MsgClaimReward)(nil), "layer.dispute.MsgClaimReward")
	proto.RegisterType((*MsgClaimRewardResponse)(nil), "layer.dispute.MsgClaimRewardResponse")
}

func init() { proto.RegisterFile("layer/dispute/tx.proto", fileDescriptor_3a591d7bef5d6e8a) }

var fileDescriptor_3a591d7bef5d6e8a = []byte{
	// 918 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x4f, 0x4f, 0xdc, 0x46,
	0x14, 0xc7, 0xbb, 0x0b, 0x94, 0x07, 0x2c, 0xc1, 0xa5, 0x60, 0x0c, 0x71, 0xb6, 0x9b, 0x46, 0xda,
	0x12, 0xd5, 0xee, 0x92, 0x43, 0x25, 0x0e, 0x95, 0x02, 0x01, 0x29, 0x07, 0x4b, 0x91, 0x4b, 0x5b,
	0xa9, 0x8a, 0xb4, 0xf2, 0xda, 0x83, 0xb1, 0x6a, 0x7b, 0xac, 0x19, 0x2f, 0xb0, 0xb7, 0xaa, 0x87,
	0xf6, 0x9a, 0x7b, 0x2f, 0xfd, 0x08, 0x39, 0xf6, 0x23, 0xe4, 0x98, 0x63, 0x4f, 0x55, 0x05, 0x87,
	0x7c, 0x8d, 0xca, 0x33, 0xe3, 0x61, 0xbd, 0xb6, 0x58, 0x0e, 0xcd, 0x69, 0xd7, 0xef, 0xfd, 0xfc,
	0x7e, 0xbf, 0xf7, 0x6f, 0x3c, 0xb0, 0x19, 0xb9, 0x63, 0x44, 0x2c, 0x3f, 0xa4, 0xe9, 0x28, 0x43,
	0x56, 0x76, 0x65, 0xa6, 0x04, 0x67, 0x58, 0x5d, 0x65, 0x76, 0x53, 0xd8, 0x75, 0xc3, 0xc3, 0x34,
	0xc6, 0xd4, 0x1a, 0xba, 0x14, 0x59, 0x17, 0xfd, 0x21, 0xca, 0xdc, 0xbe, 0xe5, 0xe1, 0x30, 0xe1,
	0x70, 0x7d, 0x4b, 0xf8, 0x63, 0x1a, 0x58, 0x17, 0xfd, 0xfc, 0x47, 0x38, 0x36, 0x02, 0x1c, 0x60,
	0xf6, 0xd7, 0xca, 0xff, 0x09, 0xeb, 0x4e, 0x99, 0x55, 0xfc, 0x0a, 0xa7, 0x56, 0x76, 0x5e, 0x60,
	0xe9, 0x79, 0xc4, 0x3d, 0x98, 0xb8, 0x5e, 0x84, 0xac, 0x38, 0xf4, 0x08, 0x1e, 0x10, 0x94, 0x62,
	0x92, 0x71, 0x40, 0xf7, 0x4f, 0x05, 0xda, 0x36, 0x0d, 0x9e, 0xfb, 0xfe, 0xf1, 0x45, 0xe8, 0xa3,
	0xc4, 0x43, 0xea, 0x13, 0x68, 0x7b, 0x6e, 0x14, 0x21, 0x32, 0x70, 0x7d, 0x9f, 0x20, 0x4a, 0x35,
	0xa5, 0xa3, 0xf4, 0x96, 0x9c, 0x55, 0x6e, 0x7d, 0xce, 0x8d, 0xea, 0x43, 0x00, 0x41, 0x38, 0x08,
	0x7d, 0xad, 0xd1, 0x51, 0x7a, 0x2d, 0x67, 0x49, 0x58, 0x5e, 0xfa, 0xea, 0x33, 0x58, 0xe4, 0x44,
	0x54, 0x6b, 0x76, 0x9a, 0xbd, 0xe5, 0xfd, 0x6d, 0x93, 0x17, 0x88, 0x6b, 0x31, 0xed, 0x5c, 0x8b,
	0xc3, 0x10, 0x4e, 0x81, 0x3c, 0xf8, 0xf4, 0xd7, 0x0f, 0x6f, 0xf7, 0xa6, 0xd8, 0xbb, 0x1a, 0x6c,
	0x96, 0x15, 0x3a, 0x88, 0xa6, 0x38, 0xa1, 0xa8, 0xfb, 0xbb, 0x02, 0x1b, 0x36, 0x0d, 0x7e, 0x0c,
	0xb3, 0x73, 0x9f, 0xb8, 0x97, 0x27, 0x08, 0x39, 0xe8, 0x6c, 0x94, 0xf8, 0xf7, 0x4d, 0xe1, 0x31,
	0xac, 0xa6, 0xb9, 0x26, 0x89, 0x6a, 0x30, 0xd4, 0x0a, 0x33, 0x16, 0xa0, 0x36, 0x34, 0x42, 0x5f,
	0x6b, 0xb2, 0xfc, 0x1a, 0xa1, 0x5f, 0xaf, 0xd1, 0x80, 0xdd, 0x3a, 0x21, 0x52, 0x69, 0x02, 0xeb,
	0x36, 0x0d, 0x8e, 0xaf, 0x90, 0x37, 0xca, 0xd0, 0x0b, 0x5e, 0xa4, 0xff, 0xa7, 0xd0, 0xf5, 0x7a,
	0x76, 0x60, 0xbb, 0xc2, 0x27, 0xc5, 0x84, 0xb0, 0x62, 0xd3, 0xe0, 0xd4, 0x8d, 0xa2, 0xf1, 0x0f,
	0xf8, 0xe3, 0xea, 0xd8, 0x64, 0x0d, 0x92, 0x54, 0x52, 0xc2, 0x9b, 0x06, 0x2b, 0xc8, 0x2b, 0x82,
	0x53, 0x4c, 0x65, 0x41, 0x34, 0x58, 0xf4, 0x08, 0x72, 0x33, 0x4c, 0x84, 0x82, 0xe2, 0x51, 0xed,
	0xc3, 0x02, 0x9f, 0x11, 0xc6, 0x7b, 0xe7, 0x30, 0x09, 0xa0, 0xfa, 0x12, 0x1e, 0x14, 0x72, 0x3d,
	0x37, 0x43, 0x01, 0x26, 0x63, 0xd6, 0xc5, 0xf6, 0xbe, 0x61, 0x96, 0x56, 0xd5, 0x14, 0xf4, 0x47,
	0x02, 0xe5, 0xac, 0xf9, 0x65, 0x83, 0xda, 0x87, 0xe6, 0x19, 0x42, 0x5a, 0x4b, 0x50, 0xf3, 0xcd,
	0x35, 0xf3, 0xcd, 0x36, 0xc5, 0x66, 0x9b, 0x47, 0x38, 0x4c, 0x0e, 0x5b, 0xef, 0xfe, 0x79, 0x34,
	0xe7, 0xe4, 0x58, 0xb5, 0xcb, 0x46, 0x6b, 0x70, 0x46, 0x70, 0x3c, 0x18, 0xe2, 0xc4, 0xd7, 0xe6,
	0x3b, 0x4a, 0xef, 0x13, 0x67, 0x39, 0x75, 0xc7, 0x27, 0x04, 0xc7, 0x87, 0x38, 0xf1, 0x0f, 0x56,
	0xf2, 0x8a, 0x15, 0x29, 0x8a, 0x96, 0x95, 0x2b, 0x22, 0xeb, 0xf5, 0x97, 0x02, 0x2a, 0x5f, 0x82,
	0x13, 0x84, 0x4e, 0xf1, 0xec, 0x82, 0xcd, 0xd8, 0xce, 0x6f, 0x60, 0xc1, 0x8d, 0xf1, 0x28, 0xc9,
	0x58, 0x49, 0xee, 0x91, 0x94, 0x80, 0x57, 0xf3, 0x6a, 0xcd, 0xca, 0x6b, 0x17, 0xf4, 0xaa, 0x72,
	0x99, 0xd8, 0x39, 0x2c, 0xda, 0x34, 0x60, 0x63, 0xb8, 0x01, 0xf3, 0xf9, 0xc9, 0x55, 0xa4, 0xc2,
	0x1f, 0xc4, 0xfa, 0x35, 0x8a, 0xf5, 0x53, 0x9f, 0x42, 0x2b, 0x77, 0x88, 0x56, 0x6e, 0x4d, 0xb5,
	0x32, 0x0f, 0x74, 0x9c, 0x8c, 0x62, 0x87, 0x81, 0x0e, 0x20, 0x57, 0xc2, 0x03, 0x75, 0xd7, 0x61,
	0x4d, 0x30, 0x49, 0xf2, 0xdf, 0x14, 0x58, 0xb5, 0x69, 0xf0, 0x7d, 0xea, 0xbb, 0x19, 0x3a, 0x45,
	0x6e, 0xac, 0x7e, 0x0d, 0x1b, 0xde, 0x88, 0x10, 0x94, 0x64, 0x83, 0x0c, 0xb9, 0xf1, 0xd4, 0x42,
	0xa8, 0xc2, 0x97, 0x43, 0x8b, 0xad, 0xe8, 0xc1, 0x83, 0x04, 0x5d, 0x96, 0xd1, 0xfc, 0x18, 0x69,
	0x27, 0xe8, 0x72, 0x02, 0x79, 0xb0, 0x9d, 0x8b, 0xa9, 0x0d, 0xdf, 0xdd, 0x82, 0xcf, 0x4a, 0x3a,
	0xa4, 0xc2, 0x9f, 0xd9, 0xe9, 0x7c, 0x14, 0xb9, 0x61, 0xec, 0xa0, 0x4b, 0x97, 0xf8, 0x1f, 0x73,
	0x59, 0xf9, 0x41, 0x3b, 0x41, 0x56, 0xc8, 0xd8, 0xff, 0x63, 0x01, 0x9a, 0x36, 0x0d, 0xd4, 0xd7,
	0xd0, 0x9e, 0x5a, 0xd9, 0xce, 0x54, 0x03, 0x2a, 0x23, 0xac, 0xf7, 0x66, 0x21, 0x0a, 0x16, 0x75,
	0x00, 0x6b, 0xd3, 0x03, 0xfe, 0x79, 0xf5, 0xe5, 0x29, 0x88, 0xfe, 0xe5, 0x4c, 0x88, 0x24, 0xf8,
	0x16, 0x5a, 0x6c, 0xd2, 0x36, 0xab, 0xaf, 0xe4, 0x76, 0xdd, 0xa8, 0xb7, 0xcb, 0xf7, 0x5f, 0x01,
	0x4c, 0xcc, 0xca, 0x6e, 0x15, 0x7d, 0xeb, 0xd5, 0xbf, 0xb8, 0xcb, 0x2b, 0x23, 0xda, 0xb0, 0x74,
	0x7b, 0x0e, 0xef, 0x54, 0x5f, 0x91, 0x4e, 0xfd, 0xf1, 0x1d, 0x4e, 0x19, 0xee, 0x35, 0xb4, 0xa7,
	0xbe, 0x31, 0x35, 0xfd, 0x29, 0x23, 0xea, 0xfa, 0x53, 0xff, 0xdd, 0x50, 0x11, 0xac, 0x57, 0x3f,
	0xb5, 0x35, 0xba, 0x2a, 0x20, 0xfd, 0xe9, 0x3d, 0x40, 0x92, 0xe6, 0x3b, 0x58, 0x9e, 0xbc, 0x8e,
	0x3c, 0xac, 0xed, 0x6f, 0xe1, 0xd6, 0x9f, 0xdc, 0xe9, 0x9e, 0x0c, 0x3a, 0xb9, 0x45, 0x35, 0x41,
	0x27, 0xdc, 0x75, 0x41, 0x6b, 0xd6, 0x42, 0x9f, 0xff, 0xe5, 0xc3, 0xdb, 0x3d, 0xe5, 0xf0, 0xc5,
	0xbb, 0x6b, 0x43, 0x79, 0x7f, 0x6d, 0x28, 0xff, 0x5e, 0x1b, 0xca, 0x9b, 0x1b, 0x63, 0xee, 0xfd,
	0x8d, 0x31, 0xf7, 0xf7, 0x8d, 0x31, 0xf7, 0xd3, 0x5e, 0x10, 0x66, 0xe7, 0xa3, 0xa1, 0xe9, 0xe1,
	0xd8, 0xca, 0x50, 0x14, 0x61, 0xf2, 0x55, 0x88, 0x2d, 0x7e, 0x27, 0xbb, 0xba, 0xbd, 0x42, 0x8e,
	0x53, 0x44, 0x87, 0x0b, 0xec, 0x42, 0xf6, 0xec, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4d, 0x5a,
	0x84, 0xbc, 0x60, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	ProposeDispute(ctx context.Context, in *MsgProposeDispute, opts ...grpc.CallOption) (*MsgProposeDisputeResponse, error)
	AddFeeToDispute(ctx context.Context, in *MsgAddFeeToDispute, opts ...grpc.CallOption) (*MsgAddFeeToDisputeResponse, error)
	Vote(ctx context.Context, in *MsgVote, opts ...grpc.CallOption) (*MsgVoteResponse, error)
	UpdateTeam(ctx context.Context, in *MsgUpdateTeam, opts ...grpc.CallOption) (*MsgUpdateTeamResponse, error)
	TallyVote(ctx context.Context, in *MsgTallyVote, opts ...grpc.CallOption) (*MsgTallyVoteResponse, error)
	ExecuteDispute(ctx context.Context, in *MsgExecuteDispute, opts ...grpc.CallOption) (*MsgExecuteDisputeResponse, error)
	WithdrawFeeRefund(ctx context.Context, in *MsgWithdrawFeeRefund, opts ...grpc.CallOption) (*MsgWithdrawFeeRefundResponse, error)
	AddEvidence(ctx context.Context, in *MsgAddEvidence, opts ...grpc.CallOption) (*MsgAddEvidenceResponse, error)
	ClaimReward(ctx context.Context, in *MsgClaimReward, opts ...grpc.CallOption) (*MsgClaimRewardResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) ProposeDispute(ctx context.Context, in *MsgProposeDispute, opts ...grpc.CallOption) (*MsgProposeDisputeResponse, error) {
	out := new(MsgProposeDisputeResponse)
	err := c.cc.Invoke(ctx, "/layer.dispute.Msg/ProposeDispute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddFeeToDispute(ctx context.Context, in *MsgAddFeeToDispute, opts ...grpc.CallOption) (*MsgAddFeeToDisputeResponse, error) {
	out := new(MsgAddFeeToDisputeResponse)
	err := c.cc.Invoke(ctx, "/layer.dispute.Msg/AddFeeToDispute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Vote(ctx context.Context, in *MsgVote, opts ...grpc.CallOption) (*MsgVoteResponse, error) {
	out := new(MsgVoteResponse)
	err := c.cc.Invoke(ctx, "/layer.dispute.Msg/Vote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateTeam(ctx context.Context, in *MsgUpdateTeam, opts ...grpc.CallOption) (*MsgUpdateTeamResponse, error) {
	out := new(MsgUpdateTeamResponse)
	err := c.cc.Invoke(ctx, "/layer.dispute.Msg/UpdateTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TallyVote(ctx context.Context, in *MsgTallyVote, opts ...grpc.CallOption) (*MsgTallyVoteResponse, error) {
	out := new(MsgTallyVoteResponse)
	err := c.cc.Invoke(ctx, "/layer.dispute.Msg/TallyVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ExecuteDispute(ctx context.Context, in *MsgExecuteDispute, opts ...grpc.CallOption) (*MsgExecuteDisputeResponse, error) {
	out := new(MsgExecuteDisputeResponse)
	err := c.cc.Invoke(ctx, "/layer.dispute.Msg/ExecuteDispute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) WithdrawFeeRefund(ctx context.Context, in *MsgWithdrawFeeRefund, opts ...grpc.CallOption) (*MsgWithdrawFeeRefundResponse, error) {
	out := new(MsgWithdrawFeeRefundResponse)
	err := c.cc.Invoke(ctx, "/layer.dispute.Msg/WithdrawFeeRefund", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddEvidence(ctx context.Context, in *MsgAddEvidence, opts ...grpc.CallOption) (*MsgAddEvidenceResponse, error) {
	out := new(MsgAddEvidenceResponse)
	err := c.cc.Invoke(ctx, "/layer.dispute.Msg/AddEvidence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ClaimReward(ctx context.Context, in *MsgClaimReward, opts ...grpc.CallOption) (*MsgClaimRewardResponse, error) {
	out := new(MsgClaimRewardResponse)
	err := c.cc.Invoke(ctx, "/layer.dispute.Msg/ClaimReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	ProposeDispute(context.Context, *MsgProposeDispute) (*MsgProposeDisputeResponse, error)
	AddFeeToDispute(context.Context, *MsgAddFeeToDispute) (*MsgAddFeeToDisputeResponse, error)
	Vote(context.Context, *MsgVote) (*MsgVoteResponse, error)
	UpdateTeam(context.Context, *MsgUpdateTeam) (*MsgUpdateTeamResponse, error)
	TallyVote(context.Context, *MsgTallyVote) (*MsgTallyVoteResponse, error)
	ExecuteDispute(context.Context, *MsgExecuteDispute) (*MsgExecuteDisputeResponse, error)
	WithdrawFeeRefund(context.Context, *MsgWithdrawFeeRefund) (*MsgWithdrawFeeRefundResponse, error)
	AddEvidence(context.Context, *MsgAddEvidence) (*MsgAddEvidenceResponse, error)
	ClaimReward(context.Context, *MsgClaimReward) (*MsgClaimRewardResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) ProposeDispute(ctx context.Context, req *MsgProposeDispute) (*MsgProposeDisputeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposeDispute not implemented")
}
func (*UnimplementedMsgServer) AddFeeToDispute(ctx context.Context, req *MsgAddFeeToDispute) (*MsgAddFeeToDisputeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFeeToDispute not implemented")
}
func (*UnimplementedMsgServer) Vote(ctx context.Context, req *MsgVote) (*MsgVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vote not implemented")
}
func (*UnimplementedMsgServer) UpdateTeam(ctx context.Context, req *MsgUpdateTeam) (*MsgUpdateTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTeam not implemented")
}
func (*UnimplementedMsgServer) TallyVote(ctx context.Context, req *MsgTallyVote) (*MsgTallyVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TallyVote not implemented")
}
func (*UnimplementedMsgServer) ExecuteDispute(ctx context.Context, req *MsgExecuteDispute) (*MsgExecuteDisputeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteDispute not implemented")
}
func (*UnimplementedMsgServer) WithdrawFeeRefund(ctx context.Context, req *MsgWithdrawFeeRefund) (*MsgWithdrawFeeRefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawFeeRefund not implemented")
}
func (*UnimplementedMsgServer) AddEvidence(ctx context.Context, req *MsgAddEvidence) (*MsgAddEvidenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEvidence not implemented")
}
func (*UnimplementedMsgServer) ClaimReward(ctx context.Context, req *MsgClaimReward) (*MsgClaimRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimReward not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_ProposeDispute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgProposeDispute)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ProposeDispute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.dispute.Msg/ProposeDispute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ProposeDispute(ctx, req.(*MsgProposeDispute))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddFeeToDispute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddFeeToDispute)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddFeeToDispute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.dispute.Msg/AddFeeToDispute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddFeeToDispute(ctx, req.(*MsgAddFeeToDispute))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Vote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgVote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Vote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.dispute.Msg/Vote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Vote(ctx, req.(*MsgVote))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateTeam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.dispute.Msg/UpdateTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateTeam(ctx, req.(*MsgUpdateTeam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TallyVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTallyVote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TallyVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.dispute.Msg/TallyVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TallyVote(ctx, req.(*MsgTallyVote))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ExecuteDispute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgExecuteDispute)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ExecuteDispute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.dispute.Msg/ExecuteDispute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ExecuteDispute(ctx, req.(*MsgExecuteDispute))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_WithdrawFeeRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdrawFeeRefund)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WithdrawFeeRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.dispute.Msg/WithdrawFeeRefund",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WithdrawFeeRefund(ctx, req.(*MsgWithdrawFeeRefund))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddEvidence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddEvidence)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddEvidence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.dispute.Msg/AddEvidence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddEvidence(ctx, req.(*MsgAddEvidence))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ClaimReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClaimReward)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClaimReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.dispute.Msg/ClaimReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClaimReward(ctx, req.(*MsgClaimReward))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "layer.dispute.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProposeDispute",
			Handler:    _Msg_ProposeDispute_Handler,
		},
		{
			MethodName: "AddFeeToDispute",
			Handler:    _Msg_AddFeeToDispute_Handler,
		},
		{
			MethodName: "Vote",
			Handler:    _Msg_Vote_Handler,
		},
		{
			MethodName: "UpdateTeam",
			Handler:    _Msg_UpdateTeam_Handler,
		},
		{
			MethodName: "TallyVote",
			Handler:    _Msg_TallyVote_Handler,
		},
		{
			MethodName: "ExecuteDispute",
			Handler:    _Msg_ExecuteDispute_Handler,
		},
		{
			MethodName: "WithdrawFeeRefund",
			Handler:    _Msg_WithdrawFeeRefund_Handler,
		},
		{
			MethodName: "AddEvidence",
			Handler:    _Msg_AddEvidence_Handler,
		},
		{
			MethodName: "ClaimReward",
			Handler:    _Msg_ClaimReward_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "layer/dispute/tx.proto",
}

func (m *MsgAddEvidence) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddEvidence) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddEvidence) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reports) > 0 {
		for iNdEx := len(m.Reports) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reports[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.DisputeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DisputeId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.CallerAddress) > 0 {
		i -= len(m.CallerAddress)
		copy(dAtA[i:], m.CallerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CallerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddEvidenceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddEvidenceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddEvidenceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawFeeRefund) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawFeeRefund) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawFeeRefund) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x18
	}
	if len(m.PayerAddress) > 0 {
		i -= len(m.PayerAddress)
		copy(dAtA[i:], m.PayerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PayerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CallerAddress) > 0 {
		i -= len(m.CallerAddress)
		copy(dAtA[i:], m.CallerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CallerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawFeeRefundResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawFeeRefundResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawFeeRefundResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgExecuteDispute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExecuteDispute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExecuteDispute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DisputeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DisputeId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.CallerAddress) > 0 {
		i -= len(m.CallerAddress)
		copy(dAtA[i:], m.CallerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CallerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgExecuteDisputeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExecuteDisputeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExecuteDisputeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgTallyVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTallyVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTallyVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DisputeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DisputeId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.CallerAddress) > 0 {
		i -= len(m.CallerAddress)
		copy(dAtA[i:], m.CallerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CallerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTallyVoteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTallyVoteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTallyVoteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgProposeDispute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProposeDispute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProposeDispute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PayFromBond {
		i--
		if m.PayFromBond {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	{
		size, err := m.Fee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.DisputeCategory != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DisputeCategory))
		i--
		dAtA[i] = 0x18
	}
	if m.Report != nil {
		{
			size, err := m.Report.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgProposeDisputeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProposeDisputeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProposeDisputeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddFeeToDispute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddFeeToDispute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddFeeToDispute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PayFromBond {
		i--
		if m.PayFromBond {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.DisputeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DisputeId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddFeeToDisputeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddFeeToDisputeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddFeeToDisputeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Vote != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Vote))
		i--
		dAtA[i] = 0x18
	}
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Voter) > 0 {
		i -= len(m.Voter)
		copy(dAtA[i:], m.Voter)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Voter)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgVoteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVoteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVoteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateTeam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateTeam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateTeam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewTeamAddress) > 0 {
		i -= len(m.NewTeamAddress)
		copy(dAtA[i:], m.NewTeamAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewTeamAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CurrentTeamAddress) > 0 {
		i -= len(m.CurrentTeamAddress)
		copy(dAtA[i:], m.CurrentTeamAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CurrentTeamAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateTeamResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateTeamResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateTeamResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgClaimReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DisputeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DisputeId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.CallerAddress) > 0 {
		i -= len(m.CallerAddress)
		copy(dAtA[i:], m.CallerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CallerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClaimRewardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimRewardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimRewardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgAddEvidence) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CallerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.DisputeId != 0 {
		n += 1 + sovTx(uint64(m.DisputeId))
	}
	if len(m.Reports) > 0 {
		for _, e := range m.Reports {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgAddEvidenceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgWithdrawFeeRefund) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CallerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PayerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgWithdrawFeeRefundResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgExecuteDispute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CallerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.DisputeId != 0 {
		n += 1 + sovTx(uint64(m.DisputeId))
	}
	return n
}

func (m *MsgExecuteDisputeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgTallyVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CallerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.DisputeId != 0 {
		n += 1 + sovTx(uint64(m.DisputeId))
	}
	return n
}

func (m *MsgTallyVoteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgProposeDispute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Report != nil {
		l = m.Report.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.DisputeCategory != 0 {
		n += 1 + sovTx(uint64(m.DisputeCategory))
	}
	l = m.Fee.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.PayFromBond {
		n += 2
	}
	return n
}

func (m *MsgProposeDisputeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddFeeToDispute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.DisputeId != 0 {
		n += 1 + sovTx(uint64(m.DisputeId))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.PayFromBond {
		n += 2
	}
	return n
}

func (m *MsgAddFeeToDisputeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Voter)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	if m.Vote != 0 {
		n += 1 + sovTx(uint64(m.Vote))
	}
	return n
}

func (m *MsgVoteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateTeam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CurrentTeamAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewTeamAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateTeamResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgClaimReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CallerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.DisputeId != 0 {
		n += 1 + sovTx(uint64(m.DisputeId))
	}
	return n
}

func (m *MsgClaimRewardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgAddEvidence) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddEvidence: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddEvidence: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeId", wireType)
			}
			m.DisputeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisputeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reports", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reports = append(m.Reports, &types.MicroReport{})
			if err := m.Reports[len(m.Reports)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddEvidenceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddEvidenceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddEvidenceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawFeeRefund) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawFeeRefund: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawFeeRefund: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PayerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawFeeRefundResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawFeeRefundResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawFeeRefundResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExecuteDispute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExecuteDispute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExecuteDispute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeId", wireType)
			}
			m.DisputeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisputeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExecuteDisputeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExecuteDisputeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExecuteDisputeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTallyVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTallyVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTallyVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeId", wireType)
			}
			m.DisputeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisputeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTallyVoteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTallyVoteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTallyVoteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgProposeDispute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProposeDispute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProposeDispute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Report", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Report == nil {
				m.Report = &types.MicroReport{}
			}
			if err := m.Report.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeCategory", wireType)
			}
			m.DisputeCategory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisputeCategory |= DisputeCategory(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Fee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayFromBond", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PayFromBond = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgProposeDisputeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProposeDisputeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProposeDisputeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddFeeToDispute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddFeeToDispute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddFeeToDispute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeId", wireType)
			}
			m.DisputeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisputeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayFromBond", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PayFromBond = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddFeeToDisputeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddFeeToDisputeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddFeeToDisputeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Voter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			m.Vote = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vote |= VoteEnum(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVoteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVoteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVoteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateTeam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateTeam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateTeam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentTeamAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentTeamAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewTeamAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewTeamAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateTeamResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateTeamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateTeamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeId", wireType)
			}
			m.DisputeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisputeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimRewardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimRewardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimRewardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
