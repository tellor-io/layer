// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: layer/dispute/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_972b8e1a74396a43, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_972b8e1a74396a43, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryDisputesRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDisputesRequest) Reset()         { *m = QueryDisputesRequest{} }
func (m *QueryDisputesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDisputesRequest) ProtoMessage()    {}
func (*QueryDisputesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_972b8e1a74396a43, []int{2}
}
func (m *QueryDisputesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDisputesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDisputesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDisputesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDisputesRequest.Merge(m, src)
}
func (m *QueryDisputesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDisputesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDisputesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDisputesRequest proto.InternalMessageInfo

func (m *QueryDisputesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type Disputes struct {
	DisputeId uint64   `protobuf:"varint,1,opt,name=disputeId,proto3" json:"disputeId,omitempty"`
	Metadata  *Dispute `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *Disputes) Reset()         { *m = Disputes{} }
func (m *Disputes) String() string { return proto.CompactTextString(m) }
func (*Disputes) ProtoMessage()    {}
func (*Disputes) Descriptor() ([]byte, []int) {
	return fileDescriptor_972b8e1a74396a43, []int{3}
}
func (m *Disputes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Disputes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Disputes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Disputes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Disputes.Merge(m, src)
}
func (m *Disputes) XXX_Size() int {
	return m.Size()
}
func (m *Disputes) XXX_DiscardUnknown() {
	xxx_messageInfo_Disputes.DiscardUnknown(m)
}

var xxx_messageInfo_Disputes proto.InternalMessageInfo

func (m *Disputes) GetDisputeId() uint64 {
	if m != nil {
		return m.DisputeId
	}
	return 0
}

func (m *Disputes) GetMetadata() *Dispute {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type QueryDisputesResponse struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageResponse `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Disputes   []*Disputes         `protobuf:"bytes,2,rep,name=disputes,proto3" json:"disputes,omitempty"`
}

func (m *QueryDisputesResponse) Reset()         { *m = QueryDisputesResponse{} }
func (m *QueryDisputesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDisputesResponse) ProtoMessage()    {}
func (*QueryDisputesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_972b8e1a74396a43, []int{4}
}
func (m *QueryDisputesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDisputesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDisputesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDisputesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDisputesResponse.Merge(m, src)
}
func (m *QueryDisputesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDisputesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDisputesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDisputesResponse proto.InternalMessageInfo

func (m *QueryDisputesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryDisputesResponse) GetDisputes() []*Disputes {
	if m != nil {
		return m.Disputes
	}
	return nil
}

type QueryOpenDisputesRequest struct {
}

func (m *QueryOpenDisputesRequest) Reset()         { *m = QueryOpenDisputesRequest{} }
func (m *QueryOpenDisputesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOpenDisputesRequest) ProtoMessage()    {}
func (*QueryOpenDisputesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_972b8e1a74396a43, []int{5}
}
func (m *QueryOpenDisputesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOpenDisputesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOpenDisputesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOpenDisputesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOpenDisputesRequest.Merge(m, src)
}
func (m *QueryOpenDisputesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOpenDisputesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOpenDisputesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOpenDisputesRequest proto.InternalMessageInfo

type QueryOpenDisputesResponse struct {
	OpenDisputes *OpenDisputes `protobuf:"bytes,1,opt,name=openDisputes,proto3" json:"openDisputes,omitempty"`
}

func (m *QueryOpenDisputesResponse) Reset()         { *m = QueryOpenDisputesResponse{} }
func (m *QueryOpenDisputesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOpenDisputesResponse) ProtoMessage()    {}
func (*QueryOpenDisputesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_972b8e1a74396a43, []int{6}
}
func (m *QueryOpenDisputesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOpenDisputesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOpenDisputesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOpenDisputesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOpenDisputesResponse.Merge(m, src)
}
func (m *QueryOpenDisputesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOpenDisputesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOpenDisputesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOpenDisputesResponse proto.InternalMessageInfo

func (m *QueryOpenDisputesResponse) GetOpenDisputes() *OpenDisputes {
	if m != nil {
		return m.OpenDisputes
	}
	return nil
}

// QueryTeamVoteRequest is request type for the Query/TeamVote RPC method.
type QueryTeamVoteRequest struct {
	// disputeId defines the dispute id.
	DisputeId uint64 `protobuf:"varint,1,opt,name=dispute_id,json=disputeId,proto3" json:"dispute_id,omitempty"`
}

func (m *QueryTeamVoteRequest) Reset()         { *m = QueryTeamVoteRequest{} }
func (m *QueryTeamVoteRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTeamVoteRequest) ProtoMessage()    {}
func (*QueryTeamVoteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_972b8e1a74396a43, []int{7}
}
func (m *QueryTeamVoteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTeamVoteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTeamVoteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTeamVoteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTeamVoteRequest.Merge(m, src)
}
func (m *QueryTeamVoteRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTeamVoteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTeamVoteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTeamVoteRequest proto.InternalMessageInfo

func (m *QueryTeamVoteRequest) GetDisputeId() uint64 {
	if m != nil {
		return m.DisputeId
	}
	return 0
}

// QueryTeamVoteResponse is response type for the Query/TeamVote RPC method.
type QueryTeamVoteResponse struct {
	// teamVote holds the team voter info for a dispute.
	TeamVote Voter `protobuf:"bytes,1,opt,name=team_vote,json=teamVote,proto3" json:"team_vote"`
}

func (m *QueryTeamVoteResponse) Reset()         { *m = QueryTeamVoteResponse{} }
func (m *QueryTeamVoteResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTeamVoteResponse) ProtoMessage()    {}
func (*QueryTeamVoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_972b8e1a74396a43, []int{8}
}
func (m *QueryTeamVoteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTeamVoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTeamVoteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTeamVoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTeamVoteResponse.Merge(m, src)
}
func (m *QueryTeamVoteResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTeamVoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTeamVoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTeamVoteResponse proto.InternalMessageInfo

func (m *QueryTeamVoteResponse) GetTeamVote() Voter {
	if m != nil {
		return m.TeamVote
	}
	return Voter{}
}

// QueryTeamAddressRequest is request type for the Query/TeamAddress RPC method.
type QueryTeamAddressRequest struct {
}

func (m *QueryTeamAddressRequest) Reset()         { *m = QueryTeamAddressRequest{} }
func (m *QueryTeamAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTeamAddressRequest) ProtoMessage()    {}
func (*QueryTeamAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_972b8e1a74396a43, []int{9}
}
func (m *QueryTeamAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTeamAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTeamAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTeamAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTeamAddressRequest.Merge(m, src)
}
func (m *QueryTeamAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTeamAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTeamAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTeamAddressRequest proto.InternalMessageInfo

// QueryTeamAddressResponse is response type for the Query/TeamAddress RPC method.
type QueryTeamAddressResponse struct {
	// teamAddress holds the team address.
	TeamAddress string `protobuf:"bytes,1,opt,name=team_address,json=teamAddress,proto3" json:"team_address,omitempty"`
}

func (m *QueryTeamAddressResponse) Reset()         { *m = QueryTeamAddressResponse{} }
func (m *QueryTeamAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTeamAddressResponse) ProtoMessage()    {}
func (*QueryTeamAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_972b8e1a74396a43, []int{10}
}
func (m *QueryTeamAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTeamAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTeamAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTeamAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTeamAddressResponse.Merge(m, src)
}
func (m *QueryTeamAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTeamAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTeamAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTeamAddressResponse proto.InternalMessageInfo

func (m *QueryTeamAddressResponse) GetTeamAddress() string {
	if m != nil {
		return m.TeamAddress
	}
	return ""
}

// Request the current vote count for a dispute
type QueryDisputesTallyRequest struct {
	DisputeId uint64 `protobuf:"varint,1,opt,name=dispute_id,json=disputeId,proto3" json:"dispute_id,omitempty"`
}

func (m *QueryDisputesTallyRequest) Reset()         { *m = QueryDisputesTallyRequest{} }
func (m *QueryDisputesTallyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDisputesTallyRequest) ProtoMessage()    {}
func (*QueryDisputesTallyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_972b8e1a74396a43, []int{11}
}
func (m *QueryDisputesTallyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDisputesTallyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDisputesTallyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDisputesTallyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDisputesTallyRequest.Merge(m, src)
}
func (m *QueryDisputesTallyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDisputesTallyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDisputesTallyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDisputesTallyRequest proto.InternalMessageInfo

func (m *QueryDisputesTallyRequest) GetDisputeId() uint64 {
	if m != nil {
		return m.DisputeId
	}
	return 0
}

type QueryDisputesTallyResponse struct {
	Users         *GroupTally          `protobuf:"bytes,1,opt,name=users,proto3" json:"users,omitempty"`
	Reporters     *GroupTally          `protobuf:"bytes,2,opt,name=reporters,proto3" json:"reporters,omitempty"`
	Team          *FormattedVoteCounts `protobuf:"bytes,3,opt,name=team,proto3" json:"team,omitempty"`
	CombinedTotal *CombinedTotal       `protobuf:"bytes,4,opt,name=combinedTotal,proto3" json:"combinedTotal,omitempty"`
}

func (m *QueryDisputesTallyResponse) Reset()         { *m = QueryDisputesTallyResponse{} }
func (m *QueryDisputesTallyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDisputesTallyResponse) ProtoMessage()    {}
func (*QueryDisputesTallyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_972b8e1a74396a43, []int{12}
}
func (m *QueryDisputesTallyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDisputesTallyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDisputesTallyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDisputesTallyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDisputesTallyResponse.Merge(m, src)
}
func (m *QueryDisputesTallyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDisputesTallyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDisputesTallyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDisputesTallyResponse proto.InternalMessageInfo

func (m *QueryDisputesTallyResponse) GetUsers() *GroupTally {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *QueryDisputesTallyResponse) GetReporters() *GroupTally {
	if m != nil {
		return m.Reporters
	}
	return nil
}

func (m *QueryDisputesTallyResponse) GetTeam() *FormattedVoteCounts {
	if m != nil {
		return m.Team
	}
	return nil
}

func (m *QueryDisputesTallyResponse) GetCombinedTotal() *CombinedTotal {
	if m != nil {
		return m.CombinedTotal
	}
	return nil
}

type QueryDisputeVoteResultRequest struct {
	DisputeId uint64 `protobuf:"varint,1,opt,name=dispute_id,json=disputeId,proto3" json:"dispute_id,omitempty"`
}

func (m *QueryDisputeVoteResultRequest) Reset()         { *m = QueryDisputeVoteResultRequest{} }
func (m *QueryDisputeVoteResultRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDisputeVoteResultRequest) ProtoMessage()    {}
func (*QueryDisputeVoteResultRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_972b8e1a74396a43, []int{13}
}
func (m *QueryDisputeVoteResultRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDisputeVoteResultRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDisputeVoteResultRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDisputeVoteResultRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDisputeVoteResultRequest.Merge(m, src)
}
func (m *QueryDisputeVoteResultRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDisputeVoteResultRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDisputeVoteResultRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDisputeVoteResultRequest proto.InternalMessageInfo

func (m *QueryDisputeVoteResultRequest) GetDisputeId() uint64 {
	if m != nil {
		return m.DisputeId
	}
	return 0
}

type QueryDisputeVoteResultResponse struct {
	VoteResult VoteResult `protobuf:"varint,1,opt,name=vote_result,json=voteResult,proto3,enum=layer.dispute.VoteResult" json:"vote_result,omitempty"`
}

func (m *QueryDisputeVoteResultResponse) Reset()         { *m = QueryDisputeVoteResultResponse{} }
func (m *QueryDisputeVoteResultResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDisputeVoteResultResponse) ProtoMessage()    {}
func (*QueryDisputeVoteResultResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_972b8e1a74396a43, []int{14}
}
func (m *QueryDisputeVoteResultResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDisputeVoteResultResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDisputeVoteResultResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDisputeVoteResultResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDisputeVoteResultResponse.Merge(m, src)
}
func (m *QueryDisputeVoteResultResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDisputeVoteResultResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDisputeVoteResultResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDisputeVoteResultResponse proto.InternalMessageInfo

func (m *QueryDisputeVoteResultResponse) GetVoteResult() VoteResult {
	if m != nil {
		return m.VoteResult
	}
	return VoteResult_NO_TALLY
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "layer.dispute.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "layer.dispute.QueryParamsResponse")
	proto.RegisterType((*QueryDisputesRequest)(nil), "layer.dispute.QueryDisputesRequest")
	proto.RegisterType((*Disputes)(nil), "layer.dispute.Disputes")
	proto.RegisterType((*QueryDisputesResponse)(nil), "layer.dispute.QueryDisputesResponse")
	proto.RegisterType((*QueryOpenDisputesRequest)(nil), "layer.dispute.QueryOpenDisputesRequest")
	proto.RegisterType((*QueryOpenDisputesResponse)(nil), "layer.dispute.QueryOpenDisputesResponse")
	proto.RegisterType((*QueryTeamVoteRequest)(nil), "layer.dispute.QueryTeamVoteRequest")
	proto.RegisterType((*QueryTeamVoteResponse)(nil), "layer.dispute.QueryTeamVoteResponse")
	proto.RegisterType((*QueryTeamAddressRequest)(nil), "layer.dispute.QueryTeamAddressRequest")
	proto.RegisterType((*QueryTeamAddressResponse)(nil), "layer.dispute.QueryTeamAddressResponse")
	proto.RegisterType((*QueryDisputesTallyRequest)(nil), "layer.dispute.QueryDisputesTallyRequest")
	proto.RegisterType((*QueryDisputesTallyResponse)(nil), "layer.dispute.QueryDisputesTallyResponse")
	proto.RegisterType((*QueryDisputeVoteResultRequest)(nil), "layer.dispute.QueryDisputeVoteResultRequest")
	proto.RegisterType((*QueryDisputeVoteResultResponse)(nil), "layer.dispute.QueryDisputeVoteResultResponse")
}

func init() { proto.RegisterFile("layer/dispute/query.proto", fileDescriptor_972b8e1a74396a43) }

var fileDescriptor_972b8e1a74396a43 = []byte{
	// 908 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0x5d, 0x6f, 0x1b, 0x45,
	0x14, 0xcd, 0xba, 0x49, 0x70, 0xae, 0x53, 0x1e, 0x86, 0x94, 0x3a, 0xdb, 0xd4, 0xad, 0xa7, 0x10,
	0xbb, 0x05, 0xef, 0x2a, 0xb1, 0xa0, 0xa2, 0x12, 0x20, 0xd2, 0xaa, 0x15, 0xbc, 0x10, 0x56, 0x11,
	0x0f, 0x28, 0x22, 0x1a, 0xc7, 0x23, 0xb3, 0xd2, 0xee, 0xce, 0x76, 0x77, 0x36, 0x6a, 0x84, 0x90,
	0x50, 0xdf, 0x41, 0x20, 0xc4, 0x3f, 0xe0, 0xc7, 0xf4, 0xb1, 0x12, 0x2f, 0x3c, 0x21, 0x94, 0xf0,
	0x13, 0xf8, 0x01, 0x68, 0x66, 0xef, 0x7a, 0x3f, 0xbc, 0x76, 0xfc, 0x94, 0xcd, 0xcc, 0x39, 0xf7,
	0x9e, 0x7b, 0x66, 0xe6, 0xc8, 0xb0, 0xed, 0xb1, 0x73, 0x1e, 0xd9, 0x63, 0x37, 0x0e, 0x13, 0xc9,
	0xed, 0xe7, 0x09, 0x8f, 0xce, 0xad, 0x30, 0x12, 0x52, 0x90, 0xeb, 0x7a, 0xcb, 0xc2, 0x2d, 0xf3,
	0xc1, 0xa9, 0x88, 0x7d, 0x11, 0xdb, 0x23, 0x16, 0x23, 0xce, 0x3e, 0xdb, 0x1b, 0x71, 0xc9, 0xf6,
	0xec, 0x90, 0x4d, 0xdc, 0x80, 0x49, 0x57, 0x04, 0x29, 0xd5, 0xdc, 0x9a, 0x88, 0x89, 0xd0, 0x9f,
	0xb6, 0xfa, 0xc2, 0xd5, 0x9d, 0x89, 0x10, 0x13, 0x8f, 0xdb, 0x2c, 0x74, 0x6d, 0x16, 0x04, 0x42,
	0x6a, 0x4a, 0x8c, 0xbb, 0xb7, 0xca, 0x4a, 0xf0, 0x2f, 0x6e, 0x76, 0xcb, 0x9b, 0x22, 0xe4, 0xc1,
	0x09, 0xfe, 0x93, 0xf1, 0xcd, 0x32, 0x24, 0x64, 0x11, 0xf3, 0xb3, 0xbd, 0xca, 0x94, 0x92, 0x79,
	0x1e, 0x4e, 0x69, 0xb6, 0xcb, 0x5b, 0x67, 0x22, 0xeb, 0x49, 0xb7, 0x80, 0x7c, 0xa5, 0xc6, 0x3c,
	0xd4, 0x95, 0x1c, 0xfe, 0x3c, 0xe1, 0xb1, 0xa4, 0x5f, 0xc0, 0x5b, 0xa5, 0xd5, 0x38, 0x14, 0x41,
	0xcc, 0xc9, 0x10, 0xd6, 0xd3, 0x8e, 0x6d, 0xe3, 0xae, 0xd1, 0x6f, 0xed, 0xdf, 0xb0, 0x4a, 0xee,
	0x59, 0x29, 0xfc, 0x60, 0xf5, 0xd5, 0xdf, 0x77, 0x56, 0x1c, 0x84, 0xd2, 0x6f, 0x61, 0x4b, 0xd7,
	0x7a, 0x82, 0x93, 0x60, 0x0f, 0xf2, 0x14, 0x20, 0xb7, 0x14, 0x0b, 0xee, 0x5a, 0xa9, 0xff, 0x96,
	0xf2, 0xdf, 0x4a, 0xcf, 0x09, 0xfd, 0xb7, 0x0e, 0xd9, 0x84, 0x23, 0xd7, 0x29, 0x30, 0xe9, 0x31,
	0x34, 0xb3, 0xd2, 0x64, 0x07, 0x36, 0x50, 0xcb, 0xe7, 0x63, 0x5d, 0x72, 0xd5, 0xc9, 0x17, 0xc8,
	0x3e, 0x34, 0x7d, 0x2e, 0xd9, 0x98, 0x49, 0xd6, 0x6e, 0xe8, 0x7e, 0x6f, 0x57, 0x06, 0xc0, 0x42,
	0xce, 0x14, 0x47, 0x7f, 0x37, 0xe0, 0x46, 0x45, 0x3e, 0x9a, 0xf1, 0xac, 0x46, 0x7f, 0xef, 0x4a,
	0xfd, 0x29, 0xb9, 0x38, 0x00, 0x19, 0x42, 0x33, 0x3b, 0xe5, 0x76, 0xe3, 0xee, 0xb5, 0x7e, 0x6b,
	0xff, 0x66, 0xbd, 0xac, 0xd8, 0x99, 0x02, 0xa9, 0x09, 0x6d, 0x2d, 0xeb, 0xcb, 0x90, 0x07, 0x15,
	0x67, 0xe9, 0x31, 0x6c, 0xd7, 0xec, 0xa1, 0xec, 0x4f, 0x61, 0x53, 0x14, 0xd6, 0x51, 0xf8, 0xad,
	0x4a, 0xc7, 0x12, 0xb5, 0x44, 0xa0, 0x1f, 0xe0, 0x79, 0x1e, 0x71, 0xe6, 0x7f, 0x2d, 0x64, 0x76,
	0x26, 0xe4, 0x36, 0x00, 0xb2, 0x4f, 0xdc, 0x59, 0xf3, 0xe9, 0x21, 0xfa, 0x98, 0xd3, 0x50, 0xd0,
	0x43, 0xd8, 0x90, 0x9c, 0xf9, 0x27, 0xea, 0x52, 0xa2, 0x9a, 0xad, 0x8a, 0x1a, 0x85, 0x8f, 0xf0,
	0x5a, 0x35, 0x25, 0x16, 0xa0, 0xdb, 0x70, 0x73, 0x5a, 0xf1, 0xb3, 0xf1, 0x38, 0xe2, 0xf1, 0xd4,
	0x81, 0x8f, 0xd1, 0x9d, 0xd2, 0x16, 0xf6, 0xeb, 0xc2, 0xa6, 0xee, 0xc7, 0xd2, 0x75, 0xdd, 0x72,
	0xc3, 0x69, 0xc9, 0x1c, 0x4a, 0x1f, 0xa1, 0x81, 0xd9, 0xcc, 0x47, 0xea, 0x29, 0x2d, 0x39, 0xe7,
	0xcb, 0x06, 0x98, 0x75, 0x64, 0xec, 0x6e, 0xc3, 0x5a, 0x12, 0xf3, 0x28, 0xf3, 0x7d, 0xbb, 0x32,
	0xe9, 0xb3, 0x48, 0x24, 0x61, 0xca, 0x48, 0x71, 0xca, 0x9e, 0x88, 0x87, 0x22, 0x92, 0x8a, 0xd4,
	0xb8, 0x8a, 0x94, 0x63, 0xc9, 0x87, 0xb0, 0xaa, 0x66, 0x6a, 0x5f, 0xd3, 0x1c, 0x5a, 0xe1, 0x3c,
	0x15, 0x91, 0xcf, 0xa4, 0xe4, 0x63, 0x65, 0xe5, 0x63, 0x91, 0x04, 0x32, 0x76, 0x34, 0x9e, 0x1c,
	0xc0, 0xf5, 0x53, 0xe1, 0x8f, 0xdc, 0x80, 0x8f, 0x8f, 0x84, 0x64, 0x5e, 0x7b, 0x55, 0x17, 0xd8,
	0xa9, 0x14, 0x78, 0x5c, 0xc4, 0x38, 0x65, 0x0a, 0xfd, 0x04, 0x6e, 0x17, 0x3d, 0xc0, 0xf3, 0x4e,
	0x3c, 0xb9, 0xa4, 0x89, 0xc7, 0xd0, 0x99, 0xc7, 0x47, 0x1f, 0x1f, 0x41, 0x4b, 0x5d, 0x98, 0x93,
	0x48, 0x2f, 0xeb, 0x0a, 0x6f, 0xce, 0x18, 0x53, 0xe0, 0xc1, 0xd9, 0xf4, 0x7b, 0xff, 0xbf, 0x37,
	0x60, 0x4d, 0x97, 0x27, 0x2f, 0x60, 0x3d, 0xcd, 0x2c, 0xd2, 0xad, 0x50, 0x67, 0x43, 0xd1, 0xa4,
	0x8b, 0x20, 0xa9, 0x2c, 0xda, 0x7b, 0xf9, 0xe7, 0xbf, 0xbf, 0x35, 0xba, 0xe4, 0x8e, 0x2d, 0xb9,
	0xe7, 0x89, 0x68, 0xe0, 0x0a, 0xbb, 0x2e, 0xb2, 0xc9, 0x8f, 0x46, 0x21, 0xb6, 0xee, 0xd5, 0x55,
	0xae, 0xbc, 0x6a, 0xf3, 0x9d, 0xc5, 0x20, 0x14, 0x70, 0x5f, 0x0b, 0xb8, 0x47, 0xba, 0x73, 0x05,
	0x64, 0x11, 0x42, 0x7e, 0x35, 0x60, 0xb3, 0xf8, 0xce, 0x49, 0xaf, 0xae, 0x43, 0x4d, 0xc0, 0x98,
	0xfd, 0xab, 0x81, 0x28, 0xc7, 0xd2, 0x72, 0xfa, 0x64, 0x77, 0xae, 0x1c, 0x95, 0x2d, 0x83, 0xa9,
	0xa6, 0x9f, 0x0d, 0x68, 0x66, 0x09, 0x51, 0x6f, 0x4b, 0x25, 0x76, 0xea, 0x6d, 0xa9, 0x86, 0x0c,
	0x7d, 0xa8, 0x75, 0xec, 0x11, 0x7b, 0xae, 0x0e, 0x75, 0xf7, 0x07, 0xea, 0x92, 0xd8, 0xdf, 0xe7,
	0x37, 0xf3, 0x07, 0xf2, 0x93, 0x01, 0xad, 0x42, 0x8a, 0x90, 0xdd, 0x79, 0xed, 0xca, 0x09, 0x64,
	0xf6, 0xae, 0xc4, 0xa1, 0xb2, 0x81, 0x56, 0xd6, 0x23, 0xef, 0x2e, 0x56, 0x86, 0x69, 0xa5, 0x0e,
	0x6d, 0x4d, 0x3f, 0x75, 0xd2, 0x5f, 0x74, 0x1f, 0x8a, 0x89, 0x65, 0xde, 0x5f, 0x02, 0x89, 0x6a,
	0x86, 0x5a, 0xcd, 0x80, 0xbc, 0x37, 0x5f, 0x8d, 0xc2, 0x97, 0x3d, 0xfa, 0xc3, 0x00, 0xc8, 0x9f,
	0x1a, 0x79, 0x7f, 0x41, 0xbb, 0x99, 0x24, 0x30, 0x07, 0x4b, 0xa2, 0x51, 0xe0, 0x47, 0x5a, 0xe0,
	0x90, 0xec, 0xcd, 0x15, 0xa8, 0xce, 0x70, 0x90, 0xc6, 0x42, 0x49, 0xe6, 0xc1, 0x93, 0x57, 0x17,
	0x1d, 0xe3, 0xf5, 0x45, 0xc7, 0xf8, 0xe7, 0xa2, 0x63, 0xfc, 0x72, 0xd9, 0x59, 0x79, 0x7d, 0xd9,
	0x59, 0xf9, 0xeb, 0xb2, 0xb3, 0xf2, 0xcd, 0x83, 0x89, 0x2b, 0xbf, 0x4b, 0x46, 0xd6, 0xa9, 0xf0,
	0x67, 0xca, 0xbe, 0xc8, 0x27, 0x3f, 0x0f, 0x79, 0x3c, 0x5a, 0xd7, 0xbf, 0x9b, 0x86, 0xff, 0x07,
	0x00, 0x00, 0xff, 0xff, 0x79, 0x3d, 0xf6, 0xab, 0x54, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Reporters queries all the staked reporters.
	Disputes(ctx context.Context, in *QueryDisputesRequest, opts ...grpc.CallOption) (*QueryDisputesResponse, error)
	// OpenDisputes queries all the open disputes.
	OpenDisputes(ctx context.Context, in *QueryOpenDisputesRequest, opts ...grpc.CallOption) (*QueryOpenDisputesResponse, error)
	// team vote queries the team vote for a dispute.
	TeamVote(ctx context.Context, in *QueryTeamVoteRequest, opts ...grpc.CallOption) (*QueryTeamVoteResponse, error)
	// team address queries the team address.
	TeamAddress(ctx context.Context, in *QueryTeamAddressRequest, opts ...grpc.CallOption) (*QueryTeamAddressResponse, error)
	// Tally queries the vote count of a dispute
	Tally(ctx context.Context, in *QueryDisputesTallyRequest, opts ...grpc.CallOption) (*QueryDisputesTallyResponse, error)
	// VoteResult queries the vote result of a dispute
	VoteResult(ctx context.Context, in *QueryDisputeVoteResultRequest, opts ...grpc.CallOption) (*QueryDisputeVoteResultResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/layer.dispute.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Disputes(ctx context.Context, in *QueryDisputesRequest, opts ...grpc.CallOption) (*QueryDisputesResponse, error) {
	out := new(QueryDisputesResponse)
	err := c.cc.Invoke(ctx, "/layer.dispute.Query/Disputes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OpenDisputes(ctx context.Context, in *QueryOpenDisputesRequest, opts ...grpc.CallOption) (*QueryOpenDisputesResponse, error) {
	out := new(QueryOpenDisputesResponse)
	err := c.cc.Invoke(ctx, "/layer.dispute.Query/OpenDisputes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TeamVote(ctx context.Context, in *QueryTeamVoteRequest, opts ...grpc.CallOption) (*QueryTeamVoteResponse, error) {
	out := new(QueryTeamVoteResponse)
	err := c.cc.Invoke(ctx, "/layer.dispute.Query/TeamVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TeamAddress(ctx context.Context, in *QueryTeamAddressRequest, opts ...grpc.CallOption) (*QueryTeamAddressResponse, error) {
	out := new(QueryTeamAddressResponse)
	err := c.cc.Invoke(ctx, "/layer.dispute.Query/TeamAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Tally(ctx context.Context, in *QueryDisputesTallyRequest, opts ...grpc.CallOption) (*QueryDisputesTallyResponse, error) {
	out := new(QueryDisputesTallyResponse)
	err := c.cc.Invoke(ctx, "/layer.dispute.Query/Tally", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VoteResult(ctx context.Context, in *QueryDisputeVoteResultRequest, opts ...grpc.CallOption) (*QueryDisputeVoteResultResponse, error) {
	out := new(QueryDisputeVoteResultResponse)
	err := c.cc.Invoke(ctx, "/layer.dispute.Query/VoteResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Reporters queries all the staked reporters.
	Disputes(context.Context, *QueryDisputesRequest) (*QueryDisputesResponse, error)
	// OpenDisputes queries all the open disputes.
	OpenDisputes(context.Context, *QueryOpenDisputesRequest) (*QueryOpenDisputesResponse, error)
	// team vote queries the team vote for a dispute.
	TeamVote(context.Context, *QueryTeamVoteRequest) (*QueryTeamVoteResponse, error)
	// team address queries the team address.
	TeamAddress(context.Context, *QueryTeamAddressRequest) (*QueryTeamAddressResponse, error)
	// Tally queries the vote count of a dispute
	Tally(context.Context, *QueryDisputesTallyRequest) (*QueryDisputesTallyResponse, error)
	// VoteResult queries the vote result of a dispute
	VoteResult(context.Context, *QueryDisputeVoteResultRequest) (*QueryDisputeVoteResultResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Disputes(ctx context.Context, req *QueryDisputesRequest) (*QueryDisputesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disputes not implemented")
}
func (*UnimplementedQueryServer) OpenDisputes(ctx context.Context, req *QueryOpenDisputesRequest) (*QueryOpenDisputesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenDisputes not implemented")
}
func (*UnimplementedQueryServer) TeamVote(ctx context.Context, req *QueryTeamVoteRequest) (*QueryTeamVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TeamVote not implemented")
}
func (*UnimplementedQueryServer) TeamAddress(ctx context.Context, req *QueryTeamAddressRequest) (*QueryTeamAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TeamAddress not implemented")
}
func (*UnimplementedQueryServer) Tally(ctx context.Context, req *QueryDisputesTallyRequest) (*QueryDisputesTallyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tally not implemented")
}
func (*UnimplementedQueryServer) VoteResult(ctx context.Context, req *QueryDisputeVoteResultRequest) (*QueryDisputeVoteResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteResult not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.dispute.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Disputes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDisputesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Disputes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.dispute.Query/Disputes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Disputes(ctx, req.(*QueryDisputesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OpenDisputes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOpenDisputesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OpenDisputes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.dispute.Query/OpenDisputes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OpenDisputes(ctx, req.(*QueryOpenDisputesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TeamVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTeamVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TeamVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.dispute.Query/TeamVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TeamVote(ctx, req.(*QueryTeamVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TeamAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTeamAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TeamAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.dispute.Query/TeamAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TeamAddress(ctx, req.(*QueryTeamAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Tally_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDisputesTallyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Tally(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.dispute.Query/Tally",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Tally(ctx, req.(*QueryDisputesTallyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VoteResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDisputeVoteResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VoteResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.dispute.Query/VoteResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VoteResult(ctx, req.(*QueryDisputeVoteResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "layer.dispute.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Disputes",
			Handler:    _Query_Disputes_Handler,
		},
		{
			MethodName: "OpenDisputes",
			Handler:    _Query_OpenDisputes_Handler,
		},
		{
			MethodName: "TeamVote",
			Handler:    _Query_TeamVote_Handler,
		},
		{
			MethodName: "TeamAddress",
			Handler:    _Query_TeamAddress_Handler,
		},
		{
			MethodName: "Tally",
			Handler:    _Query_Tally_Handler,
		},
		{
			MethodName: "VoteResult",
			Handler:    _Query_VoteResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "layer/dispute/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryDisputesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDisputesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDisputesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Disputes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Disputes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Disputes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.DisputeId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.DisputeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDisputesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDisputesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDisputesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Disputes) > 0 {
		for iNdEx := len(m.Disputes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Disputes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOpenDisputesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOpenDisputesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOpenDisputesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryOpenDisputesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOpenDisputesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOpenDisputesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OpenDisputes != nil {
		{
			size, err := m.OpenDisputes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTeamVoteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTeamVoteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTeamVoteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DisputeId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.DisputeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTeamVoteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTeamVoteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTeamVoteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TeamVote.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTeamAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTeamAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTeamAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryTeamAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTeamAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTeamAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TeamAddress) > 0 {
		i -= len(m.TeamAddress)
		copy(dAtA[i:], m.TeamAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TeamAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDisputesTallyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDisputesTallyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDisputesTallyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DisputeId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.DisputeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDisputesTallyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDisputesTallyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDisputesTallyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CombinedTotal != nil {
		{
			size, err := m.CombinedTotal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Team != nil {
		{
			size, err := m.Team.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Reporters != nil {
		{
			size, err := m.Reporters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Users != nil {
		{
			size, err := m.Users.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDisputeVoteResultRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDisputeVoteResultRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDisputeVoteResultRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DisputeId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.DisputeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDisputeVoteResultResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDisputeVoteResultResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDisputeVoteResultResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VoteResult != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.VoteResult))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryDisputesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *Disputes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisputeId != 0 {
		n += 1 + sovQuery(uint64(m.DisputeId))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDisputesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Disputes) > 0 {
		for _, e := range m.Disputes {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryOpenDisputesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryOpenDisputesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OpenDisputes != nil {
		l = m.OpenDisputes.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTeamVoteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisputeId != 0 {
		n += 1 + sovQuery(uint64(m.DisputeId))
	}
	return n
}

func (m *QueryTeamVoteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TeamVote.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryTeamAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryTeamAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TeamAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDisputesTallyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisputeId != 0 {
		n += 1 + sovQuery(uint64(m.DisputeId))
	}
	return n
}

func (m *QueryDisputesTallyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Users != nil {
		l = m.Users.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Reporters != nil {
		l = m.Reporters.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Team != nil {
		l = m.Team.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.CombinedTotal != nil {
		l = m.CombinedTotal.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDisputeVoteResultRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisputeId != 0 {
		n += 1 + sovQuery(uint64(m.DisputeId))
	}
	return n
}

func (m *QueryDisputeVoteResultResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VoteResult != 0 {
		n += 1 + sovQuery(uint64(m.VoteResult))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDisputesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDisputesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDisputesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Disputes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Disputes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Disputes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeId", wireType)
			}
			m.DisputeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisputeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &Dispute{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDisputesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDisputesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDisputesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disputes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Disputes = append(m.Disputes, &Disputes{})
			if err := m.Disputes[len(m.Disputes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOpenDisputesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOpenDisputesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOpenDisputesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOpenDisputesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOpenDisputesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOpenDisputesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenDisputes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OpenDisputes == nil {
				m.OpenDisputes = &OpenDisputes{}
			}
			if err := m.OpenDisputes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTeamVoteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTeamVoteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTeamVoteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeId", wireType)
			}
			m.DisputeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisputeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTeamVoteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTeamVoteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTeamVoteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamVote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TeamVote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTeamAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTeamAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTeamAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTeamAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTeamAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTeamAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDisputesTallyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDisputesTallyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDisputesTallyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeId", wireType)
			}
			m.DisputeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisputeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDisputesTallyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDisputesTallyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDisputesTallyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Users == nil {
				m.Users = &GroupTally{}
			}
			if err := m.Users.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reporters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reporters == nil {
				m.Reporters = &GroupTally{}
			}
			if err := m.Reporters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Team", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Team == nil {
				m.Team = &FormattedVoteCounts{}
			}
			if err := m.Team.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CombinedTotal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CombinedTotal == nil {
				m.CombinedTotal = &CombinedTotal{}
			}
			if err := m.CombinedTotal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDisputeVoteResultRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDisputeVoteResultRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDisputeVoteResultRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeId", wireType)
			}
			m.DisputeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisputeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDisputeVoteResultResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDisputeVoteResultResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDisputeVoteResultResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteResult", wireType)
			}
			m.VoteResult = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoteResult |= VoteResult(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
