// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: layer/reporter/query.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a043abc58a7b99a9, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a043abc58a7b99a9, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryReportersRequest is the request type for the Query/Reporters RPC method.
type QueryReportersRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryReportersRequest) Reset()         { *m = QueryReportersRequest{} }
func (m *QueryReportersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryReportersRequest) ProtoMessage()    {}
func (*QueryReportersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a043abc58a7b99a9, []int{2}
}
func (m *QueryReportersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReportersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReportersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReportersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReportersRequest.Merge(m, src)
}
func (m *QueryReportersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryReportersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReportersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReportersRequest proto.InternalMessageInfo

func (m *QueryReportersRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type Reporter struct {
	Address  string          `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Metadata *OracleReporter `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Power    uint64          `protobuf:"varint,3,opt,name=power,proto3" json:"power,omitempty"`
}

func (m *Reporter) Reset()         { *m = Reporter{} }
func (m *Reporter) String() string { return proto.CompactTextString(m) }
func (*Reporter) ProtoMessage()    {}
func (*Reporter) Descriptor() ([]byte, []int) {
	return fileDescriptor_a043abc58a7b99a9, []int{3}
}
func (m *Reporter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Reporter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Reporter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Reporter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reporter.Merge(m, src)
}
func (m *Reporter) XXX_Size() int {
	return m.Size()
}
func (m *Reporter) XXX_DiscardUnknown() {
	xxx_messageInfo_Reporter.DiscardUnknown(m)
}

var xxx_messageInfo_Reporter proto.InternalMessageInfo

func (m *Reporter) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Reporter) GetMetadata() *OracleReporter {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Reporter) GetPower() uint64 {
	if m != nil {
		return m.Power
	}
	return 0
}

// QueryReportersResponse is the response type for the Query/Reporters RPC method.
type QueryReportersResponse struct {
	// all the reporters.
	Reporters []*Reporter `protobuf:"bytes,1,rep,name=reporters,proto3" json:"reporters,omitempty"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryReportersResponse) Reset()         { *m = QueryReportersResponse{} }
func (m *QueryReportersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryReportersResponse) ProtoMessage()    {}
func (*QueryReportersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a043abc58a7b99a9, []int{4}
}
func (m *QueryReportersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReportersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReportersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReportersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReportersResponse.Merge(m, src)
}
func (m *QueryReportersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryReportersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReportersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReportersResponse proto.InternalMessageInfo

func (m *QueryReportersResponse) GetReporters() []*Reporter {
	if m != nil {
		return m.Reporters
	}
	return nil
}

func (m *QueryReportersResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QuerySelectorReporterRequest is the request type for the
// Query/SelectorReporter RPC method.
type QuerySelectorReporterRequest struct {
	// selector_address defines the selector address to query for.
	SelectorAddress string `protobuf:"bytes,1,opt,name=selector_address,json=selectorAddress,proto3" json:"selector_address,omitempty"`
}

func (m *QuerySelectorReporterRequest) Reset()         { *m = QuerySelectorReporterRequest{} }
func (m *QuerySelectorReporterRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySelectorReporterRequest) ProtoMessage()    {}
func (*QuerySelectorReporterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a043abc58a7b99a9, []int{5}
}
func (m *QuerySelectorReporterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySelectorReporterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySelectorReporterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySelectorReporterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySelectorReporterRequest.Merge(m, src)
}
func (m *QuerySelectorReporterRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySelectorReporterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySelectorReporterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySelectorReporterRequest proto.InternalMessageInfo

// QuerySelectorReporterResponse is the response type for the
// Query/SelectorReporter RPC method.
type QuerySelectorReporterResponse struct {
	// reporter defines the reporter of a selector.
	Reporter string `protobuf:"bytes,1,opt,name=reporter,proto3" json:"reporter,omitempty"`
}

func (m *QuerySelectorReporterResponse) Reset()         { *m = QuerySelectorReporterResponse{} }
func (m *QuerySelectorReporterResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySelectorReporterResponse) ProtoMessage()    {}
func (*QuerySelectorReporterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a043abc58a7b99a9, []int{6}
}
func (m *QuerySelectorReporterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySelectorReporterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySelectorReporterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySelectorReporterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySelectorReporterResponse.Merge(m, src)
}
func (m *QuerySelectorReporterResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySelectorReporterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySelectorReporterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySelectorReporterResponse proto.InternalMessageInfo

func (m *QuerySelectorReporterResponse) GetReporter() string {
	if m != nil {
		return m.Reporter
	}
	return ""
}

type QueryAllowedAmountRequest struct {
}

func (m *QueryAllowedAmountRequest) Reset()         { *m = QueryAllowedAmountRequest{} }
func (m *QueryAllowedAmountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllowedAmountRequest) ProtoMessage()    {}
func (*QueryAllowedAmountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a043abc58a7b99a9, []int{7}
}
func (m *QueryAllowedAmountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllowedAmountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllowedAmountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllowedAmountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllowedAmountRequest.Merge(m, src)
}
func (m *QueryAllowedAmountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllowedAmountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllowedAmountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllowedAmountRequest proto.InternalMessageInfo

type QueryAllowedAmountResponse struct {
	// allowed_amount defines the currently allowed amount to stake or unstake.
	StakingAmount   cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=staking_amount,json=stakingAmount,proto3,customtype=cosmossdk.io/math.Int" json:"staking_amount"`
	UnstakingAmount cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=unstaking_amount,json=unstakingAmount,proto3,customtype=cosmossdk.io/math.Int" json:"unstaking_amount"`
}

func (m *QueryAllowedAmountResponse) Reset()         { *m = QueryAllowedAmountResponse{} }
func (m *QueryAllowedAmountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllowedAmountResponse) ProtoMessage()    {}
func (*QueryAllowedAmountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a043abc58a7b99a9, []int{8}
}
func (m *QueryAllowedAmountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllowedAmountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllowedAmountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllowedAmountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllowedAmountResponse.Merge(m, src)
}
func (m *QueryAllowedAmountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllowedAmountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllowedAmountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllowedAmountResponse proto.InternalMessageInfo

type QueryAllowedAmountExpirationRequest struct {
}

func (m *QueryAllowedAmountExpirationRequest) Reset()         { *m = QueryAllowedAmountExpirationRequest{} }
func (m *QueryAllowedAmountExpirationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllowedAmountExpirationRequest) ProtoMessage()    {}
func (*QueryAllowedAmountExpirationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a043abc58a7b99a9, []int{9}
}
func (m *QueryAllowedAmountExpirationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllowedAmountExpirationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllowedAmountExpirationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllowedAmountExpirationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllowedAmountExpirationRequest.Merge(m, src)
}
func (m *QueryAllowedAmountExpirationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllowedAmountExpirationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllowedAmountExpirationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllowedAmountExpirationRequest proto.InternalMessageInfo

type QueryAllowedAmountExpirationResponse struct {
	Expiration uint64 `protobuf:"varint,1,opt,name=expiration,proto3" json:"expiration,omitempty"`
}

func (m *QueryAllowedAmountExpirationResponse) Reset()         { *m = QueryAllowedAmountExpirationResponse{} }
func (m *QueryAllowedAmountExpirationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllowedAmountExpirationResponse) ProtoMessage()    {}
func (*QueryAllowedAmountExpirationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a043abc58a7b99a9, []int{10}
}
func (m *QueryAllowedAmountExpirationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllowedAmountExpirationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllowedAmountExpirationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllowedAmountExpirationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllowedAmountExpirationResponse.Merge(m, src)
}
func (m *QueryAllowedAmountExpirationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllowedAmountExpirationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllowedAmountExpirationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllowedAmountExpirationResponse proto.InternalMessageInfo

func (m *QueryAllowedAmountExpirationResponse) GetExpiration() uint64 {
	if m != nil {
		return m.Expiration
	}
	return 0
}

// QueryNumOfSelectorsByReporterRequest is the request type for the
// Query/NumOfSelectorsByReporter RPC method.
type QueryNumOfSelectorsByReporterRequest struct {
	// reporter_address defines the reporter address to query for.
	ReporterAddress string `protobuf:"bytes,1,opt,name=reporter_address,json=reporterAddress,proto3" json:"reporter_address,omitempty"`
}

func (m *QueryNumOfSelectorsByReporterRequest) Reset()         { *m = QueryNumOfSelectorsByReporterRequest{} }
func (m *QueryNumOfSelectorsByReporterRequest) String() string { return proto.CompactTextString(m) }
func (*QueryNumOfSelectorsByReporterRequest) ProtoMessage()    {}
func (*QueryNumOfSelectorsByReporterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a043abc58a7b99a9, []int{11}
}
func (m *QueryNumOfSelectorsByReporterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNumOfSelectorsByReporterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNumOfSelectorsByReporterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNumOfSelectorsByReporterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNumOfSelectorsByReporterRequest.Merge(m, src)
}
func (m *QueryNumOfSelectorsByReporterRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryNumOfSelectorsByReporterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNumOfSelectorsByReporterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNumOfSelectorsByReporterRequest proto.InternalMessageInfo

// QueryNumOfSelectorsByReporterResponse is the response type for the
// Query/NumOfSelectorsByReporter RPC method.
type QueryNumOfSelectorsByReporterResponse struct {
	// num_of_selectors defines the number of selectors by a reporter.
	NumOfSelectors int32 `protobuf:"varint,1,opt,name=num_of_selectors,json=numOfSelectors,proto3" json:"num_of_selectors,omitempty"`
}

func (m *QueryNumOfSelectorsByReporterResponse) Reset()         { *m = QueryNumOfSelectorsByReporterResponse{} }
func (m *QueryNumOfSelectorsByReporterResponse) String() string { return proto.CompactTextString(m) }
func (*QueryNumOfSelectorsByReporterResponse) ProtoMessage()    {}
func (*QueryNumOfSelectorsByReporterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a043abc58a7b99a9, []int{12}
}
func (m *QueryNumOfSelectorsByReporterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNumOfSelectorsByReporterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNumOfSelectorsByReporterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNumOfSelectorsByReporterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNumOfSelectorsByReporterResponse.Merge(m, src)
}
func (m *QueryNumOfSelectorsByReporterResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryNumOfSelectorsByReporterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNumOfSelectorsByReporterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNumOfSelectorsByReporterResponse proto.InternalMessageInfo

func (m *QueryNumOfSelectorsByReporterResponse) GetNumOfSelectors() int32 {
	if m != nil {
		return m.NumOfSelectors
	}
	return 0
}

// QuerySpaceAvailableByReporterRequest is the request type for the
// Query/SpaceAvailableByReporter RPC method.
type QuerySpaceAvailableByReporterRequest struct {
	// reporter_address defines the reporter address to query for.
	ReporterAddress string `protobuf:"bytes,1,opt,name=reporter_address,json=reporterAddress,proto3" json:"reporter_address,omitempty"`
}

func (m *QuerySpaceAvailableByReporterRequest) Reset()         { *m = QuerySpaceAvailableByReporterRequest{} }
func (m *QuerySpaceAvailableByReporterRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySpaceAvailableByReporterRequest) ProtoMessage()    {}
func (*QuerySpaceAvailableByReporterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a043abc58a7b99a9, []int{13}
}
func (m *QuerySpaceAvailableByReporterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySpaceAvailableByReporterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySpaceAvailableByReporterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySpaceAvailableByReporterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpaceAvailableByReporterRequest.Merge(m, src)
}
func (m *QuerySpaceAvailableByReporterRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySpaceAvailableByReporterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpaceAvailableByReporterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpaceAvailableByReporterRequest proto.InternalMessageInfo

// QuerySpaceAvailableByReporterResponse is the response type for the
// Query/SpaceAvailableByReporter RPC method.
type QuerySpaceAvailableByReporterResponse struct {
	// space_available defines the space available in a reporter.
	SpaceAvailable int32 `protobuf:"varint,1,opt,name=space_available,json=spaceAvailable,proto3" json:"space_available,omitempty"`
}

func (m *QuerySpaceAvailableByReporterResponse) Reset()         { *m = QuerySpaceAvailableByReporterResponse{} }
func (m *QuerySpaceAvailableByReporterResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySpaceAvailableByReporterResponse) ProtoMessage()    {}
func (*QuerySpaceAvailableByReporterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a043abc58a7b99a9, []int{14}
}
func (m *QuerySpaceAvailableByReporterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySpaceAvailableByReporterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySpaceAvailableByReporterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySpaceAvailableByReporterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpaceAvailableByReporterResponse.Merge(m, src)
}
func (m *QuerySpaceAvailableByReporterResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySpaceAvailableByReporterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpaceAvailableByReporterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpaceAvailableByReporterResponse proto.InternalMessageInfo

func (m *QuerySpaceAvailableByReporterResponse) GetSpaceAvailable() int32 {
	if m != nil {
		return m.SpaceAvailable
	}
	return 0
}

type QueryAvailableTipsRequest struct {
	// selector address defines the address of the selector to query for.
	SelectorAddress string `protobuf:"bytes,1,opt,name=selector_address,json=selectorAddress,proto3" json:"selector_address,omitempty"`
}

func (m *QueryAvailableTipsRequest) Reset()         { *m = QueryAvailableTipsRequest{} }
func (m *QueryAvailableTipsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAvailableTipsRequest) ProtoMessage()    {}
func (*QueryAvailableTipsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a043abc58a7b99a9, []int{15}
}
func (m *QueryAvailableTipsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAvailableTipsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAvailableTipsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAvailableTipsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAvailableTipsRequest.Merge(m, src)
}
func (m *QueryAvailableTipsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAvailableTipsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAvailableTipsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAvailableTipsRequest proto.InternalMessageInfo

func (m *QueryAvailableTipsRequest) GetSelectorAddress() string {
	if m != nil {
		return m.SelectorAddress
	}
	return ""
}

type QueryAvailableTipsResponse struct {
	// available_tips defines the tips available for withdrawal for a given selector.
	AvailableTips cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=available_tips,json=availableTips,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"available_tips"`
}

func (m *QueryAvailableTipsResponse) Reset()         { *m = QueryAvailableTipsResponse{} }
func (m *QueryAvailableTipsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAvailableTipsResponse) ProtoMessage()    {}
func (*QueryAvailableTipsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a043abc58a7b99a9, []int{16}
}
func (m *QueryAvailableTipsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAvailableTipsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAvailableTipsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAvailableTipsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAvailableTipsResponse.Merge(m, src)
}
func (m *QueryAvailableTipsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAvailableTipsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAvailableTipsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAvailableTipsResponse proto.InternalMessageInfo

type QuerySelectionsToRequest struct {
	// reporter address defines the address of the reporter to query selections for.
	ReporterAddress string `protobuf:"bytes,1,opt,name=reporter_address,json=reporterAddress,proto3" json:"reporter_address,omitempty"`
}

func (m *QuerySelectionsToRequest) Reset()         { *m = QuerySelectionsToRequest{} }
func (m *QuerySelectionsToRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySelectionsToRequest) ProtoMessage()    {}
func (*QuerySelectionsToRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a043abc58a7b99a9, []int{17}
}
func (m *QuerySelectionsToRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySelectionsToRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySelectionsToRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySelectionsToRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySelectionsToRequest.Merge(m, src)
}
func (m *QuerySelectionsToRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySelectionsToRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySelectionsToRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySelectionsToRequest proto.InternalMessageInfo

func (m *QuerySelectionsToRequest) GetReporterAddress() string {
	if m != nil {
		return m.ReporterAddress
	}
	return ""
}

type QuerySelectionsToResponse struct {
	// selections_to defines the selections to for a given selector.
	SelectionsTo []*FormattedSelection `protobuf:"bytes,1,rep,name=selections_to,json=selectionsTo,proto3" json:"selections_to,omitempty"`
}

func (m *QuerySelectionsToResponse) Reset()         { *m = QuerySelectionsToResponse{} }
func (m *QuerySelectionsToResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySelectionsToResponse) ProtoMessage()    {}
func (*QuerySelectionsToResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a043abc58a7b99a9, []int{18}
}
func (m *QuerySelectionsToResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySelectionsToResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySelectionsToResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySelectionsToResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySelectionsToResponse.Merge(m, src)
}
func (m *QuerySelectionsToResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySelectionsToResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySelectionsToResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySelectionsToResponse proto.InternalMessageInfo

func (m *QuerySelectionsToResponse) GetSelectionsTo() []*FormattedSelection {
	if m != nil {
		return m.SelectionsTo
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "layer.reporter.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "layer.reporter.QueryParamsResponse")
	proto.RegisterType((*QueryReportersRequest)(nil), "layer.reporter.QueryReportersRequest")
	proto.RegisterType((*Reporter)(nil), "layer.reporter.reporter")
	proto.RegisterType((*QueryReportersResponse)(nil), "layer.reporter.QueryReportersResponse")
	proto.RegisterType((*QuerySelectorReporterRequest)(nil), "layer.reporter.QuerySelectorReporterRequest")
	proto.RegisterType((*QuerySelectorReporterResponse)(nil), "layer.reporter.QuerySelectorReporterResponse")
	proto.RegisterType((*QueryAllowedAmountRequest)(nil), "layer.reporter.QueryAllowedAmountRequest")
	proto.RegisterType((*QueryAllowedAmountResponse)(nil), "layer.reporter.QueryAllowedAmountResponse")
	proto.RegisterType((*QueryAllowedAmountExpirationRequest)(nil), "layer.reporter.QueryAllowedAmountExpirationRequest")
	proto.RegisterType((*QueryAllowedAmountExpirationResponse)(nil), "layer.reporter.QueryAllowedAmountExpirationResponse")
	proto.RegisterType((*QueryNumOfSelectorsByReporterRequest)(nil), "layer.reporter.QueryNumOfSelectorsByReporterRequest")
	proto.RegisterType((*QueryNumOfSelectorsByReporterResponse)(nil), "layer.reporter.QueryNumOfSelectorsByReporterResponse")
	proto.RegisterType((*QuerySpaceAvailableByReporterRequest)(nil), "layer.reporter.QuerySpaceAvailableByReporterRequest")
	proto.RegisterType((*QuerySpaceAvailableByReporterResponse)(nil), "layer.reporter.QuerySpaceAvailableByReporterResponse")
	proto.RegisterType((*QueryAvailableTipsRequest)(nil), "layer.reporter.QueryAvailableTipsRequest")
	proto.RegisterType((*QueryAvailableTipsResponse)(nil), "layer.reporter.QueryAvailableTipsResponse")
	proto.RegisterType((*QuerySelectionsToRequest)(nil), "layer.reporter.QuerySelectionsToRequest")
	proto.RegisterType((*QuerySelectionsToResponse)(nil), "layer.reporter.QuerySelectionsToResponse")
}

func init() { proto.RegisterFile("layer/reporter/query.proto", fileDescriptor_a043abc58a7b99a9) }

var fileDescriptor_a043abc58a7b99a9 = []byte{
	// 1172 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0xcd, 0x6f, 0xdc, 0x44,
	0x14, 0x5f, 0xa7, 0x4d, 0x48, 0xa6, 0xf9, 0x62, 0x48, 0xcb, 0xd6, 0x29, 0x9b, 0xc8, 0x69, 0xda,
	0x6d, 0x82, 0xd7, 0x24, 0x69, 0x91, 0x48, 0x01, 0x91, 0xb4, 0x4d, 0x09, 0x20, 0x9a, 0x38, 0x05,
	0x21, 0x2e, 0x66, 0x76, 0x77, 0xb2, 0xb5, 0xba, 0xf6, 0xb8, 0xf6, 0x6c, 0xda, 0x55, 0xd5, 0x0b,
	0x17, 0x38, 0x56, 0xe2, 0x02, 0xb7, 0xde, 0x40, 0xe2, 0xc2, 0xa1, 0x12, 0x5c, 0xb9, 0xe5, 0x58,
	0x95, 0x0b, 0xf4, 0x50, 0xa1, 0x04, 0x09, 0xfe, 0x0c, 0xe4, 0xf9, 0xf0, 0xee, 0x7a, 0xed, 0xf5,
	0x46, 0x6a, 0x2f, 0xd1, 0x7a, 0xde, 0xd7, 0xef, 0xf7, 0xe6, 0xcd, 0xfb, 0x29, 0x40, 0xad, 0xa3,
	0x26, 0xf6, 0x0d, 0x1f, 0x7b, 0xc4, 0xa7, 0xd8, 0x37, 0xee, 0x34, 0xb0, 0xdf, 0x2c, 0x79, 0x3e,
	0xa1, 0x04, 0x8e, 0x33, 0x5b, 0x49, 0xda, 0xd4, 0x57, 0x91, 0x63, 0xbb, 0xc4, 0x60, 0x7f, 0xb9,
	0x8b, 0xba, 0x50, 0x21, 0x81, 0x43, 0x02, 0xa3, 0x8c, 0x02, 0xcc, 0x63, 0x8d, 0xbd, 0xa5, 0x32,
	0xa6, 0x68, 0xc9, 0xf0, 0x50, 0xcd, 0x76, 0x11, 0xb5, 0x89, 0x2b, 0x7c, 0x0b, 0xed, 0xbe, 0xd2,
	0xab, 0x42, 0x6c, 0x69, 0x3f, 0xcd, 0xed, 0x16, 0xfb, 0x32, 0xf8, 0x87, 0x30, 0x4d, 0xd5, 0x48,
	0x8d, 0xf0, 0xf3, 0xf0, 0x97, 0x38, 0x3d, 0x53, 0x23, 0xa4, 0x56, 0xc7, 0x06, 0xf2, 0x6c, 0x03,
	0xb9, 0x2e, 0xa1, 0xac, 0x9a, 0x8c, 0x39, 0x1b, 0x63, 0x46, 0x7c, 0x54, 0xa9, 0x63, 0x4b, 0x7e,
	0x0b, 0xaf, 0xe9, 0x98, 0x97, 0x87, 0x7c, 0xe4, 0xc8, 0x14, 0x85, 0x98, 0x31, 0xc0, 0x75, 0x5c,
	0x69, 0x31, 0xd2, 0xa6, 0x00, 0xdc, 0x0e, 0x39, 0x6f, 0xb1, 0x20, 0x13, 0xdf, 0x69, 0xe0, 0x80,
	0x6a, 0x5b, 0xe0, 0xb5, 0x8e, 0xd3, 0xc0, 0x23, 0x6e, 0x80, 0xe1, 0x3b, 0x60, 0x88, 0x27, 0xcf,
	0x2b, 0xb3, 0x4a, 0xf1, 0xc4, 0xf2, 0xa9, 0x52, 0x67, 0x7b, 0x4b, 0xdc, 0x7f, 0x7d, 0x64, 0xff,
	0xf9, 0x4c, 0xee, 0xa7, 0x7f, 0x7f, 0x59, 0x50, 0x4c, 0x11, 0xa0, 0x59, 0xe0, 0x24, 0xcb, 0x68,
	0x0a, 0x57, 0x59, 0x0a, 0x6e, 0x00, 0xd0, 0x6a, 0xb3, 0xc8, 0x7b, 0xae, 0x24, 0x5a, 0x17, 0xf6,
	0xb9, 0xc4, 0xef, 0x53, 0x74, 0xbb, 0xb4, 0x85, 0x6a, 0x58, 0xc4, 0x9a, 0x6d, 0x91, 0xda, 0x43,
	0x05, 0x0c, 0x4b, 0x1c, 0x70, 0x19, 0xbc, 0x82, 0xaa, 0x55, 0x1f, 0x07, 0x1c, 0xe9, 0xc8, 0x7a,
	0xfe, 0xe9, 0x63, 0x7d, 0x4a, 0x24, 0x5d, 0xe3, 0x96, 0x1d, 0xea, 0xdb, 0x6e, 0xcd, 0x94, 0x8e,
	0x70, 0x15, 0x0c, 0x3b, 0x98, 0xa2, 0x2a, 0xa2, 0x28, 0x3f, 0xc0, 0x60, 0x14, 0xe2, 0xf4, 0x6e,
	0xb0, 0xfe, 0x4b, 0x0a, 0x66, 0xe4, 0x0f, 0xa7, 0xc0, 0xa0, 0x47, 0xee, 0x62, 0x3f, 0x7f, 0x6c,
	0x56, 0x29, 0x1e, 0x37, 0xf9, 0x87, 0xf6, 0x83, 0x02, 0x4e, 0xc5, 0x49, 0x8b, 0x4e, 0xbe, 0x0d,
	0x46, 0x64, 0xd6, 0x10, 0xe2, 0xb1, 0xe2, 0x89, 0xe5, 0x7c, 0xbc, 0x9a, 0xfc, 0x61, 0xb6, 0x5c,
	0xe1, 0xf5, 0x8e, 0x6e, 0x71, 0x98, 0xe7, 0x33, 0xbb, 0xc5, 0x8b, 0x76, 0xb4, 0xcb, 0x01, 0x67,
	0x18, 0xb4, 0x1d, 0x36, 0x0f, 0xc4, 0x8f, 0x48, 0x89, 0x6b, 0xb9, 0x02, 0x26, 0x03, 0x61, 0xb2,
	0xfa, 0x6d, 0xe5, 0x84, 0x8c, 0x10, 0xc7, 0xab, 0xc3, 0xdf, 0x3e, 0x9a, 0xc9, 0xfd, 0xf7, 0x68,
	0x26, 0xa7, 0x7d, 0x06, 0xde, 0x48, 0x29, 0x27, 0x1a, 0x72, 0xb1, 0x75, 0x7b, 0x99, 0x75, 0x22,
	0x4f, 0x6d, 0x1a, 0x9c, 0x66, 0x69, 0xd7, 0xea, 0x75, 0x72, 0x17, 0x57, 0xd7, 0x1c, 0xd2, 0x70,
	0xa9, 0x1c, 0xe2, 0x7d, 0x05, 0xa8, 0x49, 0x56, 0x51, 0xd1, 0x04, 0xe3, 0x01, 0x45, 0xb7, 0x6d,
	0xb7, 0x66, 0x21, 0x66, 0x11, 0x75, 0x17, 0xc3, 0xe1, 0x7d, 0xf6, 0x7c, 0xe6, 0x24, 0xaf, 0x1d,
	0x54, 0x6f, 0x97, 0x6c, 0x62, 0x38, 0x88, 0xde, 0x2a, 0x6d, 0xba, 0xf4, 0xe9, 0x63, 0x1d, 0x08,
	0x50, 0x9b, 0x2e, 0x35, 0xc7, 0x44, 0x0a, 0x9e, 0x1b, 0x7e, 0x0e, 0x26, 0x1b, 0x6e, 0x2c, 0xeb,
	0xc0, 0xd1, 0xb3, 0x4e, 0x44, 0x49, 0x78, 0x5e, 0x6d, 0x1e, 0xcc, 0x75, 0x33, 0xb9, 0x76, 0xcf,
	0xb3, 0x7d, 0x76, 0x9b, 0x92, 0xf1, 0x06, 0x38, 0xdb, 0xdb, 0x4d, 0x50, 0x2f, 0x00, 0x80, 0xa3,
	0x53, 0x46, 0xfb, 0xb8, 0xd9, 0x76, 0xa2, 0x35, 0x44, 0x9e, 0x4f, 0x1b, 0xce, 0x8d, 0x5d, 0x79,
	0x65, 0xc1, 0x7a, 0x33, 0x61, 0x48, 0xe4, 0x55, 0xf4, 0x3f, 0x24, 0x32, 0xa2, 0x7b, 0x48, 0xb6,
	0xc1, 0x7c, 0x46, 0x59, 0x81, 0xbf, 0x08, 0x26, 0xdd, 0x86, 0x63, 0x91, 0x5d, 0x4b, 0x4e, 0x1c,
	0xaf, 0x3b, 0x68, 0x8e, 0xbb, 0x1d, 0xb1, 0x11, 0x93, 0x1d, 0x0f, 0x55, 0xf0, 0xda, 0x1e, 0xb2,
	0xeb, 0xa8, 0x5c, 0xc7, 0x2f, 0x9d, 0xc9, 0x96, 0x60, 0x92, 0x5e, 0x56, 0x30, 0x39, 0x0f, 0x26,
	0x82, 0xd0, 0xc7, 0x42, 0xd2, 0x49, 0x12, 0x09, 0x3a, 0x42, 0xb5, 0xaf, 0xe4, 0xa4, 0xcb, 0x93,
	0x9b, 0xb6, 0x17, 0xbc, 0xc8, 0xc7, 0xaa, 0xed, 0xc9, 0xd7, 0xd2, 0x59, 0x41, 0x00, 0xfd, 0x02,
	0x8c, 0x47, 0x10, 0x2d, 0x6a, 0x7b, 0xb2, 0xc0, 0x92, 0x98, 0xeb, 0xe9, 0xee, 0xb9, 0xfe, 0x04,
	0xd7, 0x50, 0xa5, 0x79, 0x15, 0x57, 0xda, 0xa6, 0xfb, 0x2a, 0xae, 0x98, 0x63, 0xa8, 0xbd, 0x82,
	0x66, 0x81, 0x7c, 0xdb, 0x6a, 0x08, 0xd5, 0xef, 0x26, 0x79, 0x91, 0xd7, 0xa2, 0x55, 0x45, 0xeb,
	0x3a, 0x0b, 0x08, 0x5e, 0xd7, 0xc1, 0x58, 0x24, 0x89, 0x81, 0x45, 0x89, 0x58, 0xc6, 0x5a, 0x7c,
	0x19, 0x6f, 0x10, 0xdf, 0x41, 0x94, 0xe2, 0x6a, 0x94, 0xc5, 0x1c, 0x0d, 0xda, 0x12, 0x2e, 0xff,
	0x36, 0x0a, 0x06, 0x59, 0x19, 0x78, 0x1f, 0x0c, 0x71, 0x1d, 0x84, 0x5d, 0x59, 0xba, 0xa5, 0x56,
	0x9d, 0xeb, 0xe9, 0xc3, 0x51, 0x6a, 0xc5, 0xaf, 0xff, 0xf8, 0xe7, 0xbb, 0x01, 0x0d, 0xce, 0x1a,
	0x14, 0xd7, 0xeb, 0xc4, 0xd7, 0x6d, 0x62, 0x24, 0xaa, 0x3e, 0xfc, 0x46, 0x01, 0x23, 0x91, 0xdc,
	0xc0, 0xf9, 0xc4, 0xe4, 0x71, 0x0d, 0x56, 0xcf, 0x65, 0xb9, 0x09, 0x18, 0x8b, 0x0c, 0xc6, 0x3c,
	0x9c, 0x4b, 0x87, 0xd1, 0x92, 0xaa, 0x5f, 0x15, 0x30, 0x19, 0x5f, 0xf7, 0xf0, 0xcd, 0xc4, 0x4a,
	0x29, 0x22, 0xa4, 0xea, 0x7d, 0x7a, 0x0b, 0x78, 0x1b, 0x0c, 0xde, 0x07, 0xf0, 0xfd, 0x74, 0x78,
	0x72, 0xe8, 0xf5, 0xe8, 0xe4, 0x7e, 0xfc, 0xe5, 0x3c, 0x80, 0xdf, 0x2b, 0x60, 0xac, 0x63, 0x85,
	0xc2, 0x0b, 0x89, 0x40, 0x92, 0x54, 0x47, 0x5d, 0xe8, 0xc7, 0x55, 0x00, 0x7e, 0x8b, 0x01, 0x5e,
	0x80, 0xc5, 0x74, 0xc0, 0x88, 0x07, 0xea, 0x5c, 0x4c, 0xe0, 0xef, 0x0a, 0x78, 0x3d, 0x65, 0xbb,
	0xc3, 0x95, 0xec, 0xca, 0x5d, 0x92, 0xa1, 0x5e, 0x3c, 0x5a, 0x90, 0x00, 0x7e, 0x99, 0x01, 0xbf,
	0x04, 0x57, 0xfa, 0x05, 0xae, 0xb7, 0xd4, 0x05, 0x3e, 0x53, 0x40, 0x3e, 0x6d, 0xc5, 0xc3, 0x64,
	0x3c, 0x19, 0x42, 0xa4, 0x5e, 0x3a, 0x62, 0x94, 0xa0, 0xb1, 0xcd, 0x68, 0x7c, 0x0c, 0x37, 0xd3,
	0x69, 0xb8, 0x0d, 0x47, 0x27, 0xbb, 0x7a, 0xa4, 0x33, 0x7a, 0xb9, 0xd9, 0x36, 0x3b, 0xf1, 0xe5,
	0xf4, 0x00, 0xfe, 0xa5, 0x80, 0x7c, 0xda, 0xd6, 0x4f, 0x21, 0x97, 0xa1, 0x4d, 0x29, 0xe4, 0xb2,
	0xa4, 0x45, 0xdb, 0x62, 0xe4, 0x3e, 0x82, 0x1f, 0xf6, 0x78, 0x0d, 0x61, 0x0e, 0x3d, 0x5a, 0xc7,
	0x59, 0xdc, 0x7e, 0x0e, 0xdf, 0x45, 0xfb, 0xee, 0x4e, 0x7b, 0x17, 0x09, 0x1a, 0x95, 0xf6, 0x2e,
	0x92, 0xc4, 0x46, 0xbb, 0xc2, 0xa0, 0xbf, 0x07, 0x2f, 0xf7, 0x18, 0xaf, 0x08, 0x74, 0x28, 0x46,
	0x49, 0xaf, 0xf8, 0x47, 0x05, 0x8c, 0xb6, 0xaf, 0x7c, 0x58, 0xec, 0xb1, 0x4d, 0x3a, 0x64, 0x47,
	0xbd, 0xd0, 0x87, 0xa7, 0x80, 0xba, 0xce, 0xa0, 0xbe, 0x0b, 0x57, 0xb3, 0x76, 0x4e, 0x18, 0xa7,
	0x53, 0x92, 0x80, 0x74, 0xfd, 0xda, 0xfe, 0x41, 0x41, 0x79, 0x72, 0x50, 0x50, 0xfe, 0x3e, 0x28,
	0x28, 0x0f, 0x0f, 0x0b, 0xb9, 0x27, 0x87, 0x85, 0xdc, 0x9f, 0x87, 0x85, 0xdc, 0x97, 0x8b, 0x35,
	0x9b, 0xde, 0x6a, 0x94, 0x4b, 0x15, 0xe2, 0x74, 0xe5, 0xbf, 0xd7, 0xaa, 0x40, 0x9b, 0x1e, 0x0e,
	0xca, 0x43, 0xec, 0x3f, 0xba, 0x95, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0x94, 0xa1, 0x1d, 0x47,
	0x10, 0x0f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Reporters queries all the staked reporters.
	Reporters(ctx context.Context, in *QueryReportersRequest, opts ...grpc.CallOption) (*QueryReportersResponse, error)
	// SelectorReporter queries the reporter of a selector.
	SelectorReporter(ctx context.Context, in *QuerySelectorReporterRequest, opts ...grpc.CallOption) (*QuerySelectorReporterResponse, error)
	// AllowedAmount queries the currently allowed amount to stake or unstake.
	AllowedAmount(ctx context.Context, in *QueryAllowedAmountRequest, opts ...grpc.CallOption) (*QueryAllowedAmountResponse, error)
	AllowedAmountExpiration(ctx context.Context, in *QueryAllowedAmountExpirationRequest, opts ...grpc.CallOption) (*QueryAllowedAmountExpirationResponse, error)
	// NumOfSelectorsByReporter queries the number of selectors by a reporter.
	NumOfSelectorsByReporter(ctx context.Context, in *QueryNumOfSelectorsByReporterRequest, opts ...grpc.CallOption) (*QueryNumOfSelectorsByReporterResponse, error)
	// SpaceAvailableByReporter queries the space available in a reporter.
	SpaceAvailableByReporter(ctx context.Context, in *QuerySpaceAvailableByReporterRequest, opts ...grpc.CallOption) (*QuerySpaceAvailableByReporterResponse, error)
	// AvailableTips queries the tips available for withdrawal for a given selector.
	AvailableTips(ctx context.Context, in *QueryAvailableTipsRequest, opts ...grpc.CallOption) (*QueryAvailableTipsResponse, error)
	// SelectionsTo queries the selections for a given selector.
	SelectionsTo(ctx context.Context, in *QuerySelectionsToRequest, opts ...grpc.CallOption) (*QuerySelectionsToResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/layer.reporter.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Reporters(ctx context.Context, in *QueryReportersRequest, opts ...grpc.CallOption) (*QueryReportersResponse, error) {
	out := new(QueryReportersResponse)
	err := c.cc.Invoke(ctx, "/layer.reporter.Query/Reporters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SelectorReporter(ctx context.Context, in *QuerySelectorReporterRequest, opts ...grpc.CallOption) (*QuerySelectorReporterResponse, error) {
	out := new(QuerySelectorReporterResponse)
	err := c.cc.Invoke(ctx, "/layer.reporter.Query/SelectorReporter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllowedAmount(ctx context.Context, in *QueryAllowedAmountRequest, opts ...grpc.CallOption) (*QueryAllowedAmountResponse, error) {
	out := new(QueryAllowedAmountResponse)
	err := c.cc.Invoke(ctx, "/layer.reporter.Query/AllowedAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllowedAmountExpiration(ctx context.Context, in *QueryAllowedAmountExpirationRequest, opts ...grpc.CallOption) (*QueryAllowedAmountExpirationResponse, error) {
	out := new(QueryAllowedAmountExpirationResponse)
	err := c.cc.Invoke(ctx, "/layer.reporter.Query/AllowedAmountExpiration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NumOfSelectorsByReporter(ctx context.Context, in *QueryNumOfSelectorsByReporterRequest, opts ...grpc.CallOption) (*QueryNumOfSelectorsByReporterResponse, error) {
	out := new(QueryNumOfSelectorsByReporterResponse)
	err := c.cc.Invoke(ctx, "/layer.reporter.Query/NumOfSelectorsByReporter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SpaceAvailableByReporter(ctx context.Context, in *QuerySpaceAvailableByReporterRequest, opts ...grpc.CallOption) (*QuerySpaceAvailableByReporterResponse, error) {
	out := new(QuerySpaceAvailableByReporterResponse)
	err := c.cc.Invoke(ctx, "/layer.reporter.Query/SpaceAvailableByReporter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AvailableTips(ctx context.Context, in *QueryAvailableTipsRequest, opts ...grpc.CallOption) (*QueryAvailableTipsResponse, error) {
	out := new(QueryAvailableTipsResponse)
	err := c.cc.Invoke(ctx, "/layer.reporter.Query/AvailableTips", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SelectionsTo(ctx context.Context, in *QuerySelectionsToRequest, opts ...grpc.CallOption) (*QuerySelectionsToResponse, error) {
	out := new(QuerySelectionsToResponse)
	err := c.cc.Invoke(ctx, "/layer.reporter.Query/SelectionsTo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Reporters queries all the staked reporters.
	Reporters(context.Context, *QueryReportersRequest) (*QueryReportersResponse, error)
	// SelectorReporter queries the reporter of a selector.
	SelectorReporter(context.Context, *QuerySelectorReporterRequest) (*QuerySelectorReporterResponse, error)
	// AllowedAmount queries the currently allowed amount to stake or unstake.
	AllowedAmount(context.Context, *QueryAllowedAmountRequest) (*QueryAllowedAmountResponse, error)
	AllowedAmountExpiration(context.Context, *QueryAllowedAmountExpirationRequest) (*QueryAllowedAmountExpirationResponse, error)
	// NumOfSelectorsByReporter queries the number of selectors by a reporter.
	NumOfSelectorsByReporter(context.Context, *QueryNumOfSelectorsByReporterRequest) (*QueryNumOfSelectorsByReporterResponse, error)
	// SpaceAvailableByReporter queries the space available in a reporter.
	SpaceAvailableByReporter(context.Context, *QuerySpaceAvailableByReporterRequest) (*QuerySpaceAvailableByReporterResponse, error)
	// AvailableTips queries the tips available for withdrawal for a given selector.
	AvailableTips(context.Context, *QueryAvailableTipsRequest) (*QueryAvailableTipsResponse, error)
	// SelectionsTo queries the selections for a given selector.
	SelectionsTo(context.Context, *QuerySelectionsToRequest) (*QuerySelectionsToResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Reporters(ctx context.Context, req *QueryReportersRequest) (*QueryReportersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reporters not implemented")
}
func (*UnimplementedQueryServer) SelectorReporter(ctx context.Context, req *QuerySelectorReporterRequest) (*QuerySelectorReporterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectorReporter not implemented")
}
func (*UnimplementedQueryServer) AllowedAmount(ctx context.Context, req *QueryAllowedAmountRequest) (*QueryAllowedAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllowedAmount not implemented")
}
func (*UnimplementedQueryServer) AllowedAmountExpiration(ctx context.Context, req *QueryAllowedAmountExpirationRequest) (*QueryAllowedAmountExpirationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllowedAmountExpiration not implemented")
}
func (*UnimplementedQueryServer) NumOfSelectorsByReporter(ctx context.Context, req *QueryNumOfSelectorsByReporterRequest) (*QueryNumOfSelectorsByReporterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NumOfSelectorsByReporter not implemented")
}
func (*UnimplementedQueryServer) SpaceAvailableByReporter(ctx context.Context, req *QuerySpaceAvailableByReporterRequest) (*QuerySpaceAvailableByReporterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpaceAvailableByReporter not implemented")
}
func (*UnimplementedQueryServer) AvailableTips(ctx context.Context, req *QueryAvailableTipsRequest) (*QueryAvailableTipsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AvailableTips not implemented")
}
func (*UnimplementedQueryServer) SelectionsTo(ctx context.Context, req *QuerySelectionsToRequest) (*QuerySelectionsToResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectionsTo not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.reporter.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Reporters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReportersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Reporters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.reporter.Query/Reporters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Reporters(ctx, req.(*QueryReportersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SelectorReporter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySelectorReporterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SelectorReporter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.reporter.Query/SelectorReporter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SelectorReporter(ctx, req.(*QuerySelectorReporterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllowedAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllowedAmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllowedAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.reporter.Query/AllowedAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllowedAmount(ctx, req.(*QueryAllowedAmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllowedAmountExpiration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllowedAmountExpirationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllowedAmountExpiration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.reporter.Query/AllowedAmountExpiration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllowedAmountExpiration(ctx, req.(*QueryAllowedAmountExpirationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NumOfSelectorsByReporter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNumOfSelectorsByReporterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NumOfSelectorsByReporter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.reporter.Query/NumOfSelectorsByReporter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NumOfSelectorsByReporter(ctx, req.(*QueryNumOfSelectorsByReporterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SpaceAvailableByReporter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySpaceAvailableByReporterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SpaceAvailableByReporter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.reporter.Query/SpaceAvailableByReporter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SpaceAvailableByReporter(ctx, req.(*QuerySpaceAvailableByReporterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AvailableTips_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAvailableTipsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AvailableTips(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.reporter.Query/AvailableTips",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AvailableTips(ctx, req.(*QueryAvailableTipsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SelectionsTo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySelectionsToRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SelectionsTo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.reporter.Query/SelectionsTo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SelectionsTo(ctx, req.(*QuerySelectionsToRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "layer.reporter.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Reporters",
			Handler:    _Query_Reporters_Handler,
		},
		{
			MethodName: "SelectorReporter",
			Handler:    _Query_SelectorReporter_Handler,
		},
		{
			MethodName: "AllowedAmount",
			Handler:    _Query_AllowedAmount_Handler,
		},
		{
			MethodName: "AllowedAmountExpiration",
			Handler:    _Query_AllowedAmountExpiration_Handler,
		},
		{
			MethodName: "NumOfSelectorsByReporter",
			Handler:    _Query_NumOfSelectorsByReporter_Handler,
		},
		{
			MethodName: "SpaceAvailableByReporter",
			Handler:    _Query_SpaceAvailableByReporter_Handler,
		},
		{
			MethodName: "AvailableTips",
			Handler:    _Query_AvailableTips_Handler,
		},
		{
			MethodName: "SelectionsTo",
			Handler:    _Query_SelectionsTo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "layer/reporter/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryReportersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReportersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReportersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Reporter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Reporter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Reporter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Power != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Power))
		i--
		dAtA[i] = 0x18
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryReportersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReportersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReportersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Reporters) > 0 {
		for iNdEx := len(m.Reporters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reporters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QuerySelectorReporterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySelectorReporterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySelectorReporterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SelectorAddress) > 0 {
		i -= len(m.SelectorAddress)
		copy(dAtA[i:], m.SelectorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SelectorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySelectorReporterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySelectorReporterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySelectorReporterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reporter) > 0 {
		i -= len(m.Reporter)
		copy(dAtA[i:], m.Reporter)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Reporter)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllowedAmountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllowedAmountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllowedAmountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAllowedAmountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllowedAmountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllowedAmountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.UnstakingAmount.Size()
		i -= size
		if _, err := m.UnstakingAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.StakingAmount.Size()
		i -= size
		if _, err := m.StakingAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllowedAmountExpirationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllowedAmountExpirationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllowedAmountExpirationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAllowedAmountExpirationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllowedAmountExpirationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllowedAmountExpirationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Expiration != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Expiration))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryNumOfSelectorsByReporterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNumOfSelectorsByReporterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNumOfSelectorsByReporterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReporterAddress) > 0 {
		i -= len(m.ReporterAddress)
		copy(dAtA[i:], m.ReporterAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ReporterAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryNumOfSelectorsByReporterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNumOfSelectorsByReporterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNumOfSelectorsByReporterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NumOfSelectors != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.NumOfSelectors))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QuerySpaceAvailableByReporterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySpaceAvailableByReporterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySpaceAvailableByReporterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReporterAddress) > 0 {
		i -= len(m.ReporterAddress)
		copy(dAtA[i:], m.ReporterAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ReporterAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySpaceAvailableByReporterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySpaceAvailableByReporterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySpaceAvailableByReporterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SpaceAvailable != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SpaceAvailable))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAvailableTipsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAvailableTipsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAvailableTipsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SelectorAddress) > 0 {
		i -= len(m.SelectorAddress)
		copy(dAtA[i:], m.SelectorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SelectorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAvailableTipsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAvailableTipsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAvailableTipsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.AvailableTips.Size()
		i -= size
		if _, err := m.AvailableTips.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QuerySelectionsToRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySelectionsToRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySelectionsToRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReporterAddress) > 0 {
		i -= len(m.ReporterAddress)
		copy(dAtA[i:], m.ReporterAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ReporterAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySelectionsToResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySelectionsToResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySelectionsToResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SelectionsTo) > 0 {
		for iNdEx := len(m.SelectionsTo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SelectionsTo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryReportersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *Reporter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Power != 0 {
		n += 1 + sovQuery(uint64(m.Power))
	}
	return n
}

func (m *QueryReportersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Reporters) > 0 {
		for _, e := range m.Reporters {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySelectorReporterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SelectorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySelectorReporterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Reporter)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllowedAmountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAllowedAmountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.StakingAmount.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.UnstakingAmount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllowedAmountExpirationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAllowedAmountExpirationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Expiration != 0 {
		n += 1 + sovQuery(uint64(m.Expiration))
	}
	return n
}

func (m *QueryNumOfSelectorsByReporterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReporterAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryNumOfSelectorsByReporterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NumOfSelectors != 0 {
		n += 1 + sovQuery(uint64(m.NumOfSelectors))
	}
	return n
}

func (m *QuerySpaceAvailableByReporterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReporterAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySpaceAvailableByReporterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SpaceAvailable != 0 {
		n += 1 + sovQuery(uint64(m.SpaceAvailable))
	}
	return n
}

func (m *QueryAvailableTipsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SelectorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAvailableTipsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AvailableTips.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QuerySelectionsToRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReporterAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySelectionsToResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SelectionsTo) > 0 {
		for _, e := range m.SelectionsTo {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReportersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReportersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReportersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Reporter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: reporter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: reporter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &OracleReporter{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReportersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReportersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReportersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reporters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reporters = append(m.Reporters, &Reporter{})
			if err := m.Reporters[len(m.Reporters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySelectorReporterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySelectorReporterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySelectorReporterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SelectorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySelectorReporterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySelectorReporterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySelectorReporterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reporter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reporter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllowedAmountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllowedAmountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllowedAmountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllowedAmountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllowedAmountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllowedAmountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StakingAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnstakingAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UnstakingAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllowedAmountExpirationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllowedAmountExpirationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllowedAmountExpirationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllowedAmountExpirationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllowedAmountExpirationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllowedAmountExpirationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiration", wireType)
			}
			m.Expiration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expiration |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNumOfSelectorsByReporterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNumOfSelectorsByReporterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNumOfSelectorsByReporterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReporterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReporterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNumOfSelectorsByReporterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNumOfSelectorsByReporterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNumOfSelectorsByReporterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumOfSelectors", wireType)
			}
			m.NumOfSelectors = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumOfSelectors |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySpaceAvailableByReporterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySpaceAvailableByReporterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySpaceAvailableByReporterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReporterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReporterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySpaceAvailableByReporterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySpaceAvailableByReporterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySpaceAvailableByReporterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceAvailable", wireType)
			}
			m.SpaceAvailable = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpaceAvailable |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAvailableTipsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAvailableTipsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAvailableTipsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SelectorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAvailableTipsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAvailableTipsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAvailableTipsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableTips", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AvailableTips.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySelectionsToRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySelectionsToRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySelectionsToRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReporterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReporterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySelectionsToResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySelectionsToResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySelectionsToResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectionsTo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SelectionsTo = append(m.SelectionsTo, &FormattedSelection{})
			if err := m.SelectionsTo[len(m.SelectionsTo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
