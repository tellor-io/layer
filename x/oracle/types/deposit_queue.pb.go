// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: layer/oracle/deposit_queue.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// aggregate struct to represent meta data of an aggregate report
type DepositQueue struct {
	// meta_id is the id of the querymeta iterator
	MetaId uint64 `protobuf:"varint,1,opt,name=meta_id,json=metaId,proto3" json:"meta_id,omitempty"`
	// timestamp is the timestamp of the aggregate report
	Timestamp uint64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// querydata
	Querydata string `protobuf:"bytes,3,opt,name=querydata,proto3" json:"querydata,omitempty"`
	// deposit_id
	DepositId uint64 `protobuf:"varint,4,opt,name=deposit_id,json=depositId,proto3" json:"deposit_id,omitempty"`
}

func (m *DepositQueue) Reset()         { *m = DepositQueue{} }
func (m *DepositQueue) String() string { return proto.CompactTextString(m) }
func (*DepositQueue) ProtoMessage()    {}
func (*DepositQueue) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa6fc73a494397b3, []int{0}
}
func (m *DepositQueue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DepositQueue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DepositQueue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DepositQueue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepositQueue.Merge(m, src)
}
func (m *DepositQueue) XXX_Size() int {
	return m.Size()
}
func (m *DepositQueue) XXX_DiscardUnknown() {
	xxx_messageInfo_DepositQueue.DiscardUnknown(m)
}

var xxx_messageInfo_DepositQueue proto.InternalMessageInfo

func (m *DepositQueue) GetMetaId() uint64 {
	if m != nil {
		return m.MetaId
	}
	return 0
}

func (m *DepositQueue) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *DepositQueue) GetQuerydata() string {
	if m != nil {
		return m.Querydata
	}
	return ""
}

func (m *DepositQueue) GetDepositId() uint64 {
	if m != nil {
		return m.DepositId
	}
	return 0
}

func init() {
	proto.RegisterType((*DepositQueue)(nil), "layer.oracle.DepositQueue")
}

func init() { proto.RegisterFile("layer/oracle/deposit_queue.proto", fileDescriptor_fa6fc73a494397b3) }

var fileDescriptor_fa6fc73a494397b3 = []byte{
	// 269 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x8f, 0xb1, 0x4e, 0xf3, 0x30,
	0x10, 0xc7, 0xe3, 0xef, 0xab, 0x8a, 0x6a, 0x75, 0x8a, 0x90, 0x88, 0x2a, 0x30, 0x11, 0x12, 0x52,
	0x19, 0x88, 0x07, 0xde, 0x00, 0x58, 0x3a, 0xd2, 0x91, 0x25, 0x72, 0xea, 0xc3, 0x58, 0x4a, 0x74,
	0xa9, 0x73, 0x91, 0xc8, 0xca, 0x13, 0xf0, 0x58, 0x8c, 0x1d, 0x19, 0x51, 0xf2, 0x22, 0x28, 0x76,
	0x4b, 0xc5, 0xe6, 0xfb, 0xff, 0x7f, 0xd6, 0xdd, 0x8f, 0xa7, 0xa5, 0xea, 0xc0, 0x49, 0x74, 0x6a,
	0x53, 0x82, 0xd4, 0x50, 0x63, 0x63, 0x29, 0xdf, 0xb6, 0xd0, 0x42, 0x56, 0x3b, 0x24, 0x8c, 0xe7,
	0x9e, 0xc8, 0x02, 0xb1, 0x38, 0x35, 0x68, 0xd0, 0x17, 0x72, 0x7c, 0x05, 0x66, 0x71, 0x69, 0x10,
	0x4d, 0x09, 0xd2, 0x4f, 0x45, 0xfb, 0x22, 0xc9, 0x56, 0xd0, 0x90, 0xaa, 0xea, 0x3d, 0x70, 0xfd,
	0x67, 0x8d, 0x32, 0xc6, 0x81, 0x51, 0x04, 0xb9, 0x83, 0x1a, 0x1d, 0x81, 0x0b, 0xd8, 0xd5, 0x3b,
	0xe3, 0xf3, 0xc7, 0x70, 0xc3, 0xd3, 0x78, 0x42, 0x7c, 0xc6, 0x4f, 0x2a, 0x20, 0x95, 0x5b, 0x9d,
	0xb0, 0x94, 0x2d, 0x27, 0xeb, 0xe9, 0x38, 0xae, 0x74, 0x7c, 0xce, 0x67, 0xbf, 0x3b, 0x92, 0x7f,
	0xbe, 0x3a, 0x06, 0x63, 0xbb, 0x6d, 0xc1, 0x75, 0x5a, 0x91, 0x4a, 0xfe, 0xa7, 0x6c, 0x39, 0x5b,
	0x1f, 0x83, 0xf8, 0x82, 0xf3, 0x83, 0xa8, 0xd5, 0xc9, 0x24, 0x7c, 0xde, 0x27, 0x2b, 0x7d, 0xff,
	0xf0, 0xd9, 0x0b, 0xb6, 0xeb, 0x05, 0xfb, 0xee, 0x05, 0xfb, 0x18, 0x44, 0xb4, 0x1b, 0x44, 0xf4,
	0x35, 0x88, 0xe8, 0xf9, 0xc6, 0x58, 0x7a, 0x6d, 0x8b, 0x6c, 0x83, 0x95, 0x24, 0x28, 0x4b, 0x74,
	0xb7, 0x16, 0x65, 0x50, 0x7b, 0x3b, 0xc8, 0x51, 0x57, 0x43, 0x53, 0x4c, 0xbd, 0xd0, 0xdd, 0x4f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x0e, 0x24, 0x4c, 0x59, 0x60, 0x01, 0x00, 0x00,
}

func (m *DepositQueue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DepositQueue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DepositQueue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DepositId != 0 {
		i = encodeVarintDepositQueue(dAtA, i, uint64(m.DepositId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Querydata) > 0 {
		i -= len(m.Querydata)
		copy(dAtA[i:], m.Querydata)
		i = encodeVarintDepositQueue(dAtA, i, uint64(len(m.Querydata)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Timestamp != 0 {
		i = encodeVarintDepositQueue(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x10
	}
	if m.MetaId != 0 {
		i = encodeVarintDepositQueue(dAtA, i, uint64(m.MetaId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintDepositQueue(dAtA []byte, offset int, v uint64) int {
	offset -= sovDepositQueue(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DepositQueue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MetaId != 0 {
		n += 1 + sovDepositQueue(uint64(m.MetaId))
	}
	if m.Timestamp != 0 {
		n += 1 + sovDepositQueue(uint64(m.Timestamp))
	}
	l = len(m.Querydata)
	if l > 0 {
		n += 1 + l + sovDepositQueue(uint64(l))
	}
	if m.DepositId != 0 {
		n += 1 + sovDepositQueue(uint64(m.DepositId))
	}
	return n
}

func sovDepositQueue(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDepositQueue(x uint64) (n int) {
	return sovDepositQueue(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DepositQueue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDepositQueue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DepositQueue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DepositQueue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaId", wireType)
			}
			m.MetaId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepositQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MetaId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepositQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Querydata", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepositQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDepositQueue
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDepositQueue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Querydata = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositId", wireType)
			}
			m.DepositId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepositQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DepositId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDepositQueue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDepositQueue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDepositQueue(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDepositQueue
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDepositQueue
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDepositQueue
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDepositQueue
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDepositQueue
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDepositQueue
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDepositQueue        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDepositQueue          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDepositQueue = fmt.Errorf("proto: unexpected end of group")
)
