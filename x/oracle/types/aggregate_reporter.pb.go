// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: layer/oracle/aggregate_reporter.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AggregateReporter struct {
	Reporter    string `protobuf:"bytes,1,opt,name=reporter,proto3" json:"reporter,omitempty"`
	Power       uint64 `protobuf:"varint,2,opt,name=power,proto3" json:"power,omitempty"`
	BlockNumber uint64 `protobuf:"varint,3,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
}

func (m *AggregateReporter) Reset()         { *m = AggregateReporter{} }
func (m *AggregateReporter) String() string { return proto.CompactTextString(m) }
func (*AggregateReporter) ProtoMessage()    {}
func (*AggregateReporter) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1d4f41be31c27a7, []int{0}
}
func (m *AggregateReporter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AggregateReporter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AggregateReporter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AggregateReporter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AggregateReporter.Merge(m, src)
}
func (m *AggregateReporter) XXX_Size() int {
	return m.Size()
}
func (m *AggregateReporter) XXX_DiscardUnknown() {
	xxx_messageInfo_AggregateReporter.DiscardUnknown(m)
}

var xxx_messageInfo_AggregateReporter proto.InternalMessageInfo

func (m *AggregateReporter) GetReporter() string {
	if m != nil {
		return m.Reporter
	}
	return ""
}

func (m *AggregateReporter) GetPower() uint64 {
	if m != nil {
		return m.Power
	}
	return 0
}

func (m *AggregateReporter) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

type RunningAggregate struct {
	Value           string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	CrossoverWeight uint64 `protobuf:"varint,2,opt,name=crossover_weight,json=crossoverWeight,proto3" json:"crossover_weight,omitempty"`
}

func (m *RunningAggregate) Reset()         { *m = RunningAggregate{} }
func (m *RunningAggregate) String() string { return proto.CompactTextString(m) }
func (*RunningAggregate) ProtoMessage()    {}
func (*RunningAggregate) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1d4f41be31c27a7, []int{1}
}
func (m *RunningAggregate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RunningAggregate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RunningAggregate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RunningAggregate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunningAggregate.Merge(m, src)
}
func (m *RunningAggregate) XXX_Size() int {
	return m.Size()
}
func (m *RunningAggregate) XXX_DiscardUnknown() {
	xxx_messageInfo_RunningAggregate.DiscardUnknown(m)
}

var xxx_messageInfo_RunningAggregate proto.InternalMessageInfo

func (m *RunningAggregate) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *RunningAggregate) GetCrossoverWeight() uint64 {
	if m != nil {
		return m.CrossoverWeight
	}
	return 0
}

func init() {
	proto.RegisterType((*AggregateReporter)(nil), "layer.oracle.AggregateReporter")
	proto.RegisterType((*RunningAggregate)(nil), "layer.oracle.RunningAggregate")
}

func init() {
	proto.RegisterFile("layer/oracle/aggregate_reporter.proto", fileDescriptor_c1d4f41be31c27a7)
}

var fileDescriptor_c1d4f41be31c27a7 = []byte{
	// 254 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x3c, 0x90, 0xbd, 0x4e, 0xc3, 0x30,
	0x14, 0x85, 0x63, 0xfe, 0x04, 0xa6, 0x12, 0xc5, 0x62, 0x88, 0x18, 0xac, 0x52, 0x09, 0xa9, 0x1d,
	0x48, 0x06, 0x9e, 0x00, 0xd8, 0x19, 0xc2, 0x80, 0xc4, 0x12, 0x39, 0xd1, 0x95, 0x13, 0xe1, 0xe6,
	0x46, 0x37, 0x4e, 0x4b, 0xdf, 0x82, 0xc7, 0x62, 0xcc, 0xc8, 0x88, 0x92, 0x17, 0x41, 0x75, 0x7e,
	0xc6, 0xf3, 0xf9, 0xf3, 0x3d, 0xd2, 0xe1, 0xf7, 0x46, 0xed, 0x81, 0x42, 0x24, 0x95, 0x1a, 0x08,
	0x95, 0xd6, 0x04, 0x5a, 0x59, 0x88, 0x09, 0x4a, 0x24, 0x0b, 0x14, 0x94, 0x84, 0x16, 0xc5, 0xcc,
	0x69, 0x41, 0xaf, 0x2d, 0x33, 0x7e, 0xfd, 0x34, 0x9a, 0xd1, 0x20, 0x8a, 0x5b, 0x7e, 0x3e, 0x7e,
	0xf2, 0xd9, 0x82, 0xad, 0x2e, 0xa2, 0x29, 0x8b, 0x1b, 0x7e, 0x5a, 0xe2, 0x0e, 0xc8, 0x3f, 0x5a,
	0xb0, 0xd5, 0x49, 0xd4, 0x07, 0x71, 0xc7, 0x67, 0x89, 0xc1, 0xf4, 0x33, 0x2e, 0xea, 0x4d, 0x02,
	0xe4, 0x1f, 0xbb, 0xc7, 0x4b, 0xc7, 0x5e, 0x1d, 0x5a, 0xbe, 0xf1, 0x79, 0x54, 0x17, 0x45, 0x5e,
	0xe8, 0xa9, 0xf0, 0x70, 0x6c, 0xab, 0x4c, 0x0d, 0x43, 0x4b, 0x1f, 0xc4, 0x9a, 0xcf, 0x53, 0xc2,
	0xaa, 0xc2, 0x2d, 0x50, 0xbc, 0x83, 0x5c, 0x67, 0x76, 0x68, 0xbb, 0x9a, 0xf8, 0xbb, 0xc3, 0xcf,
	0x2f, 0x3f, 0xad, 0x64, 0x4d, 0x2b, 0xd9, 0x5f, 0x2b, 0xd9, 0x77, 0x27, 0xbd, 0xa6, 0x93, 0xde,
	0x6f, 0x27, 0xbd, 0x8f, 0xb5, 0xce, 0x6d, 0x56, 0x27, 0x41, 0x8a, 0x9b, 0xd0, 0x82, 0x31, 0x48,
	0x0f, 0x39, 0x86, 0xfd, 0x44, 0x5f, 0xe3, 0x48, 0x76, 0x5f, 0x42, 0x95, 0x9c, 0xb9, 0x61, 0x1e,
	0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0xba, 0x22, 0x14, 0x46, 0x41, 0x01, 0x00, 0x00,
}

func (m *AggregateReporter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AggregateReporter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AggregateReporter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockNumber != 0 {
		i = encodeVarintAggregateReporter(dAtA, i, uint64(m.BlockNumber))
		i--
		dAtA[i] = 0x18
	}
	if m.Power != 0 {
		i = encodeVarintAggregateReporter(dAtA, i, uint64(m.Power))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Reporter) > 0 {
		i -= len(m.Reporter)
		copy(dAtA[i:], m.Reporter)
		i = encodeVarintAggregateReporter(dAtA, i, uint64(len(m.Reporter)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RunningAggregate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RunningAggregate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RunningAggregate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CrossoverWeight != 0 {
		i = encodeVarintAggregateReporter(dAtA, i, uint64(m.CrossoverWeight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintAggregateReporter(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAggregateReporter(dAtA []byte, offset int, v uint64) int {
	offset -= sovAggregateReporter(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AggregateReporter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Reporter)
	if l > 0 {
		n += 1 + l + sovAggregateReporter(uint64(l))
	}
	if m.Power != 0 {
		n += 1 + sovAggregateReporter(uint64(m.Power))
	}
	if m.BlockNumber != 0 {
		n += 1 + sovAggregateReporter(uint64(m.BlockNumber))
	}
	return n
}

func (m *RunningAggregate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovAggregateReporter(uint64(l))
	}
	if m.CrossoverWeight != 0 {
		n += 1 + sovAggregateReporter(uint64(m.CrossoverWeight))
	}
	return n
}

func sovAggregateReporter(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAggregateReporter(x uint64) (n int) {
	return sovAggregateReporter(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AggregateReporter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAggregateReporter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AggregateReporter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AggregateReporter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reporter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAggregateReporter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAggregateReporter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAggregateReporter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reporter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAggregateReporter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNumber", wireType)
			}
			m.BlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAggregateReporter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAggregateReporter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAggregateReporter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RunningAggregate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAggregateReporter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RunningAggregate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RunningAggregate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAggregateReporter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAggregateReporter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAggregateReporter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossoverWeight", wireType)
			}
			m.CrossoverWeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAggregateReporter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrossoverWeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAggregateReporter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAggregateReporter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAggregateReporter(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAggregateReporter
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAggregateReporter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAggregateReporter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAggregateReporter
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAggregateReporter
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAggregateReporter
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAggregateReporter        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAggregateReporter          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAggregateReporter = fmt.Errorf("proto: unexpected end of group")
)
