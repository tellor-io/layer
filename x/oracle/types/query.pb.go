// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: layer/oracle/query.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb27caa9d264c5c4, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb27caa9d264c5c4, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryMicroReportsResponse struct {
	MicroReports []MicroReport `protobuf:"bytes,1,rep,name=microReports,proto3" json:"microReports"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryMicroReportsResponse) Reset()         { *m = QueryMicroReportsResponse{} }
func (m *QueryMicroReportsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMicroReportsResponse) ProtoMessage()    {}
func (*QueryMicroReportsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb27caa9d264c5c4, []int{2}
}
func (m *QueryMicroReportsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMicroReportsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMicroReportsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMicroReportsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMicroReportsResponse.Merge(m, src)
}
func (m *QueryMicroReportsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMicroReportsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMicroReportsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMicroReportsResponse proto.InternalMessageInfo

func (m *QueryMicroReportsResponse) GetMicroReports() []MicroReport {
	if m != nil {
		return m.MicroReports
	}
	return nil
}

func (m *QueryMicroReportsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetReportsbyQidRequest struct {
	// query id of requested data
	QueryId string `protobuf:"bytes,1,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetReportsbyQidRequest) Reset()         { *m = QueryGetReportsbyQidRequest{} }
func (m *QueryGetReportsbyQidRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetReportsbyQidRequest) ProtoMessage()    {}
func (*QueryGetReportsbyQidRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb27caa9d264c5c4, []int{3}
}
func (m *QueryGetReportsbyQidRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetReportsbyQidRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetReportsbyQidRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetReportsbyQidRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetReportsbyQidRequest.Merge(m, src)
}
func (m *QueryGetReportsbyQidRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetReportsbyQidRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetReportsbyQidRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetReportsbyQidRequest proto.InternalMessageInfo

func (m *QueryGetReportsbyQidRequest) GetQueryId() string {
	if m != nil {
		return m.QueryId
	}
	return ""
}

func (m *QueryGetReportsbyQidRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetReportsbyReporterRequest struct {
	Reporter string `protobuf:"bytes,1,opt,name=reporter,proto3" json:"reporter,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetReportsbyReporterRequest) Reset()         { *m = QueryGetReportsbyReporterRequest{} }
func (m *QueryGetReportsbyReporterRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetReportsbyReporterRequest) ProtoMessage()    {}
func (*QueryGetReportsbyReporterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb27caa9d264c5c4, []int{4}
}
func (m *QueryGetReportsbyReporterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetReportsbyReporterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetReportsbyReporterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetReportsbyReporterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetReportsbyReporterRequest.Merge(m, src)
}
func (m *QueryGetReportsbyReporterRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetReportsbyReporterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetReportsbyReporterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetReportsbyReporterRequest proto.InternalMessageInfo

func (m *QueryGetReportsbyReporterRequest) GetReporter() string {
	if m != nil {
		return m.Reporter
	}
	return ""
}

func (m *QueryGetReportsbyReporterRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetReportsbyReporterQidRequest struct {
	Reporter string `protobuf:"bytes,1,opt,name=reporter,proto3" json:"reporter,omitempty"`
	QueryId  string `protobuf:"bytes,2,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetReportsbyReporterQidRequest) Reset()         { *m = QueryGetReportsbyReporterQidRequest{} }
func (m *QueryGetReportsbyReporterQidRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetReportsbyReporterQidRequest) ProtoMessage()    {}
func (*QueryGetReportsbyReporterQidRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb27caa9d264c5c4, []int{5}
}
func (m *QueryGetReportsbyReporterQidRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetReportsbyReporterQidRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetReportsbyReporterQidRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetReportsbyReporterQidRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetReportsbyReporterQidRequest.Merge(m, src)
}
func (m *QueryGetReportsbyReporterQidRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetReportsbyReporterQidRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetReportsbyReporterQidRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetReportsbyReporterQidRequest proto.InternalMessageInfo

func (m *QueryGetReportsbyReporterQidRequest) GetReporter() string {
	if m != nil {
		return m.Reporter
	}
	return ""
}

func (m *QueryGetReportsbyReporterQidRequest) GetQueryId() string {
	if m != nil {
		return m.QueryId
	}
	return ""
}

func (m *QueryGetReportsbyReporterQidRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetCurrentTipRequest struct {
	QueryData string `protobuf:"bytes,1,opt,name=query_data,json=queryData,proto3" json:"query_data,omitempty"`
}

func (m *QueryGetCurrentTipRequest) Reset()         { *m = QueryGetCurrentTipRequest{} }
func (m *QueryGetCurrentTipRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCurrentTipRequest) ProtoMessage()    {}
func (*QueryGetCurrentTipRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb27caa9d264c5c4, []int{6}
}
func (m *QueryGetCurrentTipRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCurrentTipRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCurrentTipRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCurrentTipRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCurrentTipRequest.Merge(m, src)
}
func (m *QueryGetCurrentTipRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCurrentTipRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCurrentTipRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCurrentTipRequest proto.InternalMessageInfo

func (m *QueryGetCurrentTipRequest) GetQueryData() string {
	if m != nil {
		return m.QueryData
	}
	return ""
}

type QueryGetCurrentTipResponse struct {
	Tips cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=tips,proto3,customtype=cosmossdk.io/math.Int" json:"tips"`
}

func (m *QueryGetCurrentTipResponse) Reset()         { *m = QueryGetCurrentTipResponse{} }
func (m *QueryGetCurrentTipResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCurrentTipResponse) ProtoMessage()    {}
func (*QueryGetCurrentTipResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb27caa9d264c5c4, []int{7}
}
func (m *QueryGetCurrentTipResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCurrentTipResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCurrentTipResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCurrentTipResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCurrentTipResponse.Merge(m, src)
}
func (m *QueryGetCurrentTipResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCurrentTipResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCurrentTipResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCurrentTipResponse proto.InternalMessageInfo

type QueryGetUserTipTotalRequest struct {
	Tipper string `protobuf:"bytes,1,opt,name=tipper,proto3" json:"tipper,omitempty"`
}

func (m *QueryGetUserTipTotalRequest) Reset()         { *m = QueryGetUserTipTotalRequest{} }
func (m *QueryGetUserTipTotalRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetUserTipTotalRequest) ProtoMessage()    {}
func (*QueryGetUserTipTotalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb27caa9d264c5c4, []int{8}
}
func (m *QueryGetUserTipTotalRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetUserTipTotalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetUserTipTotalRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetUserTipTotalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetUserTipTotalRequest.Merge(m, src)
}
func (m *QueryGetUserTipTotalRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetUserTipTotalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetUserTipTotalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetUserTipTotalRequest proto.InternalMessageInfo

func (m *QueryGetUserTipTotalRequest) GetTipper() string {
	if m != nil {
		return m.Tipper
	}
	return ""
}

type QueryGetUserTipTotalResponse struct {
	TotalTips cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=total_tips,json=totalTips,proto3,customtype=cosmossdk.io/math.Int" json:"total_tips"`
}

func (m *QueryGetUserTipTotalResponse) Reset()         { *m = QueryGetUserTipTotalResponse{} }
func (m *QueryGetUserTipTotalResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetUserTipTotalResponse) ProtoMessage()    {}
func (*QueryGetUserTipTotalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb27caa9d264c5c4, []int{9}
}
func (m *QueryGetUserTipTotalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetUserTipTotalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetUserTipTotalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetUserTipTotalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetUserTipTotalResponse.Merge(m, src)
}
func (m *QueryGetUserTipTotalResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetUserTipTotalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetUserTipTotalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetUserTipTotalResponse proto.InternalMessageInfo

type QueryGetDataBeforeRequest struct {
	QueryId   string `protobuf:"bytes,1,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	Timestamp uint64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *QueryGetDataBeforeRequest) Reset()         { *m = QueryGetDataBeforeRequest{} }
func (m *QueryGetDataBeforeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetDataBeforeRequest) ProtoMessage()    {}
func (*QueryGetDataBeforeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb27caa9d264c5c4, []int{10}
}
func (m *QueryGetDataBeforeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDataBeforeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDataBeforeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDataBeforeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDataBeforeRequest.Merge(m, src)
}
func (m *QueryGetDataBeforeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDataBeforeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDataBeforeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDataBeforeRequest proto.InternalMessageInfo

func (m *QueryGetDataBeforeRequest) GetQueryId() string {
	if m != nil {
		return m.QueryId
	}
	return ""
}

func (m *QueryGetDataBeforeRequest) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type QueryGetDataBeforeResponse struct {
	Aggregate *Aggregate `protobuf:"bytes,1,opt,name=aggregate,proto3" json:"aggregate,omitempty"`
	Timestamp uint64     `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *QueryGetDataBeforeResponse) Reset()         { *m = QueryGetDataBeforeResponse{} }
func (m *QueryGetDataBeforeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetDataBeforeResponse) ProtoMessage()    {}
func (*QueryGetDataBeforeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb27caa9d264c5c4, []int{11}
}
func (m *QueryGetDataBeforeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDataBeforeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDataBeforeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDataBeforeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDataBeforeResponse.Merge(m, src)
}
func (m *QueryGetDataBeforeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDataBeforeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDataBeforeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDataBeforeResponse proto.InternalMessageInfo

func (m *QueryGetDataBeforeResponse) GetAggregate() *Aggregate {
	if m != nil {
		return m.Aggregate
	}
	return nil
}

func (m *QueryGetDataBeforeResponse) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type QueryGetTimeBasedRewardsRequest struct {
}

func (m *QueryGetTimeBasedRewardsRequest) Reset()         { *m = QueryGetTimeBasedRewardsRequest{} }
func (m *QueryGetTimeBasedRewardsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTimeBasedRewardsRequest) ProtoMessage()    {}
func (*QueryGetTimeBasedRewardsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb27caa9d264c5c4, []int{12}
}
func (m *QueryGetTimeBasedRewardsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTimeBasedRewardsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTimeBasedRewardsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTimeBasedRewardsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTimeBasedRewardsRequest.Merge(m, src)
}
func (m *QueryGetTimeBasedRewardsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTimeBasedRewardsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTimeBasedRewardsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTimeBasedRewardsRequest proto.InternalMessageInfo

type QueryGetTimeBasedRewardsResponse struct {
	Reward types.Coin `protobuf:"bytes,1,opt,name=reward,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"reward"`
}

func (m *QueryGetTimeBasedRewardsResponse) Reset()         { *m = QueryGetTimeBasedRewardsResponse{} }
func (m *QueryGetTimeBasedRewardsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTimeBasedRewardsResponse) ProtoMessage()    {}
func (*QueryGetTimeBasedRewardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb27caa9d264c5c4, []int{13}
}
func (m *QueryGetTimeBasedRewardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTimeBasedRewardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTimeBasedRewardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTimeBasedRewardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTimeBasedRewardsResponse.Merge(m, src)
}
func (m *QueryGetTimeBasedRewardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTimeBasedRewardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTimeBasedRewardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTimeBasedRewardsResponse proto.InternalMessageInfo

func (m *QueryGetTimeBasedRewardsResponse) GetReward() types.Coin {
	if m != nil {
		return m.Reward
	}
	return types.Coin{}
}

type QueryCurrentCyclelistQueryRequest struct {
}

func (m *QueryCurrentCyclelistQueryRequest) Reset()         { *m = QueryCurrentCyclelistQueryRequest{} }
func (m *QueryCurrentCyclelistQueryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCurrentCyclelistQueryRequest) ProtoMessage()    {}
func (*QueryCurrentCyclelistQueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb27caa9d264c5c4, []int{14}
}
func (m *QueryCurrentCyclelistQueryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCurrentCyclelistQueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCurrentCyclelistQueryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCurrentCyclelistQueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCurrentCyclelistQueryRequest.Merge(m, src)
}
func (m *QueryCurrentCyclelistQueryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCurrentCyclelistQueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCurrentCyclelistQueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCurrentCyclelistQueryRequest proto.InternalMessageInfo

type QueryCurrentCyclelistQueryResponse struct {
	QueryData string     `protobuf:"bytes,1,opt,name=query_data,json=queryData,proto3" json:"query_data,omitempty"`
	QueryMeta *QueryMeta `protobuf:"bytes,2,opt,name=query_meta,json=queryMeta,proto3" json:"query_meta,omitempty"`
}

func (m *QueryCurrentCyclelistQueryResponse) Reset()         { *m = QueryCurrentCyclelistQueryResponse{} }
func (m *QueryCurrentCyclelistQueryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCurrentCyclelistQueryResponse) ProtoMessage()    {}
func (*QueryCurrentCyclelistQueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb27caa9d264c5c4, []int{15}
}
func (m *QueryCurrentCyclelistQueryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCurrentCyclelistQueryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCurrentCyclelistQueryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCurrentCyclelistQueryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCurrentCyclelistQueryResponse.Merge(m, src)
}
func (m *QueryCurrentCyclelistQueryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCurrentCyclelistQueryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCurrentCyclelistQueryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCurrentCyclelistQueryResponse proto.InternalMessageInfo

func (m *QueryCurrentCyclelistQueryResponse) GetQueryData() string {
	if m != nil {
		return m.QueryData
	}
	return ""
}

func (m *QueryCurrentCyclelistQueryResponse) GetQueryMeta() *QueryMeta {
	if m != nil {
		return m.QueryMeta
	}
	return nil
}

type QueryNextCyclelistQueryRequest struct {
}

func (m *QueryNextCyclelistQueryRequest) Reset()         { *m = QueryNextCyclelistQueryRequest{} }
func (m *QueryNextCyclelistQueryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryNextCyclelistQueryRequest) ProtoMessage()    {}
func (*QueryNextCyclelistQueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb27caa9d264c5c4, []int{16}
}
func (m *QueryNextCyclelistQueryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNextCyclelistQueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNextCyclelistQueryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNextCyclelistQueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNextCyclelistQueryRequest.Merge(m, src)
}
func (m *QueryNextCyclelistQueryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryNextCyclelistQueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNextCyclelistQueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNextCyclelistQueryRequest proto.InternalMessageInfo

type QueryNextCyclelistQueryResponse struct {
	QueryData string     `protobuf:"bytes,1,opt,name=query_data,json=queryData,proto3" json:"query_data,omitempty"`
	QueryMeta *QueryMeta `protobuf:"bytes,2,opt,name=query_meta,json=queryMeta,proto3" json:"query_meta,omitempty"`
}

func (m *QueryNextCyclelistQueryResponse) Reset()         { *m = QueryNextCyclelistQueryResponse{} }
func (m *QueryNextCyclelistQueryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryNextCyclelistQueryResponse) ProtoMessage()    {}
func (*QueryNextCyclelistQueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb27caa9d264c5c4, []int{17}
}
func (m *QueryNextCyclelistQueryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNextCyclelistQueryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNextCyclelistQueryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNextCyclelistQueryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNextCyclelistQueryResponse.Merge(m, src)
}
func (m *QueryNextCyclelistQueryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryNextCyclelistQueryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNextCyclelistQueryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNextCyclelistQueryResponse proto.InternalMessageInfo

func (m *QueryNextCyclelistQueryResponse) GetQueryData() string {
	if m != nil {
		return m.QueryData
	}
	return ""
}

func (m *QueryNextCyclelistQueryResponse) GetQueryMeta() *QueryMeta {
	if m != nil {
		return m.QueryMeta
	}
	return nil
}

type QueryRetrieveDataRequest struct {
	QueryId   string `protobuf:"bytes,1,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	Timestamp uint64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *QueryRetrieveDataRequest) Reset()         { *m = QueryRetrieveDataRequest{} }
func (m *QueryRetrieveDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRetrieveDataRequest) ProtoMessage()    {}
func (*QueryRetrieveDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb27caa9d264c5c4, []int{18}
}
func (m *QueryRetrieveDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRetrieveDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRetrieveDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRetrieveDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRetrieveDataRequest.Merge(m, src)
}
func (m *QueryRetrieveDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRetrieveDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRetrieveDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRetrieveDataRequest proto.InternalMessageInfo

func (m *QueryRetrieveDataRequest) GetQueryId() string {
	if m != nil {
		return m.QueryId
	}
	return ""
}

func (m *QueryRetrieveDataRequest) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type QueryRetrieveDataResponse struct {
	Aggregate *Aggregate `protobuf:"bytes,1,opt,name=aggregate,proto3" json:"aggregate,omitempty"`
}

func (m *QueryRetrieveDataResponse) Reset()         { *m = QueryRetrieveDataResponse{} }
func (m *QueryRetrieveDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRetrieveDataResponse) ProtoMessage()    {}
func (*QueryRetrieveDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb27caa9d264c5c4, []int{19}
}
func (m *QueryRetrieveDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRetrieveDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRetrieveDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRetrieveDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRetrieveDataResponse.Merge(m, src)
}
func (m *QueryRetrieveDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRetrieveDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRetrieveDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRetrieveDataResponse proto.InternalMessageInfo

func (m *QueryRetrieveDataResponse) GetAggregate() *Aggregate {
	if m != nil {
		return m.Aggregate
	}
	return nil
}

// QueryGetCurrentAggregateReportRequest is the request type for the Query/GetCurrentAggregateReport RPC method.
type QueryGetCurrentAggregateReportRequest struct {
	// query_id defines the query id hex string.
	QueryId string `protobuf:"bytes,1,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
}

func (m *QueryGetCurrentAggregateReportRequest) Reset()         { *m = QueryGetCurrentAggregateReportRequest{} }
func (m *QueryGetCurrentAggregateReportRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCurrentAggregateReportRequest) ProtoMessage()    {}
func (*QueryGetCurrentAggregateReportRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb27caa9d264c5c4, []int{20}
}
func (m *QueryGetCurrentAggregateReportRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCurrentAggregateReportRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCurrentAggregateReportRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCurrentAggregateReportRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCurrentAggregateReportRequest.Merge(m, src)
}
func (m *QueryGetCurrentAggregateReportRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCurrentAggregateReportRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCurrentAggregateReportRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCurrentAggregateReportRequest proto.InternalMessageInfo

func (m *QueryGetCurrentAggregateReportRequest) GetQueryId() string {
	if m != nil {
		return m.QueryId
	}
	return ""
}

// QueryGetCurrentAggregateReportResponse is the response type for the Query/GetCurrentAggregateReport RPC method.
type QueryGetCurrentAggregateReportResponse struct {
	// aggregate defines the current aggregate report.
	Aggregate *Aggregate `protobuf:"bytes,1,opt,name=aggregate,proto3" json:"aggregate,omitempty"`
	// timestamp defines the timestamp of the aggregate report.
	Timestamp uint64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *QueryGetCurrentAggregateReportResponse) Reset() {
	*m = QueryGetCurrentAggregateReportResponse{}
}
func (m *QueryGetCurrentAggregateReportResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCurrentAggregateReportResponse) ProtoMessage()    {}
func (*QueryGetCurrentAggregateReportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb27caa9d264c5c4, []int{21}
}
func (m *QueryGetCurrentAggregateReportResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCurrentAggregateReportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCurrentAggregateReportResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCurrentAggregateReportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCurrentAggregateReportResponse.Merge(m, src)
}
func (m *QueryGetCurrentAggregateReportResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCurrentAggregateReportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCurrentAggregateReportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCurrentAggregateReportResponse proto.InternalMessageInfo

func (m *QueryGetCurrentAggregateReportResponse) GetAggregate() *Aggregate {
	if m != nil {
		return m.Aggregate
	}
	return nil
}

func (m *QueryGetCurrentAggregateReportResponse) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// QueryGetAggregateBeforeByReporterRequest is the request type for the Query/GetAggregateBeforeByReporter RPC method.
type QueryGetAggregateBeforeByReporterRequest struct {
	// query_id defines the query id hex string.
	QueryId string `protobuf:"bytes,1,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	// timestamp defines the timestamp of the aggregate report.
	Timestamp uint64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// reporter defines the reporter address.
	Reporter string `protobuf:"bytes,3,opt,name=reporter,proto3" json:"reporter,omitempty"`
}

func (m *QueryGetAggregateBeforeByReporterRequest) Reset() {
	*m = QueryGetAggregateBeforeByReporterRequest{}
}
func (m *QueryGetAggregateBeforeByReporterRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAggregateBeforeByReporterRequest) ProtoMessage()    {}
func (*QueryGetAggregateBeforeByReporterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb27caa9d264c5c4, []int{22}
}
func (m *QueryGetAggregateBeforeByReporterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAggregateBeforeByReporterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAggregateBeforeByReporterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAggregateBeforeByReporterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAggregateBeforeByReporterRequest.Merge(m, src)
}
func (m *QueryGetAggregateBeforeByReporterRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAggregateBeforeByReporterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAggregateBeforeByReporterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAggregateBeforeByReporterRequest proto.InternalMessageInfo

func (m *QueryGetAggregateBeforeByReporterRequest) GetQueryId() string {
	if m != nil {
		return m.QueryId
	}
	return ""
}

func (m *QueryGetAggregateBeforeByReporterRequest) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *QueryGetAggregateBeforeByReporterRequest) GetReporter() string {
	if m != nil {
		return m.Reporter
	}
	return ""
}

// QueryGetAggregateBeforeByReporterResponse is the response type for the Query/GetAggregateBeforeByReporter RPC method.
type QueryGetAggregateBeforeByReporterResponse struct {
	// aggregate defines the aggregate report.
	Aggregate *Aggregate `protobuf:"bytes,1,opt,name=aggregate,proto3" json:"aggregate,omitempty"`
}

func (m *QueryGetAggregateBeforeByReporterResponse) Reset() {
	*m = QueryGetAggregateBeforeByReporterResponse{}
}
func (m *QueryGetAggregateBeforeByReporterResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetAggregateBeforeByReporterResponse) ProtoMessage() {}
func (*QueryGetAggregateBeforeByReporterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb27caa9d264c5c4, []int{23}
}
func (m *QueryGetAggregateBeforeByReporterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAggregateBeforeByReporterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAggregateBeforeByReporterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAggregateBeforeByReporterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAggregateBeforeByReporterResponse.Merge(m, src)
}
func (m *QueryGetAggregateBeforeByReporterResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAggregateBeforeByReporterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAggregateBeforeByReporterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAggregateBeforeByReporterResponse proto.InternalMessageInfo

func (m *QueryGetAggregateBeforeByReporterResponse) GetAggregate() *Aggregate {
	if m != nil {
		return m.Aggregate
	}
	return nil
}

// QueryGetQueryRequest is the request type for the Query/GetQuery RPC method.
type QueryGetQueryRequest struct {
	// query_id defines the query id hex string.
	QueryId string `protobuf:"bytes,1,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	// id defines the query id.
	Id uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetQueryRequest) Reset()         { *m = QueryGetQueryRequest{} }
func (m *QueryGetQueryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetQueryRequest) ProtoMessage()    {}
func (*QueryGetQueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb27caa9d264c5c4, []int{24}
}
func (m *QueryGetQueryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetQueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetQueryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetQueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetQueryRequest.Merge(m, src)
}
func (m *QueryGetQueryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetQueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetQueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetQueryRequest proto.InternalMessageInfo

func (m *QueryGetQueryRequest) GetQueryId() string {
	if m != nil {
		return m.QueryId
	}
	return ""
}

func (m *QueryGetQueryRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// QueryGetQueryResponse is the response type for the Query/GetQuery RPC method.
type QueryGetQueryResponse struct {
	// query defines the query.
	Query *QueryMeta `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
}

func (m *QueryGetQueryResponse) Reset()         { *m = QueryGetQueryResponse{} }
func (m *QueryGetQueryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetQueryResponse) ProtoMessage()    {}
func (*QueryGetQueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb27caa9d264c5c4, []int{25}
}
func (m *QueryGetQueryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetQueryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetQueryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetQueryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetQueryResponse.Merge(m, src)
}
func (m *QueryGetQueryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetQueryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetQueryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetQueryResponse proto.InternalMessageInfo

func (m *QueryGetQueryResponse) GetQuery() *QueryMeta {
	if m != nil {
		return m.Query
	}
	return nil
}

// QueryTippedQueriesRequest is the request type for the Query/TippedQueries RPC method.
type QueryTippedQueriesRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryTippedQueriesRequest) Reset()         { *m = QueryTippedQueriesRequest{} }
func (m *QueryTippedQueriesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTippedQueriesRequest) ProtoMessage()    {}
func (*QueryTippedQueriesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb27caa9d264c5c4, []int{26}
}
func (m *QueryTippedQueriesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTippedQueriesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTippedQueriesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTippedQueriesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTippedQueriesRequest.Merge(m, src)
}
func (m *QueryTippedQueriesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTippedQueriesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTippedQueriesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTippedQueriesRequest proto.InternalMessageInfo

func (m *QueryTippedQueriesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryTippedQueriesResponse is the response type for the Query/TippedQueries RPC method.
type QueryTippedQueriesResponse struct {
	// queries defines the tipped queries.
	Queries []*QueryMeta `protobuf:"bytes,1,rep,name=queries,proto3" json:"queries,omitempty"`
}

func (m *QueryTippedQueriesResponse) Reset()         { *m = QueryTippedQueriesResponse{} }
func (m *QueryTippedQueriesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTippedQueriesResponse) ProtoMessage()    {}
func (*QueryTippedQueriesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb27caa9d264c5c4, []int{27}
}
func (m *QueryTippedQueriesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTippedQueriesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTippedQueriesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTippedQueriesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTippedQueriesResponse.Merge(m, src)
}
func (m *QueryTippedQueriesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTippedQueriesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTippedQueriesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTippedQueriesResponse proto.InternalMessageInfo

func (m *QueryTippedQueriesResponse) GetQueries() []*QueryMeta {
	if m != nil {
		return m.Queries
	}
	return nil
}

type QueryGetReportsByAggregateRequest struct {
	QueryId    string             `protobuf:"bytes,1,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	Timestamp  uint64             `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetReportsByAggregateRequest) Reset()         { *m = QueryGetReportsByAggregateRequest{} }
func (m *QueryGetReportsByAggregateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetReportsByAggregateRequest) ProtoMessage()    {}
func (*QueryGetReportsByAggregateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb27caa9d264c5c4, []int{28}
}
func (m *QueryGetReportsByAggregateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetReportsByAggregateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetReportsByAggregateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetReportsByAggregateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetReportsByAggregateRequest.Merge(m, src)
}
func (m *QueryGetReportsByAggregateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetReportsByAggregateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetReportsByAggregateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetReportsByAggregateRequest proto.InternalMessageInfo

func (m *QueryGetReportsByAggregateRequest) GetQueryId() string {
	if m != nil {
		return m.QueryId
	}
	return ""
}

func (m *QueryGetReportsByAggregateRequest) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *QueryGetReportsByAggregateRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetReportsByAggregateResponse struct {
	MicroReports []MicroReport       `protobuf:"bytes,1,rep,name=microReports,proto3" json:"microReports"`
	Pagination   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetReportsByAggregateResponse) Reset()         { *m = QueryGetReportsByAggregateResponse{} }
func (m *QueryGetReportsByAggregateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetReportsByAggregateResponse) ProtoMessage()    {}
func (*QueryGetReportsByAggregateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb27caa9d264c5c4, []int{29}
}
func (m *QueryGetReportsByAggregateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetReportsByAggregateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetReportsByAggregateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetReportsByAggregateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetReportsByAggregateResponse.Merge(m, src)
}
func (m *QueryGetReportsByAggregateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetReportsByAggregateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetReportsByAggregateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetReportsByAggregateResponse proto.InternalMessageInfo

func (m *QueryGetReportsByAggregateResponse) GetMicroReports() []MicroReport {
	if m != nil {
		return m.MicroReports
	}
	return nil
}

func (m *QueryGetReportsByAggregateResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetCurrentQueryByQueryIdRequest struct {
	QueryId string `protobuf:"bytes,1,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
}

func (m *QueryGetCurrentQueryByQueryIdRequest) Reset()         { *m = QueryGetCurrentQueryByQueryIdRequest{} }
func (m *QueryGetCurrentQueryByQueryIdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCurrentQueryByQueryIdRequest) ProtoMessage()    {}
func (*QueryGetCurrentQueryByQueryIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb27caa9d264c5c4, []int{30}
}
func (m *QueryGetCurrentQueryByQueryIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCurrentQueryByQueryIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCurrentQueryByQueryIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCurrentQueryByQueryIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCurrentQueryByQueryIdRequest.Merge(m, src)
}
func (m *QueryGetCurrentQueryByQueryIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCurrentQueryByQueryIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCurrentQueryByQueryIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCurrentQueryByQueryIdRequest proto.InternalMessageInfo

func (m *QueryGetCurrentQueryByQueryIdRequest) GetQueryId() string {
	if m != nil {
		return m.QueryId
	}
	return ""
}

type QueryGetCurrentQueryByQueryIdResponse struct {
	Query *QueryMeta `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
}

func (m *QueryGetCurrentQueryByQueryIdResponse) Reset()         { *m = QueryGetCurrentQueryByQueryIdResponse{} }
func (m *QueryGetCurrentQueryByQueryIdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCurrentQueryByQueryIdResponse) ProtoMessage()    {}
func (*QueryGetCurrentQueryByQueryIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb27caa9d264c5c4, []int{31}
}
func (m *QueryGetCurrentQueryByQueryIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCurrentQueryByQueryIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCurrentQueryByQueryIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCurrentQueryByQueryIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCurrentQueryByQueryIdResponse.Merge(m, src)
}
func (m *QueryGetCurrentQueryByQueryIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCurrentQueryByQueryIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCurrentQueryByQueryIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCurrentQueryByQueryIdResponse proto.InternalMessageInfo

func (m *QueryGetCurrentQueryByQueryIdResponse) GetQuery() *QueryMeta {
	if m != nil {
		return m.Query
	}
	return nil
}

type QueryReportedIdsByReporterRequest struct {
	ReporterAddress string             `protobuf:"bytes,1,opt,name=reporter_address,json=reporterAddress,proto3" json:"reporter_address,omitempty"`
	Pagination      *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryReportedIdsByReporterRequest) Reset()         { *m = QueryReportedIdsByReporterRequest{} }
func (m *QueryReportedIdsByReporterRequest) String() string { return proto.CompactTextString(m) }
func (*QueryReportedIdsByReporterRequest) ProtoMessage()    {}
func (*QueryReportedIdsByReporterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb27caa9d264c5c4, []int{32}
}
func (m *QueryReportedIdsByReporterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReportedIdsByReporterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReportedIdsByReporterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReportedIdsByReporterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReportedIdsByReporterRequest.Merge(m, src)
}
func (m *QueryReportedIdsByReporterRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryReportedIdsByReporterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReportedIdsByReporterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReportedIdsByReporterRequest proto.InternalMessageInfo

func (m *QueryReportedIdsByReporterRequest) GetReporterAddress() string {
	if m != nil {
		return m.ReporterAddress
	}
	return ""
}

func (m *QueryReportedIdsByReporterRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryReportedIdsByReporterResponse struct {
	Ids        []uint64            `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	QueryIds   [][]byte            `protobuf:"bytes,2,rep,name=query_ids,json=queryIds,proto3" json:"query_ids,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryReportedIdsByReporterResponse) Reset()         { *m = QueryReportedIdsByReporterResponse{} }
func (m *QueryReportedIdsByReporterResponse) String() string { return proto.CompactTextString(m) }
func (*QueryReportedIdsByReporterResponse) ProtoMessage()    {}
func (*QueryReportedIdsByReporterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb27caa9d264c5c4, []int{33}
}
func (m *QueryReportedIdsByReporterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReportedIdsByReporterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReportedIdsByReporterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReportedIdsByReporterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReportedIdsByReporterResponse.Merge(m, src)
}
func (m *QueryReportedIdsByReporterResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryReportedIdsByReporterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReportedIdsByReporterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReportedIdsByReporterResponse proto.InternalMessageInfo

func (m *QueryReportedIdsByReporterResponse) GetIds() []uint64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *QueryReportedIdsByReporterResponse) GetQueryIds() [][]byte {
	if m != nil {
		return m.QueryIds
	}
	return nil
}

func (m *QueryReportedIdsByReporterResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "layer.oracle.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "layer.oracle.QueryParamsResponse")
	proto.RegisterType((*QueryMicroReportsResponse)(nil), "layer.oracle.QueryMicroReportsResponse")
	proto.RegisterType((*QueryGetReportsbyQidRequest)(nil), "layer.oracle.QueryGetReportsbyQidRequest")
	proto.RegisterType((*QueryGetReportsbyReporterRequest)(nil), "layer.oracle.QueryGetReportsbyReporterRequest")
	proto.RegisterType((*QueryGetReportsbyReporterQidRequest)(nil), "layer.oracle.QueryGetReportsbyReporterQidRequest")
	proto.RegisterType((*QueryGetCurrentTipRequest)(nil), "layer.oracle.QueryGetCurrentTipRequest")
	proto.RegisterType((*QueryGetCurrentTipResponse)(nil), "layer.oracle.QueryGetCurrentTipResponse")
	proto.RegisterType((*QueryGetUserTipTotalRequest)(nil), "layer.oracle.QueryGetUserTipTotalRequest")
	proto.RegisterType((*QueryGetUserTipTotalResponse)(nil), "layer.oracle.QueryGetUserTipTotalResponse")
	proto.RegisterType((*QueryGetDataBeforeRequest)(nil), "layer.oracle.QueryGetDataBeforeRequest")
	proto.RegisterType((*QueryGetDataBeforeResponse)(nil), "layer.oracle.QueryGetDataBeforeResponse")
	proto.RegisterType((*QueryGetTimeBasedRewardsRequest)(nil), "layer.oracle.QueryGetTimeBasedRewardsRequest")
	proto.RegisterType((*QueryGetTimeBasedRewardsResponse)(nil), "layer.oracle.QueryGetTimeBasedRewardsResponse")
	proto.RegisterType((*QueryCurrentCyclelistQueryRequest)(nil), "layer.oracle.QueryCurrentCyclelistQueryRequest")
	proto.RegisterType((*QueryCurrentCyclelistQueryResponse)(nil), "layer.oracle.QueryCurrentCyclelistQueryResponse")
	proto.RegisterType((*QueryNextCyclelistQueryRequest)(nil), "layer.oracle.QueryNextCyclelistQueryRequest")
	proto.RegisterType((*QueryNextCyclelistQueryResponse)(nil), "layer.oracle.QueryNextCyclelistQueryResponse")
	proto.RegisterType((*QueryRetrieveDataRequest)(nil), "layer.oracle.QueryRetrieveDataRequest")
	proto.RegisterType((*QueryRetrieveDataResponse)(nil), "layer.oracle.QueryRetrieveDataResponse")
	proto.RegisterType((*QueryGetCurrentAggregateReportRequest)(nil), "layer.oracle.QueryGetCurrentAggregateReportRequest")
	proto.RegisterType((*QueryGetCurrentAggregateReportResponse)(nil), "layer.oracle.QueryGetCurrentAggregateReportResponse")
	proto.RegisterType((*QueryGetAggregateBeforeByReporterRequest)(nil), "layer.oracle.QueryGetAggregateBeforeByReporterRequest")
	proto.RegisterType((*QueryGetAggregateBeforeByReporterResponse)(nil), "layer.oracle.QueryGetAggregateBeforeByReporterResponse")
	proto.RegisterType((*QueryGetQueryRequest)(nil), "layer.oracle.QueryGetQueryRequest")
	proto.RegisterType((*QueryGetQueryResponse)(nil), "layer.oracle.QueryGetQueryResponse")
	proto.RegisterType((*QueryTippedQueriesRequest)(nil), "layer.oracle.QueryTippedQueriesRequest")
	proto.RegisterType((*QueryTippedQueriesResponse)(nil), "layer.oracle.QueryTippedQueriesResponse")
	proto.RegisterType((*QueryGetReportsByAggregateRequest)(nil), "layer.oracle.QueryGetReportsByAggregateRequest")
	proto.RegisterType((*QueryGetReportsByAggregateResponse)(nil), "layer.oracle.QueryGetReportsByAggregateResponse")
	proto.RegisterType((*QueryGetCurrentQueryByQueryIdRequest)(nil), "layer.oracle.QueryGetCurrentQueryByQueryIdRequest")
	proto.RegisterType((*QueryGetCurrentQueryByQueryIdResponse)(nil), "layer.oracle.QueryGetCurrentQueryByQueryIdResponse")
	proto.RegisterType((*QueryReportedIdsByReporterRequest)(nil), "layer.oracle.QueryReportedIdsByReporterRequest")
	proto.RegisterType((*QueryReportedIdsByReporterResponse)(nil), "layer.oracle.QueryReportedIdsByReporterResponse")
}

func init() { proto.RegisterFile("layer/oracle/query.proto", fileDescriptor_bb27caa9d264c5c4) }

var fileDescriptor_bb27caa9d264c5c4 = []byte{
	// 1760 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x99, 0xdf, 0x6f, 0x1b, 0xc5,
	0x16, 0xc7, 0xb3, 0x49, 0x9a, 0x9b, 0x9c, 0xa6, 0xb7, 0xbd, 0xd3, 0xa4, 0x4d, 0xdc, 0xd4, 0x49,
	0xb6, 0xf7, 0xe6, 0xd7, 0x6d, 0xbc, 0xcd, 0x8f, 0xa6, 0x02, 0xaa, 0xb6, 0x71, 0x4a, 0x43, 0x40,
	0xd0, 0xd6, 0x04, 0x1e, 0x2a, 0x90, 0xb5, 0xf6, 0x0e, 0xee, 0x52, 0xdb, 0xeb, 0xec, 0x4e, 0x4a,
	0xac, 0x28, 0xa2, 0xe2, 0x81, 0x17, 0x24, 0x84, 0x40, 0x42, 0x42, 0xe2, 0x81, 0x07, 0x2a, 0x4a,
	0xc5, 0x03, 0x02, 0x5e, 0x79, 0xa6, 0x12, 0x42, 0x54, 0xf0, 0x82, 0x78, 0x28, 0xa8, 0x45, 0xe2,
	0x0f, 0xe0, 0x1f, 0x40, 0x3b, 0x73, 0xc6, 0xde, 0xb5, 0x67, 0x37, 0x6e, 0xd2, 0x4a, 0xbc, 0xb4,
	0xbb, 0x33, 0xe7, 0xcc, 0x7c, 0xe6, 0xcc, 0x99, 0x33, 0xfb, 0x8d, 0x61, 0xa0, 0x68, 0x56, 0xa9,
	0x6b, 0x38, 0xae, 0x99, 0x2f, 0x52, 0x63, 0x6d, 0x9d, 0xba, 0xd5, 0x54, 0xc5, 0x75, 0x98, 0x43,
	0x7a, 0x79, 0x4f, 0x4a, 0xf4, 0x24, 0xfe, 0x63, 0x96, 0xec, 0xb2, 0x63, 0xf0, 0x7f, 0x85, 0x41,
	0x62, 0x2a, 0xef, 0x78, 0x25, 0xc7, 0x33, 0x72, 0xa6, 0x87, 0x9e, 0xc6, 0xf5, 0x99, 0x1c, 0x65,
	0xe6, 0x8c, 0x51, 0x31, 0x0b, 0x76, 0xd9, 0x64, 0xb6, 0x53, 0x46, 0xdb, 0x64, 0xd0, 0x56, 0x5a,
	0xe5, 0x1d, 0x5b, 0xf6, 0x0f, 0x8a, 0xfe, 0x2c, 0x7f, 0x33, 0xc4, 0x0b, 0x76, 0xf5, 0x15, 0x9c,
	0x82, 0x23, 0xda, 0xfd, 0x27, 0x6c, 0x1d, 0x2a, 0x38, 0x4e, 0xa1, 0x48, 0x0d, 0xb3, 0x62, 0x1b,
	0x66, 0xb9, 0xec, 0x30, 0x3e, 0x9b, 0xf4, 0x19, 0x0a, 0xad, 0xca, 0x2c, 0x14, 0x5c, 0x5a, 0x30,
	0x19, 0xc5, 0xde, 0xe1, 0x50, 0x6f, 0xc9, 0xce, 0xbb, 0x4e, 0xd6, 0xa5, 0x15, 0xc7, 0x65, 0x92,
	0x26, 0x64, 0x50, 0x31, 0x5d, 0xb3, 0x24, 0x47, 0x3e, 0xda, 0x1c, 0xaf, 0x6c, 0x89, 0x32, 0x13,
	0xbb, 0x13, 0xa1, 0x6e, 0x31, 0xa8, 0x74, 0x3d, 0x1c, 0xea, 0x63, 0x76, 0x45, 0x76, 0x1c, 0x09,
	0x75, 0xac, 0x7b, 0xd4, 0xcd, 0x32, 0xbb, 0x22, 0x3a, 0xf5, 0x3e, 0x20, 0x97, 0xfd, 0x59, 0x2e,
	0x71, 0x8a, 0x0c, 0x5d, 0x5b, 0xa7, 0x1e, 0xd3, 0x57, 0xe0, 0x60, 0xa8, 0xd5, 0xab, 0x38, 0x65,
	0x8f, 0x92, 0x59, 0xe8, 0x12, 0xb4, 0x03, 0xda, 0x88, 0x36, 0xb1, 0x77, 0xb6, 0x2f, 0x15, 0xdc,
	0xc4, 0x94, 0xb0, 0x4e, 0x77, 0xde, 0xb9, 0x37, 0xdc, 0x96, 0x41, 0x4b, 0xfd, 0x73, 0x0d, 0x06,
	0xf9, 0x58, 0xcf, 0xfb, 0x81, 0xc8, 0x08, 0xe4, 0xda, 0x88, 0x4b, 0xd0, 0x5b, 0x0a, 0xb4, 0x0f,
	0x68, 0x23, 0x1d, 0x13, 0x7b, 0x67, 0x07, 0xc3, 0xe3, 0x06, 0x3c, 0x71, 0xf0, 0x90, 0x13, 0x59,
	0x06, 0xa8, 0x67, 0xc4, 0x40, 0x3b, 0x47, 0x1b, 0x4f, 0xe1, 0x2e, 0xfb, 0x29, 0x91, 0x12, 0x89,
	0x87, 0x89, 0x91, 0xba, 0x64, 0x16, 0xa8, 0x24, 0xc8, 0x04, 0x5c, 0xf5, 0x1b, 0x1a, 0x1c, 0xe1,
	0xac, 0xcb, 0x94, 0xe1, 0xe0, 0xb9, 0xea, 0x65, 0xdb, 0xc2, 0xb0, 0x90, 0x41, 0xe8, 0x16, 0x5b,
	0x62, 0x5b, 0x3c, 0x02, 0x3d, 0x99, 0x7f, 0xf1, 0xf7, 0x15, 0x8b, 0x5c, 0x50, 0x30, 0x8c, 0x6d,
	0xcb, 0xc0, 0x87, 0x0d, 0x21, 0xbc, 0xad, 0xc1, 0x48, 0x13, 0x82, 0x78, 0xa0, 0xae, 0xe4, 0x48,
	0x40, 0xb7, 0x8b, 0x4d, 0xc8, 0x51, 0x7b, 0x7f, 0x64, 0x20, 0x9f, 0x6a, 0x70, 0x2c, 0x12, 0x24,
	0x10, 0x93, 0x38, 0x96, 0x60, 0xbc, 0xda, 0xe3, 0xe2, 0xd5, 0xb1, 0x63, 0xcc, 0x27, 0x31, 0xbb,
	0x96, 0x29, 0x5b, 0x5a, 0x77, 0x5d, 0x5a, 0x66, 0xab, 0x76, 0x45, 0xb2, 0x1d, 0x05, 0x10, 0xf3,
	0x5b, 0x26, 0x33, 0x91, 0xae, 0x87, 0xb7, 0x9c, 0x37, 0x99, 0xa9, 0xbf, 0x0a, 0x09, 0x95, 0x2f,
	0xa6, 0xe6, 0x59, 0xe8, 0xf4, 0x0f, 0x91, 0x70, 0x4b, 0xff, 0xdf, 0xcf, 0xbb, 0x5f, 0xef, 0x0d,
	0xf7, 0x0b, 0x44, 0xcf, 0xba, 0x96, 0xb2, 0x1d, 0xa3, 0x64, 0xb2, 0xab, 0xa9, 0x95, 0x32, 0xfb,
	0xe9, 0x9b, 0x69, 0x40, 0xf6, 0x95, 0x32, 0xcb, 0x70, 0x47, 0xfd, 0x64, 0x3d, 0x99, 0x5e, 0xf2,
	0xa8, 0xbb, 0x6a, 0x57, 0x56, 0x1d, 0x66, 0x16, 0x25, 0xdc, 0x21, 0xe8, 0x62, 0x76, 0xa5, 0x52,
	0x0b, 0x1b, 0xbe, 0xe9, 0xaf, 0xc3, 0x90, 0xda, 0x0d, 0xb9, 0x9e, 0x05, 0x60, 0x7e, 0x43, 0x76,
	0xa7, 0x74, 0x3d, 0xdc, 0x7d, 0xd5, 0x47, 0x5c, 0xad, 0x47, 0xcf, 0x8f, 0x48, 0x9a, 0xbe, 0xe6,
	0xb8, 0xb4, 0x85, 0x6c, 0x1f, 0x82, 0x1e, 0x66, 0x97, 0xa8, 0xc7, 0xcc, 0x52, 0x85, 0xef, 0x6c,
	0x67, 0xa6, 0xde, 0xa0, 0xaf, 0xd5, 0xe3, 0x1a, 0x1c, 0x15, 0xf9, 0x4f, 0x42, 0x4f, 0xad, 0x62,
	0x62, 0x1d, 0x39, 0x1c, 0x3e, 0xef, 0x8b, 0xb2, 0x3b, 0x53, 0xb7, 0xdc, 0x66, 0xca, 0x51, 0x18,
	0x96, 0x53, 0xae, 0xda, 0x25, 0x9a, 0x36, 0x3d, 0x6a, 0x65, 0xe8, 0x1b, 0xa6, 0x6b, 0xd5, 0x6a,
	0xda, 0x3b, 0x81, 0x93, 0xd5, 0x6c, 0x83, 0x70, 0x05, 0xe8, 0x72, 0x79, 0x13, 0x92, 0x0d, 0x86,
	0x52, 0x52, 0x26, 0xe3, 0x92, 0x63, 0x97, 0xd3, 0xf3, 0x7e, 0xcc, 0x6f, 0xff, 0x36, 0x3c, 0x5e,
	0xb0, 0xd9, 0xd5, 0xf5, 0x5c, 0x2a, 0xef, 0x94, 0xf0, 0x66, 0xc1, 0xff, 0xa6, 0x3d, 0xeb, 0x9a,
	0xc1, 0xaa, 0x15, 0xea, 0x71, 0x87, 0x5b, 0x7f, 0x7e, 0x39, 0xa5, 0x65, 0x70, 0x78, 0xfd, 0x18,
	0x8c, 0x72, 0x18, 0x4c, 0xbc, 0xa5, 0x6a, 0xbe, 0x48, 0x8b, 0xb6, 0xc7, 0x78, 0xa3, 0x44, 0xde,
	0x04, 0x3d, 0xce, 0x08, 0x99, 0xe3, 0xb3, 0x9c, 0x2c, 0xc8, 0x6e, 0xff, 0x1e, 0xc1, 0x82, 0xd0,
	0x10, 0x70, 0x51, 0x9f, 0x29, 0x33, 0xd1, 0xcf, 0x7f, 0xd4, 0x47, 0x20, 0xc9, 0xdb, 0x5f, 0xa0,
	0x1b, 0x11, 0x78, 0x1b, 0x18, 0x74, 0x95, 0xc5, 0xe3, 0x65, 0x7b, 0x11, 0x06, 0x70, 0x1e, 0xe6,
	0xda, 0xf4, 0x3a, 0xf5, 0x07, 0xdb, 0x75, 0xda, 0x66, 0xf0, 0x30, 0x84, 0x07, 0xdd, 0x55, 0xd6,
	0xea, 0x69, 0xf8, 0x5f, 0x43, 0x89, 0xa9, 0x9b, 0xf1, 0x2a, 0xb9, 0x3d, 0xb5, 0xbe, 0x05, 0x63,
	0xdb, 0x8d, 0xf1, 0x38, 0x8f, 0xd6, 0x9b, 0x30, 0x21, 0xa7, 0xaf, 0x79, 0x8b, 0x23, 0x9d, 0x6e,
	0xba, 0x98, 0x76, 0x1a, 0xfb, 0xd0, 0x2d, 0xd2, 0x11, 0xbe, 0x45, 0xf4, 0x1c, 0x4c, 0xb6, 0x00,
	0xb0, 0xbb, 0x7d, 0x5a, 0x84, 0x3e, 0x39, 0x47, 0x30, 0xc5, 0xe3, 0x16, 0xf4, 0x6f, 0x68, 0xc7,
	0x6b, 0xad, 0x33, 0xd3, 0x6e, 0x5b, 0xfa, 0x05, 0xe8, 0x6f, 0x18, 0x02, 0x91, 0xa6, 0x61, 0x0f,
	0xf7, 0x51, 0xe3, 0xd4, 0xf3, 0x5b, 0x58, 0xe9, 0x79, 0x4c, 0xc3, 0x55, 0xff, 0x3a, 0xb0, 0xfc,
	0x47, 0x9b, 0xca, 0x22, 0xd6, 0x70, 0x6d, 0x6a, 0x3b, 0xbe, 0x36, 0x2f, 0x62, 0x89, 0x6e, 0x98,
	0x04, 0x89, 0x67, 0x80, 0xaf, 0xd2, 0xa6, 0xf2, 0x83, 0x2c, 0x92, 0x59, 0xda, 0xf9, 0x9f, 0x0b,
	0xa3, 0x0d, 0x9f, 0x0b, 0xe9, 0x6a, 0x20, 0x4f, 0x77, 0x99, 0x1f, 0x8f, 0xea, 0x73, 0xe1, 0x2b,
	0x0d, 0x4b, 0x6a, 0x04, 0xe6, 0x3f, 0xf2, 0xb3, 0x74, 0x11, 0xfe, 0xdb, 0x50, 0x00, 0xf8, 0x6b,
	0xba, 0x7a, 0x59, 0xc4, 0xae, 0x85, 0x1a, 0xf2, 0x72, 0x53, 0x1d, 0x6a, 0x1c, 0x62, 0x67, 0xc9,
	0xfa, 0xa1, 0xdc, 0x76, 0x3c, 0x88, 0xd6, 0x8a, 0xe5, 0x35, 0x97, 0x85, 0x49, 0x38, 0x20, 0x4f,
	0x73, 0xd6, 0xb4, 0x2c, 0x97, 0x7a, 0xf8, 0xe1, 0x92, 0xd9, 0x2f, 0xdb, 0x17, 0x45, 0xf3, 0x23,
	0xfb, 0x7c, 0xfd, 0x58, 0x6e, 0x74, 0x04, 0x18, 0x2e, 0xf7, 0x00, 0x74, 0xd8, 0x96, 0xd8, 0xdf,
	0xce, 0x8c, 0xff, 0x48, 0x8e, 0x40, 0x8f, 0x0c, 0xa2, 0x37, 0xd0, 0x3e, 0xd2, 0x31, 0xd1, 0x9b,
	0xe9, 0xc6, 0x28, 0x36, 0x6e, 0x69, 0xc7, 0x8e, 0xb7, 0x74, 0xf6, 0xc6, 0x20, 0xec, 0xe1, 0x78,
	0xe4, 0x1a, 0x74, 0x09, 0xdd, 0x44, 0x46, 0x14, 0xb1, 0x0e, 0xc9, 0xb2, 0xc4, 0x68, 0x8c, 0x85,
	0x98, 0x44, 0x1f, 0x7a, 0xeb, 0xe7, 0x3f, 0x3e, 0x68, 0x3f, 0x44, 0xfa, 0x0c, 0x85, 0xc8, 0x24,
	0x1f, 0x69, 0xb0, 0xbf, 0x41, 0xdb, 0x90, 0x49, 0xc5, 0xa0, 0x6a, 0xfd, 0x93, 0x18, 0x57, 0x65,
	0x83, 0x42, 0xd6, 0xe9, 0xb3, 0x9c, 0xe2, 0x38, 0x99, 0x0a, 0x53, 0x14, 0x28, 0x43, 0x25, 0xec,
	0xe5, 0xaa, 0xd9, 0x35, 0xdb, 0x32, 0x36, 0x65, 0xac, 0xb7, 0xc8, 0x2d, 0x0d, 0xfa, 0x54, 0x5a,
	0x83, 0xa4, 0xb6, 0x01, 0x6c, 0xc8, 0xb6, 0xd6, 0x29, 0x4f, 0x71, 0xca, 0x19, 0x62, 0xc4, 0x51,
	0xca, 0x04, 0x35, 0x36, 0xe5, 0xd3, 0x16, 0xf9, 0x56, 0x83, 0xc3, 0x11, 0xb2, 0x88, 0xcc, 0xb4,
	0x48, 0xbb, 0x93, 0xb0, 0x5e, 0xe0, 0xc0, 0xe7, 0xc8, 0x99, 0x56, 0x80, 0x45, 0x7c, 0x6b, 0xd0,
	0xc1, 0x50, 0x7f, 0xa2, 0xc1, 0xbe, 0x90, 0xe8, 0x21, 0xe3, 0x6a, 0xea, 0x26, 0x49, 0x95, 0x98,
	0xd8, 0xde, 0x10, 0x61, 0x4f, 0x73, 0xd8, 0x05, 0x32, 0x6f, 0x30, 0x5a, 0x2c, 0x3a, 0xee, 0xb4,
	0xed, 0x34, 0x63, 0xe7, 0x85, 0x9f, 0xaf, 0x65, 0x24, 0xa0, 0xff, 0xa5, 0xb8, 0x45, 0x6e, 0x8a,
	0x4c, 0x0d, 0x2a, 0xa0, 0xa8, 0x4c, 0x55, 0x88, 0xab, 0xc4, 0x54, 0x2b, 0xa6, 0x08, 0xfa, 0x14,
	0x07, 0x3d, 0x49, 0xe6, 0xe2, 0x40, 0xe5, 0x9f, 0x4d, 0xb2, 0x5c, 0x3c, 0x19, 0x9b, 0x42, 0xac,
	0x6d, 0x91, 0xdb, 0x22, 0x94, 0x75, 0x9d, 0x13, 0x15, 0xca, 0x26, 0x7d, 0x15, 0x15, 0xca, 0x66,
	0xc9, 0x14, 0xd8, 0xf7, 0x18, 0x42, 0x3f, 0x6e, 0xd9, 0x1c, 0x77, 0x0c, 0xec, 0xb5, 0x4f, 0x8a,
	0x97, 0xe8, 0x16, 0xf9, 0x42, 0x83, 0x83, 0x0a, 0xf5, 0x43, 0xa6, 0xd5, 0x24, 0x11, 0x4a, 0x2a,
	0x91, 0x6a, 0xd5, 0x1c, 0xf1, 0x17, 0x38, 0xfe, 0x09, 0x92, 0x8a, 0xc3, 0xf7, 0x31, 0xb3, 0x7e,
	0x09, 0xb5, 0xb2, 0x2e, 0x62, 0x7d, 0xad, 0x41, 0xbf, 0x52, 0xfa, 0x10, 0x43, 0x41, 0x10, 0xa7,
	0xa4, 0x12, 0x27, 0x5a, 0x77, 0x68, 0x2a, 0x0e, 0x11, 0xd0, 0x32, 0x75, 0xf3, 0xd2, 0x3f, 0xcb,
	0x83, 0x4e, 0x3e, 0xd3, 0x80, 0x34, 0x2b, 0x22, 0x72, 0x5c, 0x41, 0x10, 0x29, 0xad, 0x12, 0xd3,
	0x2d, 0x5a, 0x23, 0xec, 0x3c, 0x87, 0x4d, 0x91, 0xe3, 0x51, 0xb0, 0x65, 0xba, 0xd1, 0x4c, 0x7a,
	0x53, 0x83, 0xde, 0xa0, 0xd8, 0x21, 0x63, 0x8a, 0x59, 0x15, 0x12, 0x4b, 0x59, 0xb0, 0x54, 0xaa,
	0x49, 0x3f, 0xcf, 0xb9, 0xce, 0x90, 0xd3, 0x51, 0x5c, 0x2e, 0x7a, 0xf1, 0xec, 0x8d, 0x4a, 0xdb,
	0x1f, 0x35, 0x18, 0x8c, 0x14, 0x3f, 0x64, 0x2e, 0xb6, 0x22, 0xa9, 0xe5, 0x56, 0x62, 0xfe, 0xe1,
	0x9c, 0x70, 0x39, 0xcb, 0x7c, 0x39, 0x8b, 0xe4, 0x6c, 0x2b, 0x25, 0xad, 0x26, 0x2e, 0xb0, 0x22,
	0x07, 0x0b, 0xf0, 0x5f, 0x1a, 0x0c, 0xc5, 0xc9, 0x19, 0xb2, 0xa0, 0xe6, 0xdb, 0x4e, 0x80, 0x25,
	0x4e, 0x3d, 0xb4, 0x1f, 0x2e, 0x2d, 0xc7, 0x97, 0xf6, 0x0a, 0xb9, 0x12, 0xb7, 0xb4, 0xfa, 0x92,
	0x44, 0x9d, 0xc9, 0x86, 0xee, 0x47, 0xe5, 0xe6, 0x05, 0xaf, 0xcd, 0x77, 0x35, 0xe8, 0x96, 0xea,
	0x88, 0xe8, 0x6a, 0xd2, 0xd0, 0x29, 0x38, 0x16, 0x6b, 0x83, 0xe4, 0x4f, 0x70, 0xf2, 0x39, 0x32,
	0x13, 0x47, 0x2e, 0x7e, 0x3f, 0x08, 0x22, 0xfa, 0xdb, 0xf0, 0xbe, 0x06, 0xfb, 0x42, 0x0a, 0x48,
	0x59, 0xbc, 0x55, 0x42, 0x4c, 0x59, 0xbc, 0x95, 0x62, 0x4a, 0x4f, 0x71, 0xbe, 0x09, 0x32, 0x16,
	0xc5, 0xc7, 0xaf, 0x12, 0x2b, 0x8b, 0x4a, 0x8a, 0x7c, 0xaf, 0x41, 0xbf, 0x52, 0x9d, 0x28, 0xab,
	0x5e, 0x9c, 0xdc, 0x52, 0x56, 0xbd, 0x58, 0xe1, 0xa3, 0x5f, 0xe4, 0xb0, 0x2b, 0x64, 0x39, 0x2e,
	0x98, 0xf8, 0xad, 0xe1, 0xef, 0x7e, 0x2d, 0x23, 0xa2, 0xce, 0xee, 0x0f, 0x1a, 0x0c, 0x44, 0x89,
	0x0e, 0x32, 0x1b, 0x7b, 0x0a, 0x95, 0x22, 0x27, 0x31, 0xf7, 0x50, 0x3e, 0xb8, 0xac, 0x67, 0xf8,
	0xb2, 0xd2, 0xe4, 0x5c, 0x2b, 0x07, 0x57, 0x2c, 0xc4, 0xff, 0x40, 0xc5, 0x15, 0x05, 0x4f, 0xee,
	0x77, 0x1a, 0xf4, 0x2b, 0x25, 0x85, 0x72, 0x77, 0xe2, 0x54, 0x91, 0x72, 0x77, 0x62, 0xd5, 0x8a,
	0xfe, 0x1c, 0x5f, 0xc6, 0xd3, 0x64, 0x29, 0xba, 0x9c, 0x0a, 0x77, 0x5f, 0xbc, 0x64, 0x95, 0x1f,
	0xaf, 0x52, 0x7f, 0x6d, 0xa5, 0x97, 0xee, 0xdc, 0x4f, 0x6a, 0x77, 0xef, 0x27, 0xb5, 0xdf, 0xef,
	0x27, 0xb5, 0xf7, 0x1e, 0x24, 0xdb, 0xee, 0x3e, 0x48, 0xb6, 0xfd, 0xf2, 0x20, 0xd9, 0x76, 0x65,
	0x32, 0xf0, 0x17, 0xcd, 0xc6, 0x89, 0x36, 0x6a, 0x59, 0x5b, 0xad, 0x50, 0x2f, 0xd7, 0xc5, 0x7f,
	0x45, 0x9a, 0xfb, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x3c, 0xc5, 0xc0, 0x98, 0xe8, 0x1b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of GetReportsbyQid items.
	GetReportsbyQid(ctx context.Context, in *QueryGetReportsbyQidRequest, opts ...grpc.CallOption) (*QueryMicroReportsResponse, error)
	GetReportsbyReporter(ctx context.Context, in *QueryGetReportsbyReporterRequest, opts ...grpc.CallOption) (*QueryMicroReportsResponse, error)
	GetReportsbyReporterQid(ctx context.Context, in *QueryGetReportsbyReporterQidRequest, opts ...grpc.CallOption) (*QueryMicroReportsResponse, error)
	// Queries a list of GetCurrentTip items.
	GetCurrentTip(ctx context.Context, in *QueryGetCurrentTipRequest, opts ...grpc.CallOption) (*QueryGetCurrentTipResponse, error)
	// Queries a list of GetUserTipTotal items.
	GetUserTipTotal(ctx context.Context, in *QueryGetUserTipTotalRequest, opts ...grpc.CallOption) (*QueryGetUserTipTotalResponse, error)
	// Queries a list of GetAggregatedReport items.
	GetDataBefore(ctx context.Context, in *QueryGetDataBeforeRequest, opts ...grpc.CallOption) (*QueryGetDataBeforeResponse, error)
	// Queries a list of GetTimeBasedRewards items.
	GetTimeBasedRewards(ctx context.Context, in *QueryGetTimeBasedRewardsRequest, opts ...grpc.CallOption) (*QueryGetTimeBasedRewardsResponse, error)
	// Queries a list of CurrentCyclelistQuery items.
	CurrentCyclelistQuery(ctx context.Context, in *QueryCurrentCyclelistQueryRequest, opts ...grpc.CallOption) (*QueryCurrentCyclelistQueryResponse, error)
	// Queries a list of NextCyclelistQuery items.
	NextCyclelistQuery(ctx context.Context, in *QueryNextCyclelistQueryRequest, opts ...grpc.CallOption) (*QueryNextCyclelistQueryResponse, error)
	RetrieveData(ctx context.Context, in *QueryRetrieveDataRequest, opts ...grpc.CallOption) (*QueryRetrieveDataResponse, error)
	GetCurrentAggregateReport(ctx context.Context, in *QueryGetCurrentAggregateReportRequest, opts ...grpc.CallOption) (*QueryGetCurrentAggregateReportResponse, error)
	GetAggregateBeforeByReporter(ctx context.Context, in *QueryGetAggregateBeforeByReporterRequest, opts ...grpc.CallOption) (*QueryGetAggregateBeforeByReporterResponse, error)
	GetQuery(ctx context.Context, in *QueryGetQueryRequest, opts ...grpc.CallOption) (*QueryGetQueryResponse, error)
	TippedQueries(ctx context.Context, in *QueryTippedQueriesRequest, opts ...grpc.CallOption) (*QueryTippedQueriesResponse, error)
	GetReportsByAggregate(ctx context.Context, in *QueryGetReportsByAggregateRequest, opts ...grpc.CallOption) (*QueryGetReportsByAggregateResponse, error)
	GetCurrentQueryByQueryId(ctx context.Context, in *QueryGetCurrentQueryByQueryIdRequest, opts ...grpc.CallOption) (*QueryGetCurrentQueryByQueryIdResponse, error)
	ReportedIdsByReporter(ctx context.Context, in *QueryReportedIdsByReporterRequest, opts ...grpc.CallOption) (*QueryReportedIdsByReporterResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/layer.oracle.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetReportsbyQid(ctx context.Context, in *QueryGetReportsbyQidRequest, opts ...grpc.CallOption) (*QueryMicroReportsResponse, error) {
	out := new(QueryMicroReportsResponse)
	err := c.cc.Invoke(ctx, "/layer.oracle.Query/GetReportsbyQid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetReportsbyReporter(ctx context.Context, in *QueryGetReportsbyReporterRequest, opts ...grpc.CallOption) (*QueryMicroReportsResponse, error) {
	out := new(QueryMicroReportsResponse)
	err := c.cc.Invoke(ctx, "/layer.oracle.Query/GetReportsbyReporter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetReportsbyReporterQid(ctx context.Context, in *QueryGetReportsbyReporterQidRequest, opts ...grpc.CallOption) (*QueryMicroReportsResponse, error) {
	out := new(QueryMicroReportsResponse)
	err := c.cc.Invoke(ctx, "/layer.oracle.Query/GetReportsbyReporterQid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetCurrentTip(ctx context.Context, in *QueryGetCurrentTipRequest, opts ...grpc.CallOption) (*QueryGetCurrentTipResponse, error) {
	out := new(QueryGetCurrentTipResponse)
	err := c.cc.Invoke(ctx, "/layer.oracle.Query/GetCurrentTip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetUserTipTotal(ctx context.Context, in *QueryGetUserTipTotalRequest, opts ...grpc.CallOption) (*QueryGetUserTipTotalResponse, error) {
	out := new(QueryGetUserTipTotalResponse)
	err := c.cc.Invoke(ctx, "/layer.oracle.Query/GetUserTipTotal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetDataBefore(ctx context.Context, in *QueryGetDataBeforeRequest, opts ...grpc.CallOption) (*QueryGetDataBeforeResponse, error) {
	out := new(QueryGetDataBeforeResponse)
	err := c.cc.Invoke(ctx, "/layer.oracle.Query/GetDataBefore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTimeBasedRewards(ctx context.Context, in *QueryGetTimeBasedRewardsRequest, opts ...grpc.CallOption) (*QueryGetTimeBasedRewardsResponse, error) {
	out := new(QueryGetTimeBasedRewardsResponse)
	err := c.cc.Invoke(ctx, "/layer.oracle.Query/GetTimeBasedRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CurrentCyclelistQuery(ctx context.Context, in *QueryCurrentCyclelistQueryRequest, opts ...grpc.CallOption) (*QueryCurrentCyclelistQueryResponse, error) {
	out := new(QueryCurrentCyclelistQueryResponse)
	err := c.cc.Invoke(ctx, "/layer.oracle.Query/CurrentCyclelistQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NextCyclelistQuery(ctx context.Context, in *QueryNextCyclelistQueryRequest, opts ...grpc.CallOption) (*QueryNextCyclelistQueryResponse, error) {
	out := new(QueryNextCyclelistQueryResponse)
	err := c.cc.Invoke(ctx, "/layer.oracle.Query/NextCyclelistQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RetrieveData(ctx context.Context, in *QueryRetrieveDataRequest, opts ...grpc.CallOption) (*QueryRetrieveDataResponse, error) {
	out := new(QueryRetrieveDataResponse)
	err := c.cc.Invoke(ctx, "/layer.oracle.Query/RetrieveData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetCurrentAggregateReport(ctx context.Context, in *QueryGetCurrentAggregateReportRequest, opts ...grpc.CallOption) (*QueryGetCurrentAggregateReportResponse, error) {
	out := new(QueryGetCurrentAggregateReportResponse)
	err := c.cc.Invoke(ctx, "/layer.oracle.Query/GetCurrentAggregateReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAggregateBeforeByReporter(ctx context.Context, in *QueryGetAggregateBeforeByReporterRequest, opts ...grpc.CallOption) (*QueryGetAggregateBeforeByReporterResponse, error) {
	out := new(QueryGetAggregateBeforeByReporterResponse)
	err := c.cc.Invoke(ctx, "/layer.oracle.Query/GetAggregateBeforeByReporter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetQuery(ctx context.Context, in *QueryGetQueryRequest, opts ...grpc.CallOption) (*QueryGetQueryResponse, error) {
	out := new(QueryGetQueryResponse)
	err := c.cc.Invoke(ctx, "/layer.oracle.Query/GetQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TippedQueries(ctx context.Context, in *QueryTippedQueriesRequest, opts ...grpc.CallOption) (*QueryTippedQueriesResponse, error) {
	out := new(QueryTippedQueriesResponse)
	err := c.cc.Invoke(ctx, "/layer.oracle.Query/TippedQueries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetReportsByAggregate(ctx context.Context, in *QueryGetReportsByAggregateRequest, opts ...grpc.CallOption) (*QueryGetReportsByAggregateResponse, error) {
	out := new(QueryGetReportsByAggregateResponse)
	err := c.cc.Invoke(ctx, "/layer.oracle.Query/GetReportsByAggregate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetCurrentQueryByQueryId(ctx context.Context, in *QueryGetCurrentQueryByQueryIdRequest, opts ...grpc.CallOption) (*QueryGetCurrentQueryByQueryIdResponse, error) {
	out := new(QueryGetCurrentQueryByQueryIdResponse)
	err := c.cc.Invoke(ctx, "/layer.oracle.Query/GetCurrentQueryByQueryId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ReportedIdsByReporter(ctx context.Context, in *QueryReportedIdsByReporterRequest, opts ...grpc.CallOption) (*QueryReportedIdsByReporterResponse, error) {
	out := new(QueryReportedIdsByReporterResponse)
	err := c.cc.Invoke(ctx, "/layer.oracle.Query/ReportedIdsByReporter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of GetReportsbyQid items.
	GetReportsbyQid(context.Context, *QueryGetReportsbyQidRequest) (*QueryMicroReportsResponse, error)
	GetReportsbyReporter(context.Context, *QueryGetReportsbyReporterRequest) (*QueryMicroReportsResponse, error)
	GetReportsbyReporterQid(context.Context, *QueryGetReportsbyReporterQidRequest) (*QueryMicroReportsResponse, error)
	// Queries a list of GetCurrentTip items.
	GetCurrentTip(context.Context, *QueryGetCurrentTipRequest) (*QueryGetCurrentTipResponse, error)
	// Queries a list of GetUserTipTotal items.
	GetUserTipTotal(context.Context, *QueryGetUserTipTotalRequest) (*QueryGetUserTipTotalResponse, error)
	// Queries a list of GetAggregatedReport items.
	GetDataBefore(context.Context, *QueryGetDataBeforeRequest) (*QueryGetDataBeforeResponse, error)
	// Queries a list of GetTimeBasedRewards items.
	GetTimeBasedRewards(context.Context, *QueryGetTimeBasedRewardsRequest) (*QueryGetTimeBasedRewardsResponse, error)
	// Queries a list of CurrentCyclelistQuery items.
	CurrentCyclelistQuery(context.Context, *QueryCurrentCyclelistQueryRequest) (*QueryCurrentCyclelistQueryResponse, error)
	// Queries a list of NextCyclelistQuery items.
	NextCyclelistQuery(context.Context, *QueryNextCyclelistQueryRequest) (*QueryNextCyclelistQueryResponse, error)
	RetrieveData(context.Context, *QueryRetrieveDataRequest) (*QueryRetrieveDataResponse, error)
	GetCurrentAggregateReport(context.Context, *QueryGetCurrentAggregateReportRequest) (*QueryGetCurrentAggregateReportResponse, error)
	GetAggregateBeforeByReporter(context.Context, *QueryGetAggregateBeforeByReporterRequest) (*QueryGetAggregateBeforeByReporterResponse, error)
	GetQuery(context.Context, *QueryGetQueryRequest) (*QueryGetQueryResponse, error)
	TippedQueries(context.Context, *QueryTippedQueriesRequest) (*QueryTippedQueriesResponse, error)
	GetReportsByAggregate(context.Context, *QueryGetReportsByAggregateRequest) (*QueryGetReportsByAggregateResponse, error)
	GetCurrentQueryByQueryId(context.Context, *QueryGetCurrentQueryByQueryIdRequest) (*QueryGetCurrentQueryByQueryIdResponse, error)
	ReportedIdsByReporter(context.Context, *QueryReportedIdsByReporterRequest) (*QueryReportedIdsByReporterResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) GetReportsbyQid(ctx context.Context, req *QueryGetReportsbyQidRequest) (*QueryMicroReportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReportsbyQid not implemented")
}
func (*UnimplementedQueryServer) GetReportsbyReporter(ctx context.Context, req *QueryGetReportsbyReporterRequest) (*QueryMicroReportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReportsbyReporter not implemented")
}
func (*UnimplementedQueryServer) GetReportsbyReporterQid(ctx context.Context, req *QueryGetReportsbyReporterQidRequest) (*QueryMicroReportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReportsbyReporterQid not implemented")
}
func (*UnimplementedQueryServer) GetCurrentTip(ctx context.Context, req *QueryGetCurrentTipRequest) (*QueryGetCurrentTipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentTip not implemented")
}
func (*UnimplementedQueryServer) GetUserTipTotal(ctx context.Context, req *QueryGetUserTipTotalRequest) (*QueryGetUserTipTotalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserTipTotal not implemented")
}
func (*UnimplementedQueryServer) GetDataBefore(ctx context.Context, req *QueryGetDataBeforeRequest) (*QueryGetDataBeforeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataBefore not implemented")
}
func (*UnimplementedQueryServer) GetTimeBasedRewards(ctx context.Context, req *QueryGetTimeBasedRewardsRequest) (*QueryGetTimeBasedRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimeBasedRewards not implemented")
}
func (*UnimplementedQueryServer) CurrentCyclelistQuery(ctx context.Context, req *QueryCurrentCyclelistQueryRequest) (*QueryCurrentCyclelistQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentCyclelistQuery not implemented")
}
func (*UnimplementedQueryServer) NextCyclelistQuery(ctx context.Context, req *QueryNextCyclelistQueryRequest) (*QueryNextCyclelistQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextCyclelistQuery not implemented")
}
func (*UnimplementedQueryServer) RetrieveData(ctx context.Context, req *QueryRetrieveDataRequest) (*QueryRetrieveDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveData not implemented")
}
func (*UnimplementedQueryServer) GetCurrentAggregateReport(ctx context.Context, req *QueryGetCurrentAggregateReportRequest) (*QueryGetCurrentAggregateReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentAggregateReport not implemented")
}
func (*UnimplementedQueryServer) GetAggregateBeforeByReporter(ctx context.Context, req *QueryGetAggregateBeforeByReporterRequest) (*QueryGetAggregateBeforeByReporterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAggregateBeforeByReporter not implemented")
}
func (*UnimplementedQueryServer) GetQuery(ctx context.Context, req *QueryGetQueryRequest) (*QueryGetQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuery not implemented")
}
func (*UnimplementedQueryServer) TippedQueries(ctx context.Context, req *QueryTippedQueriesRequest) (*QueryTippedQueriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TippedQueries not implemented")
}
func (*UnimplementedQueryServer) GetReportsByAggregate(ctx context.Context, req *QueryGetReportsByAggregateRequest) (*QueryGetReportsByAggregateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReportsByAggregate not implemented")
}
func (*UnimplementedQueryServer) GetCurrentQueryByQueryId(ctx context.Context, req *QueryGetCurrentQueryByQueryIdRequest) (*QueryGetCurrentQueryByQueryIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentQueryByQueryId not implemented")
}
func (*UnimplementedQueryServer) ReportedIdsByReporter(ctx context.Context, req *QueryReportedIdsByReporterRequest) (*QueryReportedIdsByReporterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportedIdsByReporter not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.oracle.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetReportsbyQid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetReportsbyQidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetReportsbyQid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.oracle.Query/GetReportsbyQid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetReportsbyQid(ctx, req.(*QueryGetReportsbyQidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetReportsbyReporter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetReportsbyReporterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetReportsbyReporter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.oracle.Query/GetReportsbyReporter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetReportsbyReporter(ctx, req.(*QueryGetReportsbyReporterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetReportsbyReporterQid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetReportsbyReporterQidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetReportsbyReporterQid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.oracle.Query/GetReportsbyReporterQid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetReportsbyReporterQid(ctx, req.(*QueryGetReportsbyReporterQidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetCurrentTip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCurrentTipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetCurrentTip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.oracle.Query/GetCurrentTip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetCurrentTip(ctx, req.(*QueryGetCurrentTipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetUserTipTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetUserTipTotalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetUserTipTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.oracle.Query/GetUserTipTotal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetUserTipTotal(ctx, req.(*QueryGetUserTipTotalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetDataBefore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetDataBeforeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetDataBefore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.oracle.Query/GetDataBefore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetDataBefore(ctx, req.(*QueryGetDataBeforeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTimeBasedRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTimeBasedRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTimeBasedRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.oracle.Query/GetTimeBasedRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTimeBasedRewards(ctx, req.(*QueryGetTimeBasedRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CurrentCyclelistQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCurrentCyclelistQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CurrentCyclelistQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.oracle.Query/CurrentCyclelistQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CurrentCyclelistQuery(ctx, req.(*QueryCurrentCyclelistQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NextCyclelistQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNextCyclelistQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NextCyclelistQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.oracle.Query/NextCyclelistQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NextCyclelistQuery(ctx, req.(*QueryNextCyclelistQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RetrieveData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRetrieveDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RetrieveData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.oracle.Query/RetrieveData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RetrieveData(ctx, req.(*QueryRetrieveDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetCurrentAggregateReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCurrentAggregateReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetCurrentAggregateReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.oracle.Query/GetCurrentAggregateReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetCurrentAggregateReport(ctx, req.(*QueryGetCurrentAggregateReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAggregateBeforeByReporter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAggregateBeforeByReporterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAggregateBeforeByReporter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.oracle.Query/GetAggregateBeforeByReporter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAggregateBeforeByReporter(ctx, req.(*QueryGetAggregateBeforeByReporterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.oracle.Query/GetQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetQuery(ctx, req.(*QueryGetQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TippedQueries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTippedQueriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TippedQueries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.oracle.Query/TippedQueries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TippedQueries(ctx, req.(*QueryTippedQueriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetReportsByAggregate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetReportsByAggregateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetReportsByAggregate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.oracle.Query/GetReportsByAggregate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetReportsByAggregate(ctx, req.(*QueryGetReportsByAggregateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetCurrentQueryByQueryId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCurrentQueryByQueryIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetCurrentQueryByQueryId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.oracle.Query/GetCurrentQueryByQueryId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetCurrentQueryByQueryId(ctx, req.(*QueryGetCurrentQueryByQueryIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ReportedIdsByReporter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReportedIdsByReporterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ReportedIdsByReporter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.oracle.Query/ReportedIdsByReporter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ReportedIdsByReporter(ctx, req.(*QueryReportedIdsByReporterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "layer.oracle.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "GetReportsbyQid",
			Handler:    _Query_GetReportsbyQid_Handler,
		},
		{
			MethodName: "GetReportsbyReporter",
			Handler:    _Query_GetReportsbyReporter_Handler,
		},
		{
			MethodName: "GetReportsbyReporterQid",
			Handler:    _Query_GetReportsbyReporterQid_Handler,
		},
		{
			MethodName: "GetCurrentTip",
			Handler:    _Query_GetCurrentTip_Handler,
		},
		{
			MethodName: "GetUserTipTotal",
			Handler:    _Query_GetUserTipTotal_Handler,
		},
		{
			MethodName: "GetDataBefore",
			Handler:    _Query_GetDataBefore_Handler,
		},
		{
			MethodName: "GetTimeBasedRewards",
			Handler:    _Query_GetTimeBasedRewards_Handler,
		},
		{
			MethodName: "CurrentCyclelistQuery",
			Handler:    _Query_CurrentCyclelistQuery_Handler,
		},
		{
			MethodName: "NextCyclelistQuery",
			Handler:    _Query_NextCyclelistQuery_Handler,
		},
		{
			MethodName: "RetrieveData",
			Handler:    _Query_RetrieveData_Handler,
		},
		{
			MethodName: "GetCurrentAggregateReport",
			Handler:    _Query_GetCurrentAggregateReport_Handler,
		},
		{
			MethodName: "GetAggregateBeforeByReporter",
			Handler:    _Query_GetAggregateBeforeByReporter_Handler,
		},
		{
			MethodName: "GetQuery",
			Handler:    _Query_GetQuery_Handler,
		},
		{
			MethodName: "TippedQueries",
			Handler:    _Query_TippedQueries_Handler,
		},
		{
			MethodName: "GetReportsByAggregate",
			Handler:    _Query_GetReportsByAggregate_Handler,
		},
		{
			MethodName: "GetCurrentQueryByQueryId",
			Handler:    _Query_GetCurrentQueryByQueryId_Handler,
		},
		{
			MethodName: "ReportedIdsByReporter",
			Handler:    _Query_ReportedIdsByReporter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "layer/oracle/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryMicroReportsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMicroReportsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMicroReportsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.MicroReports) > 0 {
		for iNdEx := len(m.MicroReports) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MicroReports[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetReportsbyQidRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetReportsbyQidRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetReportsbyQidRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.QueryId) > 0 {
		i -= len(m.QueryId)
		copy(dAtA[i:], m.QueryId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.QueryId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetReportsbyReporterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetReportsbyReporterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetReportsbyReporterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Reporter) > 0 {
		i -= len(m.Reporter)
		copy(dAtA[i:], m.Reporter)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Reporter)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetReportsbyReporterQidRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetReportsbyReporterQidRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetReportsbyReporterQidRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.QueryId) > 0 {
		i -= len(m.QueryId)
		copy(dAtA[i:], m.QueryId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.QueryId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Reporter) > 0 {
		i -= len(m.Reporter)
		copy(dAtA[i:], m.Reporter)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Reporter)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCurrentTipRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCurrentTipRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCurrentTipRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.QueryData) > 0 {
		i -= len(m.QueryData)
		copy(dAtA[i:], m.QueryData)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.QueryData)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCurrentTipResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCurrentTipResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCurrentTipResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Tips.Size()
		i -= size
		if _, err := m.Tips.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetUserTipTotalRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetUserTipTotalRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetUserTipTotalRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tipper) > 0 {
		i -= len(m.Tipper)
		copy(dAtA[i:], m.Tipper)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Tipper)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetUserTipTotalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetUserTipTotalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetUserTipTotalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TotalTips.Size()
		i -= size
		if _, err := m.TotalTips.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetDataBeforeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDataBeforeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDataBeforeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x10
	}
	if len(m.QueryId) > 0 {
		i -= len(m.QueryId)
		copy(dAtA[i:], m.QueryId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.QueryId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetDataBeforeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDataBeforeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDataBeforeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x10
	}
	if m.Aggregate != nil {
		{
			size, err := m.Aggregate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTimeBasedRewardsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTimeBasedRewardsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTimeBasedRewardsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetTimeBasedRewardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTimeBasedRewardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTimeBasedRewardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Reward.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryCurrentCyclelistQueryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCurrentCyclelistQueryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCurrentCyclelistQueryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryCurrentCyclelistQueryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCurrentCyclelistQueryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCurrentCyclelistQueryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.QueryMeta != nil {
		{
			size, err := m.QueryMeta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.QueryData) > 0 {
		i -= len(m.QueryData)
		copy(dAtA[i:], m.QueryData)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.QueryData)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryNextCyclelistQueryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNextCyclelistQueryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNextCyclelistQueryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryNextCyclelistQueryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNextCyclelistQueryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNextCyclelistQueryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.QueryMeta != nil {
		{
			size, err := m.QueryMeta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.QueryData) > 0 {
		i -= len(m.QueryData)
		copy(dAtA[i:], m.QueryData)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.QueryData)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRetrieveDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRetrieveDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRetrieveDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x10
	}
	if len(m.QueryId) > 0 {
		i -= len(m.QueryId)
		copy(dAtA[i:], m.QueryId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.QueryId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRetrieveDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRetrieveDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRetrieveDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Aggregate != nil {
		{
			size, err := m.Aggregate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCurrentAggregateReportRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCurrentAggregateReportRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCurrentAggregateReportRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.QueryId) > 0 {
		i -= len(m.QueryId)
		copy(dAtA[i:], m.QueryId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.QueryId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCurrentAggregateReportResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCurrentAggregateReportResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCurrentAggregateReportResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x10
	}
	if m.Aggregate != nil {
		{
			size, err := m.Aggregate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAggregateBeforeByReporterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAggregateBeforeByReporterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAggregateBeforeByReporterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reporter) > 0 {
		i -= len(m.Reporter)
		copy(dAtA[i:], m.Reporter)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Reporter)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Timestamp != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x10
	}
	if len(m.QueryId) > 0 {
		i -= len(m.QueryId)
		copy(dAtA[i:], m.QueryId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.QueryId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAggregateBeforeByReporterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAggregateBeforeByReporterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAggregateBeforeByReporterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Aggregate != nil {
		{
			size, err := m.Aggregate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetQueryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetQueryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetQueryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.QueryId) > 0 {
		i -= len(m.QueryId)
		copy(dAtA[i:], m.QueryId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.QueryId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetQueryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetQueryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetQueryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Query != nil {
		{
			size, err := m.Query.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTippedQueriesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTippedQueriesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTippedQueriesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTippedQueriesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTippedQueriesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTippedQueriesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Queries) > 0 {
		for iNdEx := len(m.Queries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Queries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetReportsByAggregateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetReportsByAggregateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetReportsByAggregateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Timestamp != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x10
	}
	if len(m.QueryId) > 0 {
		i -= len(m.QueryId)
		copy(dAtA[i:], m.QueryId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.QueryId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetReportsByAggregateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetReportsByAggregateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetReportsByAggregateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.MicroReports) > 0 {
		for iNdEx := len(m.MicroReports) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MicroReports[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCurrentQueryByQueryIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCurrentQueryByQueryIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCurrentQueryByQueryIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.QueryId) > 0 {
		i -= len(m.QueryId)
		copy(dAtA[i:], m.QueryId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.QueryId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCurrentQueryByQueryIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCurrentQueryByQueryIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCurrentQueryByQueryIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Query != nil {
		{
			size, err := m.Query.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryReportedIdsByReporterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReportedIdsByReporterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReportedIdsByReporterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ReporterAddress) > 0 {
		i -= len(m.ReporterAddress)
		copy(dAtA[i:], m.ReporterAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ReporterAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryReportedIdsByReporterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReportedIdsByReporterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReportedIdsByReporterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.QueryIds) > 0 {
		for iNdEx := len(m.QueryIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.QueryIds[iNdEx])
			copy(dAtA[i:], m.QueryIds[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.QueryIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Ids) > 0 {
		dAtA21 := make([]byte, len(m.Ids)*10)
		var j20 int
		for _, num := range m.Ids {
			for num >= 1<<7 {
				dAtA21[j20] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j20++
			}
			dAtA21[j20] = uint8(num)
			j20++
		}
		i -= j20
		copy(dAtA[i:], dAtA21[:j20])
		i = encodeVarintQuery(dAtA, i, uint64(j20))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryMicroReportsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MicroReports) > 0 {
		for _, e := range m.MicroReports {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetReportsbyQidRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.QueryId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetReportsbyReporterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Reporter)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetReportsbyReporterQidRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Reporter)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.QueryId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCurrentTipRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.QueryData)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCurrentTipResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Tips.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetUserTipTotalRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Tipper)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetUserTipTotalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TotalTips.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetDataBeforeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.QueryId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovQuery(uint64(m.Timestamp))
	}
	return n
}

func (m *QueryGetDataBeforeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aggregate != nil {
		l = m.Aggregate.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovQuery(uint64(m.Timestamp))
	}
	return n
}

func (m *QueryGetTimeBasedRewardsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetTimeBasedRewardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Reward.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryCurrentCyclelistQueryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryCurrentCyclelistQueryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.QueryData)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.QueryMeta != nil {
		l = m.QueryMeta.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryNextCyclelistQueryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryNextCyclelistQueryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.QueryData)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.QueryMeta != nil {
		l = m.QueryMeta.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRetrieveDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.QueryId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovQuery(uint64(m.Timestamp))
	}
	return n
}

func (m *QueryRetrieveDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aggregate != nil {
		l = m.Aggregate.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCurrentAggregateReportRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.QueryId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCurrentAggregateReportResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aggregate != nil {
		l = m.Aggregate.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovQuery(uint64(m.Timestamp))
	}
	return n
}

func (m *QueryGetAggregateBeforeByReporterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.QueryId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovQuery(uint64(m.Timestamp))
	}
	l = len(m.Reporter)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAggregateBeforeByReporterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aggregate != nil {
		l = m.Aggregate.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetQueryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.QueryId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetQueryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Query != nil {
		l = m.Query.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTippedQueriesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTippedQueriesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Queries) > 0 {
		for _, e := range m.Queries {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetReportsByAggregateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.QueryId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovQuery(uint64(m.Timestamp))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetReportsByAggregateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MicroReports) > 0 {
		for _, e := range m.MicroReports {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCurrentQueryByQueryIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.QueryId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCurrentQueryByQueryIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Query != nil {
		l = m.Query.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryReportedIdsByReporterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReporterAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryReportedIdsByReporterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ids) > 0 {
		l = 0
		for _, e := range m.Ids {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	if len(m.QueryIds) > 0 {
		for _, b := range m.QueryIds {
			l = len(b)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMicroReportsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMicroReportsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMicroReportsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MicroReports", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MicroReports = append(m.MicroReports, MicroReport{})
			if err := m.MicroReports[len(m.MicroReports)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetReportsbyQidRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetReportsbyQidRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetReportsbyQidRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetReportsbyReporterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetReportsbyReporterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetReportsbyReporterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reporter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reporter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetReportsbyReporterQidRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetReportsbyReporterQidRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetReportsbyReporterQidRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reporter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reporter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCurrentTipRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCurrentTipRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCurrentTipRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCurrentTipResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCurrentTipResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCurrentTipResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tips", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Tips.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetUserTipTotalRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetUserTipTotalRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetUserTipTotalRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tipper", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tipper = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetUserTipTotalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetUserTipTotalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetUserTipTotalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalTips", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalTips.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDataBeforeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDataBeforeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDataBeforeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDataBeforeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDataBeforeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDataBeforeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aggregate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Aggregate == nil {
				m.Aggregate = &Aggregate{}
			}
			if err := m.Aggregate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTimeBasedRewardsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTimeBasedRewardsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTimeBasedRewardsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTimeBasedRewardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTimeBasedRewardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTimeBasedRewardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Reward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCurrentCyclelistQueryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCurrentCyclelistQueryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCurrentCyclelistQueryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCurrentCyclelistQueryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCurrentCyclelistQueryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCurrentCyclelistQueryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QueryMeta == nil {
				m.QueryMeta = &QueryMeta{}
			}
			if err := m.QueryMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNextCyclelistQueryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNextCyclelistQueryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNextCyclelistQueryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNextCyclelistQueryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNextCyclelistQueryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNextCyclelistQueryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QueryMeta == nil {
				m.QueryMeta = &QueryMeta{}
			}
			if err := m.QueryMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRetrieveDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRetrieveDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRetrieveDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRetrieveDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRetrieveDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRetrieveDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aggregate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Aggregate == nil {
				m.Aggregate = &Aggregate{}
			}
			if err := m.Aggregate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCurrentAggregateReportRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCurrentAggregateReportRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCurrentAggregateReportRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCurrentAggregateReportResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCurrentAggregateReportResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCurrentAggregateReportResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aggregate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Aggregate == nil {
				m.Aggregate = &Aggregate{}
			}
			if err := m.Aggregate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAggregateBeforeByReporterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAggregateBeforeByReporterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAggregateBeforeByReporterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reporter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reporter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAggregateBeforeByReporterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAggregateBeforeByReporterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAggregateBeforeByReporterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aggregate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Aggregate == nil {
				m.Aggregate = &Aggregate{}
			}
			if err := m.Aggregate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetQueryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetQueryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetQueryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetQueryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetQueryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetQueryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Query == nil {
				m.Query = &QueryMeta{}
			}
			if err := m.Query.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTippedQueriesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTippedQueriesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTippedQueriesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTippedQueriesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTippedQueriesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTippedQueriesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queries = append(m.Queries, &QueryMeta{})
			if err := m.Queries[len(m.Queries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetReportsByAggregateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetReportsByAggregateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetReportsByAggregateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetReportsByAggregateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetReportsByAggregateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetReportsByAggregateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MicroReports", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MicroReports = append(m.MicroReports, MicroReport{})
			if err := m.MicroReports[len(m.MicroReports)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCurrentQueryByQueryIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCurrentQueryByQueryIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCurrentQueryByQueryIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCurrentQueryByQueryIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCurrentQueryByQueryIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCurrentQueryByQueryIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Query == nil {
				m.Query = &QueryMeta{}
			}
			if err := m.Query.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReportedIdsByReporterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReportedIdsByReporterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReportedIdsByReporterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReporterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReporterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReportedIdsByReporterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReportedIdsByReporterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReportedIdsByReporterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Ids) == 0 {
					m.Ids = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryIds", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryIds = append(m.QueryIds, make([]byte, postIndex-iNdEx))
			copy(m.QueryIds[len(m.QueryIds)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
