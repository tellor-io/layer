// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: layer/oracle/no_stake_report.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MicroReport represents data for a single report
type NoStakeMicroReport struct {
	// reporter is the address of the reporter
	Reporter []byte `protobuf:"bytes,1,opt,name=reporter,proto3" json:"reporter,omitempty"`
	// hex string of the response value
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// timestamp of when the report was created
	Timestamp time.Time `protobuf:"bytes,3,opt,name=timestamp,proto3,stdtime" json:"timestamp"`
	// block number of when the report was created
	BlockNumber uint64 `protobuf:"varint,4,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
}

func (m *NoStakeMicroReport) Reset()         { *m = NoStakeMicroReport{} }
func (m *NoStakeMicroReport) String() string { return proto.CompactTextString(m) }
func (*NoStakeMicroReport) ProtoMessage()    {}
func (*NoStakeMicroReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aac86cdf07bfd4a, []int{0}
}
func (m *NoStakeMicroReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NoStakeMicroReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NoStakeMicroReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NoStakeMicroReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoStakeMicroReport.Merge(m, src)
}
func (m *NoStakeMicroReport) XXX_Size() int {
	return m.Size()
}
func (m *NoStakeMicroReport) XXX_DiscardUnknown() {
	xxx_messageInfo_NoStakeMicroReport.DiscardUnknown(m)
}

var xxx_messageInfo_NoStakeMicroReport proto.InternalMessageInfo

func (m *NoStakeMicroReport) GetReporter() []byte {
	if m != nil {
		return m.Reporter
	}
	return nil
}

func (m *NoStakeMicroReport) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *NoStakeMicroReport) GetTimestamp() time.Time {
	if m != nil {
		return m.Timestamp
	}
	return time.Time{}
}

func (m *NoStakeMicroReport) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

// MicroReports but with strings to return for queries
type NoStakeMicroReportStrings struct {
	// reporter is the address of the reporter
	Reporter string `protobuf:"bytes,1,opt,name=reporter,proto3" json:"reporter,omitempty"`
	// hex string of the response value
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// timestamp of when the report was created
	Timestamp uint64 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// block number of when the report was created
	BlockNumber uint64 `protobuf:"varint,4,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
}

func (m *NoStakeMicroReportStrings) Reset()         { *m = NoStakeMicroReportStrings{} }
func (m *NoStakeMicroReportStrings) String() string { return proto.CompactTextString(m) }
func (*NoStakeMicroReportStrings) ProtoMessage()    {}
func (*NoStakeMicroReportStrings) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aac86cdf07bfd4a, []int{1}
}
func (m *NoStakeMicroReportStrings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NoStakeMicroReportStrings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NoStakeMicroReportStrings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NoStakeMicroReportStrings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoStakeMicroReportStrings.Merge(m, src)
}
func (m *NoStakeMicroReportStrings) XXX_Size() int {
	return m.Size()
}
func (m *NoStakeMicroReportStrings) XXX_DiscardUnknown() {
	xxx_messageInfo_NoStakeMicroReportStrings.DiscardUnknown(m)
}

var xxx_messageInfo_NoStakeMicroReportStrings proto.InternalMessageInfo

func (m *NoStakeMicroReportStrings) GetReporter() string {
	if m != nil {
		return m.Reporter
	}
	return ""
}

func (m *NoStakeMicroReportStrings) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *NoStakeMicroReportStrings) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *NoStakeMicroReportStrings) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

func init() {
	proto.RegisterType((*NoStakeMicroReport)(nil), "layer.oracle.NoStakeMicroReport")
	proto.RegisterType((*NoStakeMicroReportStrings)(nil), "layer.oracle.NoStakeMicroReportStrings")
}

func init() {
	proto.RegisterFile("layer/oracle/no_stake_report.proto", fileDescriptor_0aac86cdf07bfd4a)
}

var fileDescriptor_0aac86cdf07bfd4a = []byte{
	// 312 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0x31, 0x4e, 0xc3, 0x30,
	0x14, 0x86, 0x63, 0x28, 0xa8, 0x75, 0x3b, 0x59, 0x1d, 0x42, 0x84, 0xdc, 0xd0, 0x29, 0x0c, 0xd8,
	0x12, 0xdc, 0xa0, 0xcc, 0x74, 0x48, 0x99, 0x58, 0xaa, 0x24, 0x32, 0x26, 0xaa, 0xd3, 0x17, 0x39,
	0x0e, 0xa2, 0x97, 0x40, 0xbd, 0x08, 0xf7, 0xe8, 0xd8, 0x91, 0x09, 0x50, 0x7b, 0x11, 0x54, 0x5b,
	0x29, 0x12, 0x1d, 0x10, 0x9b, 0xdf, 0xf3, 0xe7, 0xf7, 0x7f, 0xf2, 0xc3, 0x43, 0x95, 0x2c, 0x84,
	0xe6, 0xa0, 0x93, 0x4c, 0x09, 0x3e, 0x87, 0x69, 0x65, 0x92, 0x99, 0x98, 0x6a, 0x51, 0x82, 0x36,
	0xac, 0xd4, 0x60, 0x80, 0xf4, 0x2c, 0xc3, 0x1c, 0x13, 0xf4, 0x25, 0x48, 0xb0, 0x17, 0x7c, 0x77,
	0x72, 0x4c, 0x30, 0x90, 0x00, 0x52, 0x09, 0x6e, 0xab, 0xb4, 0x7e, 0xe4, 0x26, 0x2f, 0x44, 0x65,
	0x92, 0xa2, 0x74, 0xc0, 0xf0, 0x0d, 0x61, 0x32, 0x86, 0xc9, 0x6e, 0xfa, 0x5d, 0x9e, 0x69, 0x88,
	0x6d, 0x02, 0x09, 0x70, 0xdb, 0x65, 0x09, 0xed, 0xa3, 0x10, 0x45, 0xbd, 0x78, 0x5f, 0x93, 0x3e,
	0x3e, 0x79, 0x4e, 0x54, 0x2d, 0xfc, 0xa3, 0x10, 0x45, 0x9d, 0xd8, 0x15, 0x64, 0x84, 0x3b, 0xfb,
	0xd9, 0xfe, 0x71, 0x88, 0xa2, 0xee, 0x75, 0xc0, 0x5c, 0x3a, 0x6b, 0xd2, 0xd9, 0x7d, 0x43, 0x8c,
	0xda, 0xab, 0x8f, 0x81, 0xb7, 0xfc, 0x1c, 0xa0, 0xf8, 0xe7, 0x19, 0xb9, 0xc0, 0xbd, 0x54, 0x41,
	0x36, 0x9b, 0xce, 0xeb, 0x22, 0x15, 0xda, 0x6f, 0x85, 0x28, 0x6a, 0xc5, 0x5d, 0xdb, 0x1b, 0xdb,
	0xd6, 0xf0, 0x15, 0xe1, 0xb3, 0x43, 0xdf, 0x89, 0xd1, 0xf9, 0x5c, 0x56, 0x07, 0xda, 0x9d, 0x3f,
	0xb5, 0xcf, 0x7f, 0x6b, 0xb7, 0xfe, 0x27, 0x34, 0xba, 0x5d, 0x6d, 0x28, 0x5a, 0x6f, 0x28, 0xfa,
	0xda, 0x50, 0xb4, 0xdc, 0x52, 0x6f, 0xbd, 0xa5, 0xde, 0xfb, 0x96, 0x7a, 0x0f, 0x97, 0x32, 0x37,
	0x4f, 0x75, 0xca, 0x32, 0x28, 0xb8, 0x11, 0x4a, 0x81, 0xbe, 0xca, 0x81, 0xbb, 0xc5, 0xbe, 0x34,
	0xab, 0x35, 0x8b, 0x52, 0x54, 0xe9, 0xa9, 0xfd, 0xa1, 0x9b, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x16, 0x86, 0x61, 0xc7, 0xf7, 0x01, 0x00, 0x00,
}

func (m *NoStakeMicroReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoStakeMicroReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NoStakeMicroReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockNumber != 0 {
		i = encodeVarintNoStakeReport(dAtA, i, uint64(m.BlockNumber))
		i--
		dAtA[i] = 0x20
	}
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.Timestamp, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Timestamp):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintNoStakeReport(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x1a
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintNoStakeReport(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Reporter) > 0 {
		i -= len(m.Reporter)
		copy(dAtA[i:], m.Reporter)
		i = encodeVarintNoStakeReport(dAtA, i, uint64(len(m.Reporter)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NoStakeMicroReportStrings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoStakeMicroReportStrings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NoStakeMicroReportStrings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockNumber != 0 {
		i = encodeVarintNoStakeReport(dAtA, i, uint64(m.BlockNumber))
		i--
		dAtA[i] = 0x20
	}
	if m.Timestamp != 0 {
		i = encodeVarintNoStakeReport(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintNoStakeReport(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Reporter) > 0 {
		i -= len(m.Reporter)
		copy(dAtA[i:], m.Reporter)
		i = encodeVarintNoStakeReport(dAtA, i, uint64(len(m.Reporter)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintNoStakeReport(dAtA []byte, offset int, v uint64) int {
	offset -= sovNoStakeReport(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NoStakeMicroReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Reporter)
	if l > 0 {
		n += 1 + l + sovNoStakeReport(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovNoStakeReport(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Timestamp)
	n += 1 + l + sovNoStakeReport(uint64(l))
	if m.BlockNumber != 0 {
		n += 1 + sovNoStakeReport(uint64(m.BlockNumber))
	}
	return n
}

func (m *NoStakeMicroReportStrings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Reporter)
	if l > 0 {
		n += 1 + l + sovNoStakeReport(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovNoStakeReport(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovNoStakeReport(uint64(m.Timestamp))
	}
	if m.BlockNumber != 0 {
		n += 1 + sovNoStakeReport(uint64(m.BlockNumber))
	}
	return n
}

func sovNoStakeReport(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNoStakeReport(x uint64) (n int) {
	return sovNoStakeReport(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NoStakeMicroReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNoStakeReport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoStakeMicroReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoStakeMicroReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reporter", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNoStakeReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNoStakeReport
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNoStakeReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reporter = append(m.Reporter[:0], dAtA[iNdEx:postIndex]...)
			if m.Reporter == nil {
				m.Reporter = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNoStakeReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNoStakeReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNoStakeReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNoStakeReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNoStakeReport
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNoStakeReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNumber", wireType)
			}
			m.BlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNoStakeReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNoStakeReport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNoStakeReport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoStakeMicroReportStrings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNoStakeReport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoStakeMicroReportStrings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoStakeMicroReportStrings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reporter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNoStakeReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNoStakeReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNoStakeReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reporter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNoStakeReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNoStakeReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNoStakeReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNoStakeReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNumber", wireType)
			}
			m.BlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNoStakeReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNoStakeReport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNoStakeReport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNoStakeReport(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNoStakeReport
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNoStakeReport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNoStakeReport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNoStakeReport
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNoStakeReport
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNoStakeReport
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNoStakeReport        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNoStakeReport          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNoStakeReport = fmt.Errorf("proto: unexpected end of group")
)
