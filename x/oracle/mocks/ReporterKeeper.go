// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"

	math "cosmossdk.io/math"
	cosmos_sdktypes "github.com/cosmos/cosmos-sdk/types"

	mock "github.com/stretchr/testify/mock"

	types "github.com/tellor-io/layer/x/oracle/types"
)

// ReporterKeeper is an autogenerated mock type for the ReporterKeeper type
type ReporterKeeper struct {
	mock.Mock
}

// AddTbr provides a mock function with given fields: ctx, metaId, tbr
func (_m *ReporterKeeper) AddTbr(ctx context.Context, metaId uint64, tbr types.Reward) error {
	ret := _m.Called(ctx, metaId, tbr)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, types.Reward) error); ok {
		r0 = rf(ctx, metaId, tbr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddTip provides a mock function with given fields: ctx, metaId, tip
func (_m *ReporterKeeper) AddTip(ctx context.Context, metaId uint64, tip types.Reward) error {
	ret := _m.Called(ctx, metaId, tip)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, types.Reward) error); ok {
		r0 = rf(ctx, metaId, tip)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReporterStake provides a mock function with given fields: ctx, repAddress, queryId
func (_m *ReporterKeeper) ReporterStake(ctx context.Context, repAddress cosmos_sdktypes.AccAddress, queryId []byte) (math.Int, error) {
	ret := _m.Called(ctx, repAddress, queryId)

	var r0 math.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, cosmos_sdktypes.AccAddress, []byte) (math.Int, error)); ok {
		return rf(ctx, repAddress, queryId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, cosmos_sdktypes.AccAddress, []byte) math.Int); ok {
		r0 = rf(ctx, repAddress, queryId)
	} else {
		r0 = ret.Get(0).(math.Int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, cosmos_sdktypes.AccAddress, []byte) error); ok {
		r1 = rf(ctx, repAddress, queryId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewReporterKeeper interface {
	mock.TestingT
	Cleanup(func())
}

// NewReporterKeeper creates a new instance of ReporterKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewReporterKeeper(t mockConstructorTestingTNewReporterKeeper) *ReporterKeeper {
	mock := &ReporterKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
