// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: layer/bridge/cross_network_address.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// CrossNetworkAddressEntry represents a tracked address across networks
type CrossNetworkAddressEntry struct {
	// address is the validator address being tracked
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// reporter is the address of the reporter who reported this
	Reporter string `protobuf:"bytes,2,opt,name=reporter,proto3" json:"reporter,omitempty"`
	// timestamp is when this was reported
	Timestamp time.Time `protobuf:"bytes,3,opt,name=timestamp,proto3,stdtime" json:"timestamp"`
	// disputed indicates if this entry is currently under dispute
	Disputed bool `protobuf:"varint,4,opt,name=disputed,proto3" json:"disputed,omitempty"`
}

func (m *CrossNetworkAddressEntry) Reset()         { *m = CrossNetworkAddressEntry{} }
func (m *CrossNetworkAddressEntry) String() string { return proto.CompactTextString(m) }
func (*CrossNetworkAddressEntry) ProtoMessage()    {}
func (*CrossNetworkAddressEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_8734bfc2444629be, []int{0}
}
func (m *CrossNetworkAddressEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CrossNetworkAddressEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CrossNetworkAddressEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CrossNetworkAddressEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrossNetworkAddressEntry.Merge(m, src)
}
func (m *CrossNetworkAddressEntry) XXX_Size() int {
	return m.Size()
}
func (m *CrossNetworkAddressEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_CrossNetworkAddressEntry.DiscardUnknown(m)
}

var xxx_messageInfo_CrossNetworkAddressEntry proto.InternalMessageInfo

func (m *CrossNetworkAddressEntry) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *CrossNetworkAddressEntry) GetReporter() string {
	if m != nil {
		return m.Reporter
	}
	return ""
}

func (m *CrossNetworkAddressEntry) GetTimestamp() time.Time {
	if m != nil {
		return m.Timestamp
	}
	return time.Time{}
}

func (m *CrossNetworkAddressEntry) GetDisputed() bool {
	if m != nil {
		return m.Disputed
	}
	return false
}

func init() {
	proto.RegisterType((*CrossNetworkAddressEntry)(nil), "layer.bridge.CrossNetworkAddressEntry")
}

func init() {
	proto.RegisterFile("layer/bridge/cross_network_address.proto", fileDescriptor_8734bfc2444629be)
}

var fileDescriptor_8734bfc2444629be = []byte{
	// 280 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x90, 0xb1, 0x4e, 0xac, 0x40,
	0x14, 0x86, 0x99, 0x7b, 0x8d, 0xee, 0xa2, 0x15, 0xb1, 0x98, 0x50, 0x0c, 0xc4, 0x0a, 0x0b, 0x67,
	0x12, 0x7d, 0x02, 0xd9, 0xd8, 0x5a, 0x10, 0x2b, 0x9b, 0x0d, 0x2c, 0xe3, 0x48, 0x84, 0x3d, 0xe4,
	0xcc, 0x10, 0xe5, 0x2d, 0xf6, 0x51, 0x7c, 0x8c, 0x2d, 0xb7, 0xb4, 0x52, 0x03, 0x2f, 0x62, 0x60,
	0x04, 0xbb, 0xf9, 0x73, 0xbe, 0x39, 0xdf, 0x9f, 0xe3, 0x46, 0x65, 0xda, 0x4a, 0x14, 0x19, 0x16,
	0xb9, 0x92, 0x62, 0x83, 0xa0, 0xf5, 0x7a, 0x2b, 0xcd, 0x2b, 0xe0, 0xcb, 0x3a, 0xcd, 0x73, 0x94,
	0x5a, 0xf3, 0x1a, 0xc1, 0x80, 0x77, 0x36, 0x92, 0xdc, 0x92, 0xfe, 0xb9, 0x02, 0x05, 0xe3, 0x40,
	0x0c, 0x2f, 0xcb, 0xf8, 0x81, 0x02, 0x50, 0xa5, 0x14, 0x63, 0xca, 0x9a, 0x27, 0x61, 0x8a, 0x4a,
	0x6a, 0x93, 0x56, 0xb5, 0x05, 0x2e, 0xde, 0x89, 0x4b, 0x57, 0x83, 0xe4, 0xde, 0x3a, 0x6e, 0xad,
	0xe2, 0x6e, 0x6b, 0xb0, 0xf5, 0xa8, 0x7b, 0xf2, 0xab, 0xa4, 0x24, 0x24, 0xd1, 0x32, 0x99, 0xa2,
	0xe7, 0xbb, 0x0b, 0x94, 0x35, 0xa0, 0x91, 0x48, 0xff, 0x8d, 0xa3, 0x39, 0x7b, 0xb1, 0xbb, 0x9c,
	0x2d, 0xf4, 0x7f, 0x48, 0xa2, 0xd3, 0x6b, 0x9f, 0xdb, 0x1e, 0x7c, 0xea, 0xc1, 0x1f, 0x26, 0x22,
	0x5e, 0xec, 0x3f, 0x03, 0x67, 0xf7, 0x15, 0x90, 0xe4, 0xef, 0xdb, 0xb0, 0x3f, 0x2f, 0x74, 0xdd,
	0x18, 0x99, 0xd3, 0xa3, 0x90, 0x44, 0x8b, 0x64, 0xce, 0xf1, 0x6a, 0xdf, 0x31, 0x72, 0xe8, 0x18,
	0xf9, 0xee, 0x18, 0xd9, 0xf5, 0xcc, 0x39, 0xf4, 0xcc, 0xf9, 0xe8, 0x99, 0xf3, 0x78, 0xa9, 0x0a,
	0xf3, 0xdc, 0x64, 0x7c, 0x03, 0x95, 0x30, 0xb2, 0x2c, 0x01, 0xaf, 0x0a, 0x10, 0xf6, 0xa0, 0x6f,
	0xd3, 0x49, 0x4d, 0x5b, 0x4b, 0x9d, 0x1d, 0x8f, 0x4d, 0x6e, 0x7e, 0x02, 0x00, 0x00, 0xff, 0xff,
	0xcd, 0x1f, 0x43, 0x54, 0x6f, 0x01, 0x00, 0x00,
}

func (m *CrossNetworkAddressEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CrossNetworkAddressEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CrossNetworkAddressEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Disputed {
		i--
		if m.Disputed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.Timestamp, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Timestamp):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintCrossNetworkAddress(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x1a
	if len(m.Reporter) > 0 {
		i -= len(m.Reporter)
		copy(dAtA[i:], m.Reporter)
		i = encodeVarintCrossNetworkAddress(dAtA, i, uint64(len(m.Reporter)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintCrossNetworkAddress(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCrossNetworkAddress(dAtA []byte, offset int, v uint64) int {
	offset -= sovCrossNetworkAddress(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CrossNetworkAddressEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovCrossNetworkAddress(uint64(l))
	}
	l = len(m.Reporter)
	if l > 0 {
		n += 1 + l + sovCrossNetworkAddress(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Timestamp)
	n += 1 + l + sovCrossNetworkAddress(uint64(l))
	if m.Disputed {
		n += 2
	}
	return n
}

func sovCrossNetworkAddress(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCrossNetworkAddress(x uint64) (n int) {
	return sovCrossNetworkAddress(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CrossNetworkAddressEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrossNetworkAddress
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrossNetworkAddressEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrossNetworkAddressEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossNetworkAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossNetworkAddress
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossNetworkAddress
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reporter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossNetworkAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossNetworkAddress
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossNetworkAddress
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reporter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossNetworkAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCrossNetworkAddress
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCrossNetworkAddress
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disputed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossNetworkAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Disputed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCrossNetworkAddress(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCrossNetworkAddress
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCrossNetworkAddress(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCrossNetworkAddress
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCrossNetworkAddress
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCrossNetworkAddress
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCrossNetworkAddress
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCrossNetworkAddress
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCrossNetworkAddress
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCrossNetworkAddress        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCrossNetworkAddress          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCrossNetworkAddress = fmt.Errorf("proto: unexpected end of group")
)
