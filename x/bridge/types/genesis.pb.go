// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: layer/bridge/genesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the bridge module's genesis state.
type GenesisState struct {
	Params                       Params                                 `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	SnapshotLimit                uint64                                 `protobuf:"varint,2,opt,name=snapshot_limit,json=snapshotLimit,proto3" json:"snapshot_limit,omitempty"`
	BridgeValSet                 *BridgeValidatorSet                    `protobuf:"bytes,3,opt,name=bridge_val_set,json=bridgeValSet,proto3" json:"bridge_val_set,omitempty"`
	ValidatorCheckpoint          []byte                                 `protobuf:"bytes,4,opt,name=validator_checkpoint,json=validatorCheckpoint,proto3" json:"validator_checkpoint,omitempty"`
	WithdrawalId                 uint64                                 `protobuf:"varint,5,opt,name=withdrawal_id,json=withdrawalId,proto3" json:"withdrawal_id,omitempty"`
	OperatorToEvmAddressMap      []*OperatorToEVMAddressMapEntry        `protobuf:"bytes,6,rep,name=operator_to_evm_address_map,json=operatorToEvmAddressMap,proto3" json:"operator_to_evm_address_map,omitempty"`
	EvmRegisteredMap             []*EVMRegisteredMapEntry               `protobuf:"bytes,7,rep,name=evm_registered_map,json=evmRegisteredMap,proto3" json:"evm_registered_map,omitempty"`
	BridgeValsetSigsMap          []*BridgeValSetSigsMapEntry            `protobuf:"bytes,8,rep,name=bridge_valset_sigs_map,json=bridgeValsetSigsMap,proto3" json:"bridge_valset_sigs_map,omitempty"`
	ValidatorCheckpointParamsMap []*ValidatorCheckpointParamsStateEntry `protobuf:"bytes,9,rep,name=validator_checkpoint_params_map,json=validatorCheckpointParamsMap,proto3" json:"validator_checkpoint_params_map,omitempty"`
	ValidatorCheckpointIdxMap    []*ValidatorCheckpointIdxMapEntry      `protobuf:"bytes,10,rep,name=validator_checkpoint_idx_map,json=validatorCheckpointIdxMap,proto3" json:"validator_checkpoint_idx_map,omitempty"`
	LatestValidatorCheckpointIdx uint64                                 `protobuf:"varint,11,opt,name=latest_validator_checkpoint_idx,json=latestValidatorCheckpointIdx,proto3" json:"latest_validator_checkpoint_idx,omitempty"`
	BridgeValsetByTimestampMap   []*BridgeValsetByTimestampMapEntry     `protobuf:"bytes,12,rep,name=bridge_valset_by_timestamp_map,json=bridgeValsetByTimestampMap,proto3" json:"bridge_valset_by_timestamp_map,omitempty"`
	ValsetTimestampToIdxMap      []*ValsetTimestampToIdxMapEntry        `protobuf:"bytes,13,rep,name=valset_timestamp_to_idx_map,json=valsetTimestampToIdxMap,proto3" json:"valset_timestamp_to_idx_map,omitempty"`
	AttestSnapshotsByReportMap   []*AttestSnapshotsByReportMapEntry     `protobuf:"bytes,14,rep,name=attest_snapshots_by_report_map,json=attestSnapshotsByReportMap,proto3" json:"attest_snapshots_by_report_map,omitempty"`
	AttestSnapshotDataMap        []*AttestSnapshotDataMapEntry          `protobuf:"bytes,15,rep,name=attest_snapshot_data_map,json=attestSnapshotDataMap,proto3" json:"attest_snapshot_data_map,omitempty"`
	SnapshotToAttestationsMap    []*SnapshotToAttestationsMapEntry      `protobuf:"bytes,16,rep,name=snapshot_to_attestations_map,json=snapshotToAttestationsMap,proto3" json:"snapshot_to_attestations_map,omitempty"`
	AttestRequestsByHeightMap    []*AttestRequestsByHeightMapEntry      `protobuf:"bytes,17,rep,name=attest_requests_by_height_map,json=attestRequestsByHeightMap,proto3" json:"attest_requests_by_height_map,omitempty"`
	DepositIdClaimedMap          []*DepositIdClaimedMapEntry            `protobuf:"bytes,18,rep,name=deposit_id_claimed_map,json=depositIdClaimedMap,proto3" json:"deposit_id_claimed_map,omitempty"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_233d9732da3f6137, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetSnapshotLimit() uint64 {
	if m != nil {
		return m.SnapshotLimit
	}
	return 0
}

func (m *GenesisState) GetBridgeValSet() *BridgeValidatorSet {
	if m != nil {
		return m.BridgeValSet
	}
	return nil
}

func (m *GenesisState) GetValidatorCheckpoint() []byte {
	if m != nil {
		return m.ValidatorCheckpoint
	}
	return nil
}

func (m *GenesisState) GetWithdrawalId() uint64 {
	if m != nil {
		return m.WithdrawalId
	}
	return 0
}

func (m *GenesisState) GetOperatorToEvmAddressMap() []*OperatorToEVMAddressMapEntry {
	if m != nil {
		return m.OperatorToEvmAddressMap
	}
	return nil
}

func (m *GenesisState) GetEvmRegisteredMap() []*EVMRegisteredMapEntry {
	if m != nil {
		return m.EvmRegisteredMap
	}
	return nil
}

func (m *GenesisState) GetBridgeValsetSigsMap() []*BridgeValSetSigsMapEntry {
	if m != nil {
		return m.BridgeValsetSigsMap
	}
	return nil
}

func (m *GenesisState) GetValidatorCheckpointParamsMap() []*ValidatorCheckpointParamsStateEntry {
	if m != nil {
		return m.ValidatorCheckpointParamsMap
	}
	return nil
}

func (m *GenesisState) GetValidatorCheckpointIdxMap() []*ValidatorCheckpointIdxMapEntry {
	if m != nil {
		return m.ValidatorCheckpointIdxMap
	}
	return nil
}

func (m *GenesisState) GetLatestValidatorCheckpointIdx() uint64 {
	if m != nil {
		return m.LatestValidatorCheckpointIdx
	}
	return 0
}

func (m *GenesisState) GetBridgeValsetByTimestampMap() []*BridgeValsetByTimestampMapEntry {
	if m != nil {
		return m.BridgeValsetByTimestampMap
	}
	return nil
}

func (m *GenesisState) GetValsetTimestampToIdxMap() []*ValsetTimestampToIdxMapEntry {
	if m != nil {
		return m.ValsetTimestampToIdxMap
	}
	return nil
}

func (m *GenesisState) GetAttestSnapshotsByReportMap() []*AttestSnapshotsByReportMapEntry {
	if m != nil {
		return m.AttestSnapshotsByReportMap
	}
	return nil
}

func (m *GenesisState) GetAttestSnapshotDataMap() []*AttestSnapshotDataMapEntry {
	if m != nil {
		return m.AttestSnapshotDataMap
	}
	return nil
}

func (m *GenesisState) GetSnapshotToAttestationsMap() []*SnapshotToAttestationsMapEntry {
	if m != nil {
		return m.SnapshotToAttestationsMap
	}
	return nil
}

func (m *GenesisState) GetAttestRequestsByHeightMap() []*AttestRequestsByHeightMapEntry {
	if m != nil {
		return m.AttestRequestsByHeightMap
	}
	return nil
}

func (m *GenesisState) GetDepositIdClaimedMap() []*DepositIdClaimedMapEntry {
	if m != nil {
		return m.DepositIdClaimedMap
	}
	return nil
}

type OperatorToEVMAddressMapEntry struct {
	OperatorAddress string `protobuf:"bytes,1,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty"`
	EvmAddress      []byte `protobuf:"bytes,2,opt,name=evm_address,json=evmAddress,proto3" json:"evm_address,omitempty"`
}

func (m *OperatorToEVMAddressMapEntry) Reset()         { *m = OperatorToEVMAddressMapEntry{} }
func (m *OperatorToEVMAddressMapEntry) String() string { return proto.CompactTextString(m) }
func (*OperatorToEVMAddressMapEntry) ProtoMessage()    {}
func (*OperatorToEVMAddressMapEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_233d9732da3f6137, []int{1}
}
func (m *OperatorToEVMAddressMapEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperatorToEVMAddressMapEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperatorToEVMAddressMapEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperatorToEVMAddressMapEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperatorToEVMAddressMapEntry.Merge(m, src)
}
func (m *OperatorToEVMAddressMapEntry) XXX_Size() int {
	return m.Size()
}
func (m *OperatorToEVMAddressMapEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_OperatorToEVMAddressMapEntry.DiscardUnknown(m)
}

var xxx_messageInfo_OperatorToEVMAddressMapEntry proto.InternalMessageInfo

func (m *OperatorToEVMAddressMapEntry) GetOperatorAddress() string {
	if m != nil {
		return m.OperatorAddress
	}
	return ""
}

func (m *OperatorToEVMAddressMapEntry) GetEvmAddress() []byte {
	if m != nil {
		return m.EvmAddress
	}
	return nil
}

type EVMRegisteredMapEntry struct {
	OperatorAddress string `protobuf:"bytes,1,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty"`
	Registered      bool   `protobuf:"varint,2,opt,name=registered,proto3" json:"registered,omitempty"`
}

func (m *EVMRegisteredMapEntry) Reset()         { *m = EVMRegisteredMapEntry{} }
func (m *EVMRegisteredMapEntry) String() string { return proto.CompactTextString(m) }
func (*EVMRegisteredMapEntry) ProtoMessage()    {}
func (*EVMRegisteredMapEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_233d9732da3f6137, []int{2}
}
func (m *EVMRegisteredMapEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EVMRegisteredMapEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EVMRegisteredMapEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EVMRegisteredMapEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EVMRegisteredMapEntry.Merge(m, src)
}
func (m *EVMRegisteredMapEntry) XXX_Size() int {
	return m.Size()
}
func (m *EVMRegisteredMapEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_EVMRegisteredMapEntry.DiscardUnknown(m)
}

var xxx_messageInfo_EVMRegisteredMapEntry proto.InternalMessageInfo

func (m *EVMRegisteredMapEntry) GetOperatorAddress() string {
	if m != nil {
		return m.OperatorAddress
	}
	return ""
}

func (m *EVMRegisteredMapEntry) GetRegistered() bool {
	if m != nil {
		return m.Registered
	}
	return false
}

type BridgeValSetSigsMapEntry struct {
	Timestamp  uint64   `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ValsetSigs [][]byte `protobuf:"bytes,2,rep,name=valset_sigs,json=valsetSigs,proto3" json:"valset_sigs,omitempty"`
}

func (m *BridgeValSetSigsMapEntry) Reset()         { *m = BridgeValSetSigsMapEntry{} }
func (m *BridgeValSetSigsMapEntry) String() string { return proto.CompactTextString(m) }
func (*BridgeValSetSigsMapEntry) ProtoMessage()    {}
func (*BridgeValSetSigsMapEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_233d9732da3f6137, []int{3}
}
func (m *BridgeValSetSigsMapEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BridgeValSetSigsMapEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BridgeValSetSigsMapEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BridgeValSetSigsMapEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BridgeValSetSigsMapEntry.Merge(m, src)
}
func (m *BridgeValSetSigsMapEntry) XXX_Size() int {
	return m.Size()
}
func (m *BridgeValSetSigsMapEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_BridgeValSetSigsMapEntry.DiscardUnknown(m)
}

var xxx_messageInfo_BridgeValSetSigsMapEntry proto.InternalMessageInfo

func (m *BridgeValSetSigsMapEntry) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *BridgeValSetSigsMapEntry) GetValsetSigs() [][]byte {
	if m != nil {
		return m.ValsetSigs
	}
	return nil
}

type ValidatorCheckpointParamsStateEntry struct {
	Timestamp               uint64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ValidatorTimestamp      uint64 `protobuf:"varint,2,opt,name=validator_timestamp,json=validatorTimestamp,proto3" json:"validator_timestamp,omitempty"`
	ValidatorPowerThreshold uint64 `protobuf:"varint,3,opt,name=validator_power_threshold,json=validatorPowerThreshold,proto3" json:"validator_power_threshold,omitempty"`
	ValidatorSetHash        []byte `protobuf:"bytes,4,opt,name=validator_set_hash,json=validatorSetHash,proto3" json:"validator_set_hash,omitempty"`
	ValidatorCheckpoint     []byte `protobuf:"bytes,5,opt,name=validator_checkpoint,json=validatorCheckpoint,proto3" json:"validator_checkpoint,omitempty"`
}

func (m *ValidatorCheckpointParamsStateEntry) Reset()         { *m = ValidatorCheckpointParamsStateEntry{} }
func (m *ValidatorCheckpointParamsStateEntry) String() string { return proto.CompactTextString(m) }
func (*ValidatorCheckpointParamsStateEntry) ProtoMessage()    {}
func (*ValidatorCheckpointParamsStateEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_233d9732da3f6137, []int{4}
}
func (m *ValidatorCheckpointParamsStateEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorCheckpointParamsStateEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorCheckpointParamsStateEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorCheckpointParamsStateEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorCheckpointParamsStateEntry.Merge(m, src)
}
func (m *ValidatorCheckpointParamsStateEntry) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorCheckpointParamsStateEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorCheckpointParamsStateEntry.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorCheckpointParamsStateEntry proto.InternalMessageInfo

func (m *ValidatorCheckpointParamsStateEntry) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *ValidatorCheckpointParamsStateEntry) GetValidatorTimestamp() uint64 {
	if m != nil {
		return m.ValidatorTimestamp
	}
	return 0
}

func (m *ValidatorCheckpointParamsStateEntry) GetValidatorPowerThreshold() uint64 {
	if m != nil {
		return m.ValidatorPowerThreshold
	}
	return 0
}

func (m *ValidatorCheckpointParamsStateEntry) GetValidatorSetHash() []byte {
	if m != nil {
		return m.ValidatorSetHash
	}
	return nil
}

func (m *ValidatorCheckpointParamsStateEntry) GetValidatorCheckpoint() []byte {
	if m != nil {
		return m.ValidatorCheckpoint
	}
	return nil
}

type ValidatorCheckpointIdxMapEntry struct {
	Index     uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Timestamp uint64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *ValidatorCheckpointIdxMapEntry) Reset()         { *m = ValidatorCheckpointIdxMapEntry{} }
func (m *ValidatorCheckpointIdxMapEntry) String() string { return proto.CompactTextString(m) }
func (*ValidatorCheckpointIdxMapEntry) ProtoMessage()    {}
func (*ValidatorCheckpointIdxMapEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_233d9732da3f6137, []int{5}
}
func (m *ValidatorCheckpointIdxMapEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorCheckpointIdxMapEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorCheckpointIdxMapEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorCheckpointIdxMapEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorCheckpointIdxMapEntry.Merge(m, src)
}
func (m *ValidatorCheckpointIdxMapEntry) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorCheckpointIdxMapEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorCheckpointIdxMapEntry.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorCheckpointIdxMapEntry proto.InternalMessageInfo

func (m *ValidatorCheckpointIdxMapEntry) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *ValidatorCheckpointIdxMapEntry) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type BridgeValsetByTimestampMapEntry struct {
	Timestamp uint64              `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Valset    *BridgeValidatorSet `protobuf:"bytes,2,opt,name=valset,proto3" json:"valset,omitempty"`
}

func (m *BridgeValsetByTimestampMapEntry) Reset()         { *m = BridgeValsetByTimestampMapEntry{} }
func (m *BridgeValsetByTimestampMapEntry) String() string { return proto.CompactTextString(m) }
func (*BridgeValsetByTimestampMapEntry) ProtoMessage()    {}
func (*BridgeValsetByTimestampMapEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_233d9732da3f6137, []int{6}
}
func (m *BridgeValsetByTimestampMapEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BridgeValsetByTimestampMapEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BridgeValsetByTimestampMapEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BridgeValsetByTimestampMapEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BridgeValsetByTimestampMapEntry.Merge(m, src)
}
func (m *BridgeValsetByTimestampMapEntry) XXX_Size() int {
	return m.Size()
}
func (m *BridgeValsetByTimestampMapEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_BridgeValsetByTimestampMapEntry.DiscardUnknown(m)
}

var xxx_messageInfo_BridgeValsetByTimestampMapEntry proto.InternalMessageInfo

func (m *BridgeValsetByTimestampMapEntry) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *BridgeValsetByTimestampMapEntry) GetValset() *BridgeValidatorSet {
	if m != nil {
		return m.Valset
	}
	return nil
}

type ValsetTimestampToIdxMapEntry struct {
	Timestamp uint64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Index     uint64 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *ValsetTimestampToIdxMapEntry) Reset()         { *m = ValsetTimestampToIdxMapEntry{} }
func (m *ValsetTimestampToIdxMapEntry) String() string { return proto.CompactTextString(m) }
func (*ValsetTimestampToIdxMapEntry) ProtoMessage()    {}
func (*ValsetTimestampToIdxMapEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_233d9732da3f6137, []int{7}
}
func (m *ValsetTimestampToIdxMapEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValsetTimestampToIdxMapEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValsetTimestampToIdxMapEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValsetTimestampToIdxMapEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValsetTimestampToIdxMapEntry.Merge(m, src)
}
func (m *ValsetTimestampToIdxMapEntry) XXX_Size() int {
	return m.Size()
}
func (m *ValsetTimestampToIdxMapEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_ValsetTimestampToIdxMapEntry.DiscardUnknown(m)
}

var xxx_messageInfo_ValsetTimestampToIdxMapEntry proto.InternalMessageInfo

func (m *ValsetTimestampToIdxMapEntry) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *ValsetTimestampToIdxMapEntry) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

type AttestSnapshotsByReportMapEntry struct {
	Key       []byte   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Snapshots [][]byte `protobuf:"bytes,2,rep,name=snapshots,proto3" json:"snapshots,omitempty"`
}

func (m *AttestSnapshotsByReportMapEntry) Reset()         { *m = AttestSnapshotsByReportMapEntry{} }
func (m *AttestSnapshotsByReportMapEntry) String() string { return proto.CompactTextString(m) }
func (*AttestSnapshotsByReportMapEntry) ProtoMessage()    {}
func (*AttestSnapshotsByReportMapEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_233d9732da3f6137, []int{8}
}
func (m *AttestSnapshotsByReportMapEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AttestSnapshotsByReportMapEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AttestSnapshotsByReportMapEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AttestSnapshotsByReportMapEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttestSnapshotsByReportMapEntry.Merge(m, src)
}
func (m *AttestSnapshotsByReportMapEntry) XXX_Size() int {
	return m.Size()
}
func (m *AttestSnapshotsByReportMapEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_AttestSnapshotsByReportMapEntry.DiscardUnknown(m)
}

var xxx_messageInfo_AttestSnapshotsByReportMapEntry proto.InternalMessageInfo

func (m *AttestSnapshotsByReportMapEntry) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *AttestSnapshotsByReportMapEntry) GetSnapshots() [][]byte {
	if m != nil {
		return m.Snapshots
	}
	return nil
}

type AttestSnapshotDataMapEntry struct {
	Key                    []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	ValCheckpoint          []byte `protobuf:"bytes,2,opt,name=val_checkpoint,json=valCheckpoint,proto3" json:"val_checkpoint,omitempty"`
	PrevReportTimestamp    uint64 `protobuf:"varint,3,opt,name=prev_report_timestamp,json=prevReportTimestamp,proto3" json:"prev_report_timestamp,omitempty"`
	NextReportTimestamp    uint64 `protobuf:"varint,4,opt,name=next_report_timestamp,json=nextReportTimestamp,proto3" json:"next_report_timestamp,omitempty"`
	QueryId                []byte `protobuf:"bytes,5,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	Timestamp              uint64 `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	LastConsensusTimestamp uint64 `protobuf:"varint,7,opt,name=last_consensus_timestamp,json=lastConsensusTimestamp,proto3" json:"last_consensus_timestamp,omitempty"`
	AttestationTimestamp   uint64 `protobuf:"varint,8,opt,name=attestation_timestamp,json=attestationTimestamp,proto3" json:"attestation_timestamp,omitempty"`
}

func (m *AttestSnapshotDataMapEntry) Reset()         { *m = AttestSnapshotDataMapEntry{} }
func (m *AttestSnapshotDataMapEntry) String() string { return proto.CompactTextString(m) }
func (*AttestSnapshotDataMapEntry) ProtoMessage()    {}
func (*AttestSnapshotDataMapEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_233d9732da3f6137, []int{9}
}
func (m *AttestSnapshotDataMapEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AttestSnapshotDataMapEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AttestSnapshotDataMapEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AttestSnapshotDataMapEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttestSnapshotDataMapEntry.Merge(m, src)
}
func (m *AttestSnapshotDataMapEntry) XXX_Size() int {
	return m.Size()
}
func (m *AttestSnapshotDataMapEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_AttestSnapshotDataMapEntry.DiscardUnknown(m)
}

var xxx_messageInfo_AttestSnapshotDataMapEntry proto.InternalMessageInfo

func (m *AttestSnapshotDataMapEntry) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *AttestSnapshotDataMapEntry) GetValCheckpoint() []byte {
	if m != nil {
		return m.ValCheckpoint
	}
	return nil
}

func (m *AttestSnapshotDataMapEntry) GetPrevReportTimestamp() uint64 {
	if m != nil {
		return m.PrevReportTimestamp
	}
	return 0
}

func (m *AttestSnapshotDataMapEntry) GetNextReportTimestamp() uint64 {
	if m != nil {
		return m.NextReportTimestamp
	}
	return 0
}

func (m *AttestSnapshotDataMapEntry) GetQueryId() []byte {
	if m != nil {
		return m.QueryId
	}
	return nil
}

func (m *AttestSnapshotDataMapEntry) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *AttestSnapshotDataMapEntry) GetLastConsensusTimestamp() uint64 {
	if m != nil {
		return m.LastConsensusTimestamp
	}
	return 0
}

func (m *AttestSnapshotDataMapEntry) GetAttestationTimestamp() uint64 {
	if m != nil {
		return m.AttestationTimestamp
	}
	return 0
}

type SnapshotToAttestationsMapEntry struct {
	Snapshot     []byte   `protobuf:"bytes,1,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
	Attestations [][]byte `protobuf:"bytes,2,rep,name=attestations,proto3" json:"attestations,omitempty"`
}

func (m *SnapshotToAttestationsMapEntry) Reset()         { *m = SnapshotToAttestationsMapEntry{} }
func (m *SnapshotToAttestationsMapEntry) String() string { return proto.CompactTextString(m) }
func (*SnapshotToAttestationsMapEntry) ProtoMessage()    {}
func (*SnapshotToAttestationsMapEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_233d9732da3f6137, []int{10}
}
func (m *SnapshotToAttestationsMapEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SnapshotToAttestationsMapEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SnapshotToAttestationsMapEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SnapshotToAttestationsMapEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapshotToAttestationsMapEntry.Merge(m, src)
}
func (m *SnapshotToAttestationsMapEntry) XXX_Size() int {
	return m.Size()
}
func (m *SnapshotToAttestationsMapEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapshotToAttestationsMapEntry.DiscardUnknown(m)
}

var xxx_messageInfo_SnapshotToAttestationsMapEntry proto.InternalMessageInfo

func (m *SnapshotToAttestationsMapEntry) GetSnapshot() []byte {
	if m != nil {
		return m.Snapshot
	}
	return nil
}

func (m *SnapshotToAttestationsMapEntry) GetAttestations() [][]byte {
	if m != nil {
		return m.Attestations
	}
	return nil
}

type AttestRequestsByHeightMapEntry struct {
	BlockHeight uint64   `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	Requests    [][]byte `protobuf:"bytes,2,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (m *AttestRequestsByHeightMapEntry) Reset()         { *m = AttestRequestsByHeightMapEntry{} }
func (m *AttestRequestsByHeightMapEntry) String() string { return proto.CompactTextString(m) }
func (*AttestRequestsByHeightMapEntry) ProtoMessage()    {}
func (*AttestRequestsByHeightMapEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_233d9732da3f6137, []int{11}
}
func (m *AttestRequestsByHeightMapEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AttestRequestsByHeightMapEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AttestRequestsByHeightMapEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AttestRequestsByHeightMapEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttestRequestsByHeightMapEntry.Merge(m, src)
}
func (m *AttestRequestsByHeightMapEntry) XXX_Size() int {
	return m.Size()
}
func (m *AttestRequestsByHeightMapEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_AttestRequestsByHeightMapEntry.DiscardUnknown(m)
}

var xxx_messageInfo_AttestRequestsByHeightMapEntry proto.InternalMessageInfo

func (m *AttestRequestsByHeightMapEntry) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *AttestRequestsByHeightMapEntry) GetRequests() [][]byte {
	if m != nil {
		return m.Requests
	}
	return nil
}

type DepositIdClaimedMapEntry struct {
	DepositId uint64 `protobuf:"varint,1,opt,name=deposit_id,json=depositId,proto3" json:"deposit_id,omitempty"`
	IsClaimed bool   `protobuf:"varint,2,opt,name=isClaimed,proto3" json:"isClaimed,omitempty"`
}

func (m *DepositIdClaimedMapEntry) Reset()         { *m = DepositIdClaimedMapEntry{} }
func (m *DepositIdClaimedMapEntry) String() string { return proto.CompactTextString(m) }
func (*DepositIdClaimedMapEntry) ProtoMessage()    {}
func (*DepositIdClaimedMapEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_233d9732da3f6137, []int{12}
}
func (m *DepositIdClaimedMapEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DepositIdClaimedMapEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DepositIdClaimedMapEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DepositIdClaimedMapEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepositIdClaimedMapEntry.Merge(m, src)
}
func (m *DepositIdClaimedMapEntry) XXX_Size() int {
	return m.Size()
}
func (m *DepositIdClaimedMapEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_DepositIdClaimedMapEntry.DiscardUnknown(m)
}

var xxx_messageInfo_DepositIdClaimedMapEntry proto.InternalMessageInfo

func (m *DepositIdClaimedMapEntry) GetDepositId() uint64 {
	if m != nil {
		return m.DepositId
	}
	return 0
}

func (m *DepositIdClaimedMapEntry) GetIsClaimed() bool {
	if m != nil {
		return m.IsClaimed
	}
	return false
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "layer.bridge.GenesisState")
	proto.RegisterType((*OperatorToEVMAddressMapEntry)(nil), "layer.bridge.OperatorToEVMAddressMapEntry")
	proto.RegisterType((*EVMRegisteredMapEntry)(nil), "layer.bridge.EVMRegisteredMapEntry")
	proto.RegisterType((*BridgeValSetSigsMapEntry)(nil), "layer.bridge.BridgeValSetSigsMapEntry")
	proto.RegisterType((*ValidatorCheckpointParamsStateEntry)(nil), "layer.bridge.ValidatorCheckpointParamsStateEntry")
	proto.RegisterType((*ValidatorCheckpointIdxMapEntry)(nil), "layer.bridge.ValidatorCheckpointIdxMapEntry")
	proto.RegisterType((*BridgeValsetByTimestampMapEntry)(nil), "layer.bridge.BridgeValsetByTimestampMapEntry")
	proto.RegisterType((*ValsetTimestampToIdxMapEntry)(nil), "layer.bridge.ValsetTimestampToIdxMapEntry")
	proto.RegisterType((*AttestSnapshotsByReportMapEntry)(nil), "layer.bridge.AttestSnapshotsByReportMapEntry")
	proto.RegisterType((*AttestSnapshotDataMapEntry)(nil), "layer.bridge.AttestSnapshotDataMapEntry")
	proto.RegisterType((*SnapshotToAttestationsMapEntry)(nil), "layer.bridge.SnapshotToAttestationsMapEntry")
	proto.RegisterType((*AttestRequestsByHeightMapEntry)(nil), "layer.bridge.AttestRequestsByHeightMapEntry")
	proto.RegisterType((*DepositIdClaimedMapEntry)(nil), "layer.bridge.DepositIdClaimedMapEntry")
}

func init() { proto.RegisterFile("layer/bridge/genesis.proto", fileDescriptor_233d9732da3f6137) }

var fileDescriptor_233d9732da3f6137 = []byte{
	// 1185 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x57, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0xb6, 0x64, 0xf9, 0x6f, 0x4c, 0x3b, 0xee, 0xda, 0x4e, 0x68, 0x55, 0x91, 0x54, 0x1a, 0x29,
	0x9c, 0x22, 0xb1, 0x10, 0xe7, 0x52, 0xf4, 0x66, 0x39, 0x6e, 0x63, 0xa0, 0x46, 0x13, 0x4a, 0x70,
	0xd1, 0xf6, 0xc0, 0xae, 0xc4, 0x85, 0xc8, 0x9a, 0xd2, 0xd2, 0xdc, 0x35, 0x2d, 0xbd, 0x45, 0xfb,
	0x4a, 0x3d, 0xe5, 0x98, 0x63, 0x4f, 0x45, 0x61, 0xa3, 0xef, 0x51, 0x70, 0x97, 0x5c, 0x52, 0x36,
	0x29, 0xa5, 0x27, 0x89, 0xf3, 0xcd, 0xcc, 0xb7, 0x3b, 0x3b, 0xfb, 0x0d, 0x09, 0x55, 0x0f, 0x4f,
	0x48, 0xd0, 0xea, 0x05, 0xae, 0x3d, 0x20, 0xad, 0x01, 0x19, 0x11, 0xe6, 0xb2, 0x43, 0x3f, 0xa0,
	0x9c, 0x22, 0x4d, 0x60, 0x87, 0x12, 0xab, 0xee, 0x0c, 0xe8, 0x80, 0x0a, 0xa0, 0x15, 0xfd, 0x93,
	0x3e, 0xd5, 0xbd, 0xa9, 0x78, 0x1f, 0x07, 0x78, 0x18, 0x87, 0x57, 0xf5, 0x29, 0xe8, 0xea, 0x9a,
	0x04, 0x13, 0x89, 0x18, 0x7f, 0x6a, 0xa0, 0x7d, 0x27, 0xa9, 0x3a, 0x1c, 0x73, 0x82, 0x8e, 0x60,
	0x59, 0x86, 0xea, 0xa5, 0x66, 0xe9, 0x60, 0xfd, 0x68, 0xe7, 0x30, 0x4b, 0x7d, 0xf8, 0x4e, 0x60,
	0xed, 0xca, 0x87, 0xbf, 0x1b, 0x0b, 0x66, 0xec, 0x89, 0x9e, 0xc1, 0x26, 0x1b, 0x61, 0x9f, 0x39,
	0x94, 0x5b, 0x9e, 0x3b, 0x74, 0xb9, 0x5e, 0x6e, 0x96, 0x0e, 0x2a, 0xe6, 0x46, 0x62, 0xfd, 0x3e,
	0x32, 0xa2, 0x6f, 0x61, 0x53, 0x66, 0xb1, 0x42, 0xec, 0x59, 0x8c, 0x70, 0x7d, 0x51, 0x50, 0x34,
	0xa7, 0x29, 0xda, 0xe2, 0xe7, 0x02, 0x7b, 0xae, 0x8d, 0x39, 0x0d, 0x3a, 0x84, 0x9b, 0x5a, 0x2f,
	0xb1, 0x75, 0x08, 0x47, 0xaf, 0x60, 0x27, 0x4c, 0x50, 0xab, 0xef, 0x90, 0xfe, 0xa5, 0x4f, 0xdd,
	0x11, 0xd7, 0x2b, 0xcd, 0xd2, 0x81, 0x66, 0x6e, 0x2b, 0xec, 0x44, 0x41, 0x68, 0x1f, 0x36, 0x6e,
	0x5c, 0xee, 0xd8, 0x01, 0xbe, 0xc1, 0x9e, 0xe5, 0xda, 0xfa, 0x92, 0x58, 0xa0, 0x96, 0x1a, 0xcf,
	0x6c, 0xe4, 0xc0, 0xe7, 0xd4, 0x27, 0x81, 0x48, 0xcb, 0xa9, 0x45, 0xc2, 0xa1, 0x85, 0x6d, 0x3b,
	0x20, 0x8c, 0x59, 0x43, 0xec, 0xeb, 0xcb, 0xcd, 0xc5, 0x83, 0xf5, 0xa3, 0xaf, 0xa6, 0x17, 0xfb,
	0x43, 0x1c, 0xd0, 0xa5, 0xa7, 0x17, 0xe7, 0xc7, 0xd2, 0xfb, 0x1c, 0xfb, 0xa7, 0x23, 0x1e, 0x4c,
	0xcc, 0x27, 0x34, 0x45, 0xc3, 0x61, 0x8a, 0xa2, 0xf7, 0x80, 0xa2, 0xec, 0x01, 0x19, 0xb8, 0x8c,
	0x93, 0x80, 0xd8, 0x82, 0x60, 0x45, 0x10, 0xec, 0x4f, 0x13, 0x9c, 0x5e, 0x9c, 0x9b, 0xca, 0x4d,
	0x65, 0xde, 0x22, 0xe1, 0x70, 0xca, 0x8c, 0x7e, 0x81, 0xc7, 0x69, 0x71, 0x19, 0xe1, 0x16, 0x73,
	0x07, 0x72, 0xdd, 0xab, 0x22, 0xed, 0x97, 0x05, 0x45, 0xee, 0x10, 0xde, 0x71, 0x07, 0xe9, 0x9a,
	0xb7, 0x55, 0xa9, 0x99, 0x42, 0xd0, 0x18, 0x1a, 0x79, 0x15, 0xb7, 0xe4, 0xf9, 0x0b, 0x96, 0x35,
	0xc1, 0xf2, 0x6a, 0x9a, 0xe5, 0xe2, 0xe1, 0x51, 0xc8, 0x06, 0x12, 0xbd, 0x26, 0x09, 0x6b, 0x61,
	0x91, 0x53, 0xc4, 0x3c, 0x84, 0x5a, 0x2e, 0xb3, 0x6b, 0x8f, 0x05, 0x2d, 0x08, 0xda, 0x17, 0x73,
	0x69, 0xcf, 0xec, 0xb1, 0xda, 0xe2, 0x5e, 0x58, 0x84, 0xa3, 0x53, 0x68, 0x78, 0x98, 0x13, 0xc6,
	0xad, 0x22, 0x56, 0x7d, 0x5d, 0x74, 0x4e, 0x4d, 0xba, 0xe5, 0x33, 0xa1, 0x2b, 0xa8, 0x4f, 0x1f,
	0x46, 0x6f, 0x62, 0x71, 0x77, 0x48, 0x18, 0xc7, 0x43, 0x5f, 0xac, 0x5b, 0x13, 0xeb, 0x7e, 0x59,
	0x70, 0x28, 0x8c, 0xf0, 0xf6, 0xa4, 0x9b, 0x04, 0xa8, 0x85, 0x57, 0x7b, 0x85, 0x0e, 0x51, 0xf3,
	0xc6, 0x5c, 0x29, 0x11, 0xa7, 0xaa, 0x4e, 0x1b, 0x79, 0xcd, 0x2b, 0x13, 0xa9, 0x34, 0x5d, 0x9a,
	0xad, 0xd2, 0x93, 0x30, 0x1f, 0x8d, 0x36, 0x87, 0xb9, 0xa8, 0x51, 0x72, 0xbd, 0x59, 0xb4, 0xbf,
	0x80, 0xf8, 0x34, 0xe0, 0x82, 0x6c, 0x33, 0x6f, 0x73, 0xc7, 0x22, 0xa6, 0x93, 0x84, 0xb4, 0x27,
	0xa6, 0x08, 0x48, 0x37, 0x87, 0x0b, 0x1d, 0x10, 0x06, 0xfd, 0x1e, 0xa5, 0x65, 0x63, 0x8e, 0x05,
	0xd9, 0x23, 0x41, 0x76, 0x30, 0x8b, 0xec, 0x0d, 0xe6, 0x58, 0xf1, 0xec, 0xe2, 0x3c, 0x2c, 0x6a,
	0x34, 0x95, 0x9b, 0x53, 0x4b, 0x3a, 0x61, 0xee, 0xd2, 0x91, 0xec, 0xef, 0xad, 0xbc, 0x46, 0x4b,
	0x92, 0x74, 0xe9, 0x71, 0xc6, 0x3f, 0x6d, 0x34, 0x56, 0x84, 0xa3, 0x11, 0x3c, 0x8d, 0x77, 0x14,
	0x90, 0xab, 0x6b, 0xc2, 0x64, 0x0d, 0x1d, 0xe2, 0x0e, 0x1c, 0x59, 0xc3, 0xcf, 0xf2, 0xf8, 0x64,
	0x16, 0x33, 0x8e, 0x68, 0x4f, 0xde, 0x0a, 0xff, 0x94, 0x0f, 0x17, 0xe1, 0x91, 0x3c, 0xd8, 0xc4,
	0xa7, 0xcc, 0x8d, 0x9a, 0xd8, 0xea, 0x7b, 0xd8, 0x1d, 0xc6, 0xaa, 0x83, 0xf2, 0xe4, 0xe1, 0x8d,
	0xf4, 0x3d, 0xb3, 0x4f, 0xa4, 0x67, 0x2a, 0x0f, 0xf6, 0x43, 0xc4, 0xf8, 0x0d, 0x6a, 0xb3, 0x74,
	0x10, 0x3d, 0x87, 0x2d, 0x25, 0xac, 0xb1, 0xa2, 0x8a, 0xe9, 0xb2, 0x66, 0x3e, 0x4a, 0xec, 0x71,
	0x08, 0x6a, 0xc0, 0x7a, 0x46, 0x77, 0xc5, 0x1c, 0xd1, 0x4c, 0x20, 0x4a, 0x3d, 0x8d, 0x1e, 0xec,
	0xe6, 0x4a, 0xe2, 0xff, 0x21, 0xa9, 0x03, 0xa4, 0xd2, 0x2b, 0x38, 0x56, 0xcd, 0x8c, 0xc5, 0xf8,
	0x09, 0xf4, 0x22, 0x7d, 0x44, 0x35, 0x58, 0x53, 0x17, 0x4c, 0xe4, 0xaf, 0x98, 0xa9, 0x21, 0x5a,
	0x7e, 0x46, 0x7e, 0xf5, 0x72, 0x73, 0x31, 0x5a, 0x7e, 0xa8, 0xc4, 0xd4, 0xf8, 0xa3, 0x0c, 0xfb,
	0x9f, 0xa0, 0x8a, 0x73, 0x68, 0x5a, 0x90, 0x4e, 0xb9, 0xf4, 0xbe, 0xc7, 0x53, 0x17, 0x29, 0x48,
	0xdd, 0x5d, 0xf4, 0x0d, 0xa4, 0xa2, 0x67, 0xf9, 0xf4, 0x86, 0x04, 0x16, 0x77, 0x02, 0xc2, 0x1c,
	0xea, 0xd9, 0x62, 0x0a, 0x57, 0xc4, 0x7d, 0x97, 0x0e, 0xef, 0x22, 0xbc, 0x9b, 0xc0, 0xe8, 0x05,
	0xa4, 0x19, 0xa3, 0xa9, 0x6d, 0x39, 0x98, 0x39, 0xf1, 0xb0, 0xdd, 0x0a, 0x33, 0x63, 0xfa, 0x2d,
	0x66, 0x4e, 0xe1, 0x70, 0x5e, 0x2a, 0x1c, 0xce, 0x46, 0x17, 0xea, 0xb3, 0x15, 0x1b, 0xed, 0xc0,
	0x92, 0x3b, 0xb2, 0xc9, 0x38, 0xae, 0x84, 0x7c, 0x98, 0xae, 0x51, 0xf9, 0x5e, 0x8d, 0x8c, 0x09,
	0x34, 0xe6, 0xe8, 0xe9, 0x9c, 0x22, 0x7f, 0x0d, 0xcb, 0xf2, 0xe0, 0x44, 0xee, 0x4f, 0x79, 0x4d,
	0x89, 0xfd, 0x0d, 0x13, 0x6a, 0xb3, 0xa4, 0x75, 0x0e, 0xaf, 0xda, 0x6c, 0x39, 0xb3, 0x59, 0xe3,
	0x3d, 0x34, 0xe6, 0x28, 0x28, 0xda, 0x82, 0xc5, 0x4b, 0x32, 0x11, 0x09, 0x35, 0x33, 0xfa, 0x1b,
	0x11, 0x29, 0x8d, 0x8e, 0x9b, 0x31, 0x35, 0x18, 0xff, 0x96, 0xa1, 0x5a, 0x2c, 0x94, 0x39, 0xe9,
	0x9e, 0xc1, 0x66, 0xf4, 0xe6, 0x96, 0x39, 0x55, 0x79, 0x3f, 0x37, 0x42, 0xec, 0x65, 0x5e, 0xb6,
	0x8e, 0x60, 0xd7, 0x0f, 0x48, 0x98, 0x4c, 0x84, 0x74, 0xab, 0xb2, 0xd1, 0xb6, 0x23, 0x50, 0x2e,
	0x3d, 0x6d, 0xd0, 0x23, 0xd8, 0x1d, 0x91, 0x31, 0x7f, 0x18, 0x53, 0x91, 0x31, 0x11, 0x78, 0x3f,
	0x66, 0x0f, 0x56, 0xc5, 0xab, 0x6c, 0xf2, 0x3e, 0xa7, 0x99, 0x2b, 0xe2, 0xf9, 0xcc, 0x9e, 0xae,
	0xf0, 0xf2, 0xc3, 0x93, 0xd5, 0x3d, 0xcc, 0xb8, 0xd5, 0xa7, 0x23, 0x46, 0x46, 0xec, 0x9a, 0x65,
	0xf8, 0x56, 0x84, 0xf3, 0xe3, 0x08, 0x3f, 0x49, 0xe0, 0x94, 0xf2, 0x35, 0xec, 0x66, 0x26, 0x43,
	0x26, 0x6c, 0x55, 0x84, 0xed, 0x64, 0x40, 0x15, 0x64, 0xfc, 0x0a, 0xf5, 0xd9, 0x83, 0x02, 0x55,
	0x61, 0x35, 0x39, 0x96, 0xb8, 0xde, 0xea, 0x19, 0x19, 0xa0, 0x65, 0x87, 0x51, 0x7c, 0x8c, 0x53,
	0x36, 0xc3, 0x82, 0xfa, 0xec, 0xd1, 0x80, 0xbe, 0x00, 0xad, 0xe7, 0xd1, 0xfe, 0x65, 0x3c, 0x62,
	0xe2, 0xae, 0x5b, 0x17, 0x36, 0xe9, 0x1a, 0x2d, 0x22, 0x99, 0x45, 0x31, 0x89, 0x7a, 0x36, 0x7e,
	0x04, 0xbd, 0x68, 0x24, 0xa0, 0xa7, 0x00, 0xe9, 0x68, 0x49, 0xda, 0x59, 0x8d, 0x89, 0xe8, 0x28,
	0x5c, 0x16, 0xc7, 0xc4, 0x5a, 0x9b, 0x1a, 0xda, 0x27, 0x1f, 0x6e, 0xeb, 0xa5, 0x8f, 0xb7, 0xf5,
	0xd2, 0x3f, 0xb7, 0xf5, 0xd2, 0xef, 0x77, 0xf5, 0x85, 0x8f, 0x77, 0xf5, 0x85, 0xbf, 0xee, 0xea,
	0x0b, 0x3f, 0x3f, 0x1f, 0xb8, 0xdc, 0xb9, 0xee, 0x1d, 0xf6, 0xe9, 0xb0, 0xc5, 0x89, 0xe7, 0xd1,
	0xe0, 0xa5, 0x4b, 0x5b, 0xf2, 0x43, 0x66, 0x9c, 0x7c, 0xca, 0xf0, 0x89, 0x4f, 0x58, 0x6f, 0x59,
	0x7c, 0xcb, 0xbc, 0xfe, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x44, 0x28, 0xeb, 0xe8, 0x42, 0x0d, 0x00,
	0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DepositIdClaimedMap) > 0 {
		for iNdEx := len(m.DepositIdClaimedMap) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DepositIdClaimedMap[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
	}
	if len(m.AttestRequestsByHeightMap) > 0 {
		for iNdEx := len(m.AttestRequestsByHeightMap) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AttestRequestsByHeightMap[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
	}
	if len(m.SnapshotToAttestationsMap) > 0 {
		for iNdEx := len(m.SnapshotToAttestationsMap) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SnapshotToAttestationsMap[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if len(m.AttestSnapshotDataMap) > 0 {
		for iNdEx := len(m.AttestSnapshotDataMap) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AttestSnapshotDataMap[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x7a
		}
	}
	if len(m.AttestSnapshotsByReportMap) > 0 {
		for iNdEx := len(m.AttestSnapshotsByReportMap) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AttestSnapshotsByReportMap[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	if len(m.ValsetTimestampToIdxMap) > 0 {
		for iNdEx := len(m.ValsetTimestampToIdxMap) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValsetTimestampToIdxMap[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	if len(m.BridgeValsetByTimestampMap) > 0 {
		for iNdEx := len(m.BridgeValsetByTimestampMap) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BridgeValsetByTimestampMap[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if m.LatestValidatorCheckpointIdx != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.LatestValidatorCheckpointIdx))
		i--
		dAtA[i] = 0x58
	}
	if len(m.ValidatorCheckpointIdxMap) > 0 {
		for iNdEx := len(m.ValidatorCheckpointIdxMap) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValidatorCheckpointIdxMap[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.ValidatorCheckpointParamsMap) > 0 {
		for iNdEx := len(m.ValidatorCheckpointParamsMap) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValidatorCheckpointParamsMap[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.BridgeValsetSigsMap) > 0 {
		for iNdEx := len(m.BridgeValsetSigsMap) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BridgeValsetSigsMap[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.EvmRegisteredMap) > 0 {
		for iNdEx := len(m.EvmRegisteredMap) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EvmRegisteredMap[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.OperatorToEvmAddressMap) > 0 {
		for iNdEx := len(m.OperatorToEvmAddressMap) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OperatorToEvmAddressMap[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.WithdrawalId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.WithdrawalId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ValidatorCheckpoint) > 0 {
		i -= len(m.ValidatorCheckpoint)
		copy(dAtA[i:], m.ValidatorCheckpoint)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.ValidatorCheckpoint)))
		i--
		dAtA[i] = 0x22
	}
	if m.BridgeValSet != nil {
		{
			size, err := m.BridgeValSet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.SnapshotLimit != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.SnapshotLimit))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *OperatorToEVMAddressMapEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperatorToEVMAddressMapEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperatorToEVMAddressMapEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EvmAddress) > 0 {
		i -= len(m.EvmAddress)
		copy(dAtA[i:], m.EvmAddress)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.EvmAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EVMRegisteredMapEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EVMRegisteredMapEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EVMRegisteredMapEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Registered {
		i--
		if m.Registered {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BridgeValSetSigsMapEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BridgeValSetSigsMapEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BridgeValSetSigsMapEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValsetSigs) > 0 {
		for iNdEx := len(m.ValsetSigs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ValsetSigs[iNdEx])
			copy(dAtA[i:], m.ValsetSigs[iNdEx])
			i = encodeVarintGenesis(dAtA, i, uint64(len(m.ValsetSigs[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Timestamp != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorCheckpointParamsStateEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorCheckpointParamsStateEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorCheckpointParamsStateEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorCheckpoint) > 0 {
		i -= len(m.ValidatorCheckpoint)
		copy(dAtA[i:], m.ValidatorCheckpoint)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.ValidatorCheckpoint)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ValidatorSetHash) > 0 {
		i -= len(m.ValidatorSetHash)
		copy(dAtA[i:], m.ValidatorSetHash)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.ValidatorSetHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.ValidatorPowerThreshold != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.ValidatorPowerThreshold))
		i--
		dAtA[i] = 0x18
	}
	if m.ValidatorTimestamp != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.ValidatorTimestamp))
		i--
		dAtA[i] = 0x10
	}
	if m.Timestamp != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorCheckpointIdxMapEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorCheckpointIdxMapEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorCheckpointIdxMapEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x10
	}
	if m.Index != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BridgeValsetByTimestampMapEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BridgeValsetByTimestampMapEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BridgeValsetByTimestampMapEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Valset != nil {
		{
			size, err := m.Valset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Timestamp != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ValsetTimestampToIdxMapEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValsetTimestampToIdxMapEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValsetTimestampToIdxMapEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x10
	}
	if m.Timestamp != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AttestSnapshotsByReportMapEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AttestSnapshotsByReportMapEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AttestSnapshotsByReportMapEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Snapshots) > 0 {
		for iNdEx := len(m.Snapshots) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Snapshots[iNdEx])
			copy(dAtA[i:], m.Snapshots[iNdEx])
			i = encodeVarintGenesis(dAtA, i, uint64(len(m.Snapshots[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AttestSnapshotDataMapEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AttestSnapshotDataMapEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AttestSnapshotDataMapEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AttestationTimestamp != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.AttestationTimestamp))
		i--
		dAtA[i] = 0x40
	}
	if m.LastConsensusTimestamp != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.LastConsensusTimestamp))
		i--
		dAtA[i] = 0x38
	}
	if m.Timestamp != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x30
	}
	if len(m.QueryId) > 0 {
		i -= len(m.QueryId)
		copy(dAtA[i:], m.QueryId)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.QueryId)))
		i--
		dAtA[i] = 0x2a
	}
	if m.NextReportTimestamp != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.NextReportTimestamp))
		i--
		dAtA[i] = 0x20
	}
	if m.PrevReportTimestamp != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.PrevReportTimestamp))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ValCheckpoint) > 0 {
		i -= len(m.ValCheckpoint)
		copy(dAtA[i:], m.ValCheckpoint)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.ValCheckpoint)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SnapshotToAttestationsMapEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnapshotToAttestationsMapEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SnapshotToAttestationsMapEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Attestations) > 0 {
		for iNdEx := len(m.Attestations) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Attestations[iNdEx])
			copy(dAtA[i:], m.Attestations[iNdEx])
			i = encodeVarintGenesis(dAtA, i, uint64(len(m.Attestations[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Snapshot) > 0 {
		i -= len(m.Snapshot)
		copy(dAtA[i:], m.Snapshot)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Snapshot)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AttestRequestsByHeightMapEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AttestRequestsByHeightMapEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AttestRequestsByHeightMapEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Requests) > 0 {
		for iNdEx := len(m.Requests) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Requests[iNdEx])
			copy(dAtA[i:], m.Requests[iNdEx])
			i = encodeVarintGenesis(dAtA, i, uint64(len(m.Requests[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.BlockHeight != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DepositIdClaimedMapEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DepositIdClaimedMapEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DepositIdClaimedMapEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsClaimed {
		i--
		if m.IsClaimed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.DepositId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.DepositId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if m.SnapshotLimit != 0 {
		n += 1 + sovGenesis(uint64(m.SnapshotLimit))
	}
	if m.BridgeValSet != nil {
		l = m.BridgeValSet.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.ValidatorCheckpoint)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.WithdrawalId != 0 {
		n += 1 + sovGenesis(uint64(m.WithdrawalId))
	}
	if len(m.OperatorToEvmAddressMap) > 0 {
		for _, e := range m.OperatorToEvmAddressMap {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.EvmRegisteredMap) > 0 {
		for _, e := range m.EvmRegisteredMap {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.BridgeValsetSigsMap) > 0 {
		for _, e := range m.BridgeValsetSigsMap {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.ValidatorCheckpointParamsMap) > 0 {
		for _, e := range m.ValidatorCheckpointParamsMap {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.ValidatorCheckpointIdxMap) > 0 {
		for _, e := range m.ValidatorCheckpointIdxMap {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.LatestValidatorCheckpointIdx != 0 {
		n += 1 + sovGenesis(uint64(m.LatestValidatorCheckpointIdx))
	}
	if len(m.BridgeValsetByTimestampMap) > 0 {
		for _, e := range m.BridgeValsetByTimestampMap {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.ValsetTimestampToIdxMap) > 0 {
		for _, e := range m.ValsetTimestampToIdxMap {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.AttestSnapshotsByReportMap) > 0 {
		for _, e := range m.AttestSnapshotsByReportMap {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.AttestSnapshotDataMap) > 0 {
		for _, e := range m.AttestSnapshotDataMap {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.SnapshotToAttestationsMap) > 0 {
		for _, e := range m.SnapshotToAttestationsMap {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.AttestRequestsByHeightMap) > 0 {
		for _, e := range m.AttestRequestsByHeightMap {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.DepositIdClaimedMap) > 0 {
		for _, e := range m.DepositIdClaimedMap {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *OperatorToEVMAddressMapEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.EvmAddress)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *EVMRegisteredMapEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.Registered {
		n += 2
	}
	return n
}

func (m *BridgeValSetSigsMapEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovGenesis(uint64(m.Timestamp))
	}
	if len(m.ValsetSigs) > 0 {
		for _, b := range m.ValsetSigs {
			l = len(b)
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *ValidatorCheckpointParamsStateEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovGenesis(uint64(m.Timestamp))
	}
	if m.ValidatorTimestamp != 0 {
		n += 1 + sovGenesis(uint64(m.ValidatorTimestamp))
	}
	if m.ValidatorPowerThreshold != 0 {
		n += 1 + sovGenesis(uint64(m.ValidatorPowerThreshold))
	}
	l = len(m.ValidatorSetHash)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.ValidatorCheckpoint)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *ValidatorCheckpointIdxMapEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovGenesis(uint64(m.Index))
	}
	if m.Timestamp != 0 {
		n += 1 + sovGenesis(uint64(m.Timestamp))
	}
	return n
}

func (m *BridgeValsetByTimestampMapEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovGenesis(uint64(m.Timestamp))
	}
	if m.Valset != nil {
		l = m.Valset.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *ValsetTimestampToIdxMapEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovGenesis(uint64(m.Timestamp))
	}
	if m.Index != 0 {
		n += 1 + sovGenesis(uint64(m.Index))
	}
	return n
}

func (m *AttestSnapshotsByReportMapEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.Snapshots) > 0 {
		for _, b := range m.Snapshots {
			l = len(b)
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *AttestSnapshotDataMapEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.ValCheckpoint)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.PrevReportTimestamp != 0 {
		n += 1 + sovGenesis(uint64(m.PrevReportTimestamp))
	}
	if m.NextReportTimestamp != 0 {
		n += 1 + sovGenesis(uint64(m.NextReportTimestamp))
	}
	l = len(m.QueryId)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovGenesis(uint64(m.Timestamp))
	}
	if m.LastConsensusTimestamp != 0 {
		n += 1 + sovGenesis(uint64(m.LastConsensusTimestamp))
	}
	if m.AttestationTimestamp != 0 {
		n += 1 + sovGenesis(uint64(m.AttestationTimestamp))
	}
	return n
}

func (m *SnapshotToAttestationsMapEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Snapshot)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.Attestations) > 0 {
		for _, b := range m.Attestations {
			l = len(b)
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *AttestRequestsByHeightMapEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeight != 0 {
		n += 1 + sovGenesis(uint64(m.BlockHeight))
	}
	if len(m.Requests) > 0 {
		for _, b := range m.Requests {
			l = len(b)
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *DepositIdClaimedMapEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DepositId != 0 {
		n += 1 + sovGenesis(uint64(m.DepositId))
	}
	if m.IsClaimed {
		n += 2
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnapshotLimit", wireType)
			}
			m.SnapshotLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SnapshotLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeValSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BridgeValSet == nil {
				m.BridgeValSet = &BridgeValidatorSet{}
			}
			if err := m.BridgeValSet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorCheckpoint", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorCheckpoint = append(m.ValidatorCheckpoint[:0], dAtA[iNdEx:postIndex]...)
			if m.ValidatorCheckpoint == nil {
				m.ValidatorCheckpoint = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawalId", wireType)
			}
			m.WithdrawalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithdrawalId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorToEvmAddressMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorToEvmAddressMap = append(m.OperatorToEvmAddressMap, &OperatorToEVMAddressMapEntry{})
			if err := m.OperatorToEvmAddressMap[len(m.OperatorToEvmAddressMap)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvmRegisteredMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EvmRegisteredMap = append(m.EvmRegisteredMap, &EVMRegisteredMapEntry{})
			if err := m.EvmRegisteredMap[len(m.EvmRegisteredMap)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeValsetSigsMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgeValsetSigsMap = append(m.BridgeValsetSigsMap, &BridgeValSetSigsMapEntry{})
			if err := m.BridgeValsetSigsMap[len(m.BridgeValsetSigsMap)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorCheckpointParamsMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorCheckpointParamsMap = append(m.ValidatorCheckpointParamsMap, &ValidatorCheckpointParamsStateEntry{})
			if err := m.ValidatorCheckpointParamsMap[len(m.ValidatorCheckpointParamsMap)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorCheckpointIdxMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorCheckpointIdxMap = append(m.ValidatorCheckpointIdxMap, &ValidatorCheckpointIdxMapEntry{})
			if err := m.ValidatorCheckpointIdxMap[len(m.ValidatorCheckpointIdxMap)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestValidatorCheckpointIdx", wireType)
			}
			m.LatestValidatorCheckpointIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatestValidatorCheckpointIdx |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeValsetByTimestampMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgeValsetByTimestampMap = append(m.BridgeValsetByTimestampMap, &BridgeValsetByTimestampMapEntry{})
			if err := m.BridgeValsetByTimestampMap[len(m.BridgeValsetByTimestampMap)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValsetTimestampToIdxMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValsetTimestampToIdxMap = append(m.ValsetTimestampToIdxMap, &ValsetTimestampToIdxMapEntry{})
			if err := m.ValsetTimestampToIdxMap[len(m.ValsetTimestampToIdxMap)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttestSnapshotsByReportMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttestSnapshotsByReportMap = append(m.AttestSnapshotsByReportMap, &AttestSnapshotsByReportMapEntry{})
			if err := m.AttestSnapshotsByReportMap[len(m.AttestSnapshotsByReportMap)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttestSnapshotDataMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttestSnapshotDataMap = append(m.AttestSnapshotDataMap, &AttestSnapshotDataMapEntry{})
			if err := m.AttestSnapshotDataMap[len(m.AttestSnapshotDataMap)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnapshotToAttestationsMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SnapshotToAttestationsMap = append(m.SnapshotToAttestationsMap, &SnapshotToAttestationsMapEntry{})
			if err := m.SnapshotToAttestationsMap[len(m.SnapshotToAttestationsMap)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttestRequestsByHeightMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttestRequestsByHeightMap = append(m.AttestRequestsByHeightMap, &AttestRequestsByHeightMapEntry{})
			if err := m.AttestRequestsByHeightMap[len(m.AttestRequestsByHeightMap)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositIdClaimedMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositIdClaimedMap = append(m.DepositIdClaimedMap, &DepositIdClaimedMapEntry{})
			if err := m.DepositIdClaimedMap[len(m.DepositIdClaimedMap)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperatorToEVMAddressMapEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperatorToEVMAddressMapEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperatorToEVMAddressMapEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvmAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EvmAddress = append(m.EvmAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.EvmAddress == nil {
				m.EvmAddress = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EVMRegisteredMapEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EVMRegisteredMapEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EVMRegisteredMapEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Registered", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Registered = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BridgeValSetSigsMapEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BridgeValSetSigsMapEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BridgeValSetSigsMapEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValsetSigs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValsetSigs = append(m.ValsetSigs, make([]byte, postIndex-iNdEx))
			copy(m.ValsetSigs[len(m.ValsetSigs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorCheckpointParamsStateEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorCheckpointParamsStateEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorCheckpointParamsStateEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorTimestamp", wireType)
			}
			m.ValidatorTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorPowerThreshold", wireType)
			}
			m.ValidatorPowerThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorPowerThreshold |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorSetHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorSetHash = append(m.ValidatorSetHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ValidatorSetHash == nil {
				m.ValidatorSetHash = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorCheckpoint", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorCheckpoint = append(m.ValidatorCheckpoint[:0], dAtA[iNdEx:postIndex]...)
			if m.ValidatorCheckpoint == nil {
				m.ValidatorCheckpoint = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorCheckpointIdxMapEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorCheckpointIdxMapEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorCheckpointIdxMapEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BridgeValsetByTimestampMapEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BridgeValsetByTimestampMapEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BridgeValsetByTimestampMapEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Valset == nil {
				m.Valset = &BridgeValidatorSet{}
			}
			if err := m.Valset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValsetTimestampToIdxMapEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValsetTimestampToIdxMapEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValsetTimestampToIdxMapEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AttestSnapshotsByReportMapEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttestSnapshotsByReportMapEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttestSnapshotsByReportMapEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Snapshots", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Snapshots = append(m.Snapshots, make([]byte, postIndex-iNdEx))
			copy(m.Snapshots[len(m.Snapshots)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AttestSnapshotDataMapEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttestSnapshotDataMapEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttestSnapshotDataMapEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValCheckpoint", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValCheckpoint = append(m.ValCheckpoint[:0], dAtA[iNdEx:postIndex]...)
			if m.ValCheckpoint == nil {
				m.ValCheckpoint = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevReportTimestamp", wireType)
			}
			m.PrevReportTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrevReportTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextReportTimestamp", wireType)
			}
			m.NextReportTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextReportTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryId = append(m.QueryId[:0], dAtA[iNdEx:postIndex]...)
			if m.QueryId == nil {
				m.QueryId = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastConsensusTimestamp", wireType)
			}
			m.LastConsensusTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastConsensusTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttestationTimestamp", wireType)
			}
			m.AttestationTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttestationTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnapshotToAttestationsMapEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnapshotToAttestationsMapEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnapshotToAttestationsMapEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Snapshot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Snapshot = append(m.Snapshot[:0], dAtA[iNdEx:postIndex]...)
			if m.Snapshot == nil {
				m.Snapshot = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attestations", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attestations = append(m.Attestations, make([]byte, postIndex-iNdEx))
			copy(m.Attestations[len(m.Attestations)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AttestRequestsByHeightMapEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttestRequestsByHeightMapEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttestRequestsByHeightMapEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requests", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requests = append(m.Requests, make([]byte, postIndex-iNdEx))
			copy(m.Requests[len(m.Requests)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DepositIdClaimedMapEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DepositIdClaimedMapEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DepositIdClaimedMapEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositId", wireType)
			}
			m.DepositId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DepositId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsClaimed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsClaimed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
