// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: layer/bridge/storage.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BoolSubmitted struct {
	Submitted bool `protobuf:"varint,1,opt,name=submitted,proto3" json:"submitted,omitempty"`
}

func (m *BoolSubmitted) Reset()         { *m = BoolSubmitted{} }
func (m *BoolSubmitted) String() string { return proto.CompactTextString(m) }
func (*BoolSubmitted) ProtoMessage()    {}
func (*BoolSubmitted) Descriptor() ([]byte, []int) {
	return fileDescriptor_b548087956ceba2c, []int{0}
}
func (m *BoolSubmitted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BoolSubmitted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BoolSubmitted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BoolSubmitted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BoolSubmitted.Merge(m, src)
}
func (m *BoolSubmitted) XXX_Size() int {
	return m.Size()
}
func (m *BoolSubmitted) XXX_DiscardUnknown() {
	xxx_messageInfo_BoolSubmitted.DiscardUnknown(m)
}

var xxx_messageInfo_BoolSubmitted proto.InternalMessageInfo

func (m *BoolSubmitted) GetSubmitted() bool {
	if m != nil {
		return m.Submitted
	}
	return false
}

type ValidatorCheckpointParams struct {
	Checkpoint     []byte `protobuf:"bytes,1,opt,name=checkpoint,proto3" json:"checkpoint,omitempty"`
	ValsetHash     []byte `protobuf:"bytes,2,opt,name=valset_hash,json=valsetHash,proto3" json:"valset_hash,omitempty"`
	Timestamp      uint64 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	PowerThreshold uint64 `protobuf:"varint,4,opt,name=power_threshold,json=powerThreshold,proto3" json:"power_threshold,omitempty"`
	BlockHeight    uint64 `protobuf:"varint,5,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *ValidatorCheckpointParams) Reset()         { *m = ValidatorCheckpointParams{} }
func (m *ValidatorCheckpointParams) String() string { return proto.CompactTextString(m) }
func (*ValidatorCheckpointParams) ProtoMessage()    {}
func (*ValidatorCheckpointParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_b548087956ceba2c, []int{1}
}
func (m *ValidatorCheckpointParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorCheckpointParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorCheckpointParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorCheckpointParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorCheckpointParams.Merge(m, src)
}
func (m *ValidatorCheckpointParams) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorCheckpointParams) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorCheckpointParams.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorCheckpointParams proto.InternalMessageInfo

func (m *ValidatorCheckpointParams) GetCheckpoint() []byte {
	if m != nil {
		return m.Checkpoint
	}
	return nil
}

func (m *ValidatorCheckpointParams) GetValsetHash() []byte {
	if m != nil {
		return m.ValsetHash
	}
	return nil
}

func (m *ValidatorCheckpointParams) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *ValidatorCheckpointParams) GetPowerThreshold() uint64 {
	if m != nil {
		return m.PowerThreshold
	}
	return 0
}

func (m *ValidatorCheckpointParams) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func init() {
	proto.RegisterType((*BoolSubmitted)(nil), "layer.bridge.BoolSubmitted")
	proto.RegisterType((*ValidatorCheckpointParams)(nil), "layer.bridge.ValidatorCheckpointParams")
}

func init() { proto.RegisterFile("layer/bridge/storage.proto", fileDescriptor_b548087956ceba2c) }

var fileDescriptor_b548087956ceba2c = []byte{
	// 329 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0xd1, 0xc1, 0x4e, 0x32, 0x31,
	0x10, 0x07, 0x70, 0xf6, 0xfb, 0xd0, 0x68, 0x41, 0x4d, 0x36, 0x26, 0xae, 0xc4, 0x54, 0xe4, 0x22,
	0x1e, 0xa0, 0x21, 0xbe, 0x01, 0x5c, 0x38, 0x1a, 0x34, 0x1e, 0xbc, 0x90, 0xee, 0xee, 0x64, 0xdb,
	0xd0, 0x65, 0x36, 0xed, 0x80, 0xf2, 0x16, 0x3e, 0x95, 0xf1, 0xc8, 0xd1, 0xa3, 0x81, 0x17, 0x31,
	0x74, 0x41, 0x3c, 0xed, 0xec, 0xef, 0xff, 0x6f, 0x9a, 0x74, 0x58, 0xc3, 0xc8, 0x05, 0x58, 0x11,
	0x5b, 0x9d, 0x66, 0x20, 0x1c, 0xa1, 0x95, 0x19, 0x74, 0x0b, 0x8b, 0x84, 0x61, 0xdd, 0x67, 0xdd,
	0x32, 0x6b, 0xf0, 0x04, 0x5d, 0x8e, 0x4e, 0xc4, 0xd2, 0x81, 0x98, 0xf7, 0x62, 0x20, 0xd9, 0x13,
	0x09, 0xea, 0x69, 0xd9, 0x6e, 0x5c, 0x6c, 0xf3, 0xdc, 0x65, 0x62, 0xde, 0xdb, 0x7c, 0xb6, 0xc1,
	0x79, 0x86, 0x19, 0xfa, 0x51, 0x6c, 0xa6, 0x52, 0x5b, 0x1d, 0x76, 0xd2, 0x47, 0x34, 0x8f, 0xb3,
	0x38, 0xd7, 0x44, 0x90, 0x86, 0x57, 0xec, 0xd8, 0xed, 0x7e, 0xa2, 0xa0, 0x19, 0xb4, 0x8f, 0x46,
	0x7b, 0x68, 0x7d, 0x04, 0xec, 0xf2, 0x59, 0x1a, 0x9d, 0x4a, 0x42, 0x3b, 0x50, 0x90, 0x4c, 0x0a,
	0xd4, 0x53, 0x7a, 0x90, 0x56, 0xe6, 0x2e, 0xe4, 0x8c, 0x25, 0xbf, 0xe6, 0x0f, 0xd7, 0x47, 0x7f,
	0x24, 0xbc, 0x66, 0xb5, 0xb9, 0x34, 0x0e, 0x68, 0xac, 0xa4, 0x53, 0xd1, 0xbf, 0xb2, 0x50, 0xd2,
	0x50, 0x3a, 0xb5, 0xb9, 0x9c, 0x74, 0x0e, 0x8e, 0x64, 0x5e, 0x44, 0xff, 0x9b, 0x41, 0xbb, 0x3a,
	0xda, 0x43, 0x78, 0xcb, 0xce, 0x0a, 0x7c, 0x05, 0x3b, 0x26, 0x65, 0xc1, 0x29, 0x34, 0x69, 0x54,
	0xf5, 0x9d, 0x53, 0xcf, 0x4f, 0x3b, 0x0d, 0x6f, 0x58, 0x3d, 0x36, 0x98, 0x4c, 0xc6, 0x0a, 0x74,
	0xa6, 0x28, 0x3a, 0xf0, 0xad, 0x9a, 0xb7, 0xa1, 0xa7, 0xfe, 0xe0, 0x73, 0xc5, 0x83, 0xe5, 0x8a,
	0x07, 0xdf, 0x2b, 0x1e, 0xbc, 0xaf, 0x79, 0x65, 0xb9, 0xe6, 0x95, 0xaf, 0x35, 0xaf, 0xbc, 0xdc,
	0x65, 0x9a, 0xd4, 0x2c, 0xee, 0x26, 0x98, 0x0b, 0x02, 0x63, 0xd0, 0x76, 0x34, 0x8a, 0x72, 0x3f,
	0x6f, 0xbb, 0x0d, 0xd1, 0xa2, 0x00, 0x17, 0x1f, 0xfa, 0x37, 0xbc, 0xff, 0x09, 0x00, 0x00, 0xff,
	0xff, 0xe2, 0x2c, 0x76, 0x5a, 0xbe, 0x01, 0x00, 0x00,
}

func (m *BoolSubmitted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BoolSubmitted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BoolSubmitted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Submitted {
		i--
		if m.Submitted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorCheckpointParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorCheckpointParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorCheckpointParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintStorage(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x28
	}
	if m.PowerThreshold != 0 {
		i = encodeVarintStorage(dAtA, i, uint64(m.PowerThreshold))
		i--
		dAtA[i] = 0x20
	}
	if m.Timestamp != 0 {
		i = encodeVarintStorage(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ValsetHash) > 0 {
		i -= len(m.ValsetHash)
		copy(dAtA[i:], m.ValsetHash)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.ValsetHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Checkpoint) > 0 {
		i -= len(m.Checkpoint)
		copy(dAtA[i:], m.Checkpoint)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Checkpoint)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStorage(dAtA []byte, offset int, v uint64) int {
	offset -= sovStorage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BoolSubmitted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Submitted {
		n += 2
	}
	return n
}

func (m *ValidatorCheckpointParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Checkpoint)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	l = len(m.ValsetHash)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovStorage(uint64(m.Timestamp))
	}
	if m.PowerThreshold != 0 {
		n += 1 + sovStorage(uint64(m.PowerThreshold))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovStorage(uint64(m.BlockHeight))
	}
	return n
}

func sovStorage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStorage(x uint64) (n int) {
	return sovStorage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BoolSubmitted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BoolSubmitted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BoolSubmitted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Submitted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Submitted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorCheckpointParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorCheckpointParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorCheckpointParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checkpoint", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Checkpoint = append(m.Checkpoint[:0], dAtA[iNdEx:postIndex]...)
			if m.Checkpoint == nil {
				m.Checkpoint = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValsetHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValsetHash = append(m.ValsetHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ValsetHash == nil {
				m.ValsetHash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerThreshold", wireType)
			}
			m.PowerThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PowerThreshold |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStorage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStorage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStorage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStorage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStorage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStorage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStorage = fmt.Errorf("proto: unexpected end of group")
)
