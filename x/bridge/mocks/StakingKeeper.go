// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	"time"
	context "context"

	math "cosmossdk.io/math"
	cosmos_sdktypes "github.com/cosmos/cosmos-sdk/types"

	mock "github.com/stretchr/testify/mock"

	types "github.com/cosmos/cosmos-sdk/x/staking/types"

)

// StakingKeeper is an autogenerated mock type for the StakingKeeper type
type StakingKeeper struct {
	mock.Mock
}

// GetAllValidators provides a mock function with given fields: ctx
func (_m *StakingKeeper) GetAllValidators(ctx context.Context) ([]types.Validator, error) {
	ret := _m.Called(ctx)

	var r0 []types.Validator
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]types.Validator, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []types.Validator); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Validator)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetValidator provides a mock function with given fields: ctx, addr
func (_m *StakingKeeper) GetValidator(ctx context.Context, addr cosmos_sdktypes.ValAddress) (types.Validator, error) {
	ret := _m.Called(ctx, addr)

	var r0 types.Validator
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, cosmos_sdktypes.ValAddress) (types.Validator, error)); ok {
		return rf(ctx, addr)
	}
	if rf, ok := ret.Get(0).(func(context.Context, cosmos_sdktypes.ValAddress) types.Validator); ok {
		r0 = rf(ctx, addr)
	} else {
		r0 = ret.Get(0).(types.Validator)
	}

	if rf, ok := ret.Get(1).(func(context.Context, cosmos_sdktypes.ValAddress) error); ok {
		r1 = rf(ctx, addr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetValidators provides a mock function with given fields: ctx, maxRetrieve
func (_m *StakingKeeper) GetValidators(ctx context.Context, maxRetrieve uint32) ([]types.Validator, error) {
	ret := _m.Called(ctx, maxRetrieve)

	var r0 []types.Validator
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32) ([]types.Validator, error)); ok {
		return rf(ctx, maxRetrieve)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32) []types.Validator); ok {
		r0 = rf(ctx, maxRetrieve)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Validator)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32) error); ok {
		r1 = rf(ctx, maxRetrieve)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TotalBondedTokens provides a mock function with given fields: ctx
func (_m *StakingKeeper) TotalBondedTokens(ctx context.Context) (math.Int, error) {
	ret := _m.Called(ctx)

	var r0 math.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (math.Int, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) math.Int); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(math.Int)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewStakingKeeper interface {
	mock.TestingT
	Cleanup(func())
}

// NewStakingKeeper creates a new instance of StakingKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStakingKeeper(t mockConstructorTestingTNewStakingKeeper) *StakingKeeper {
	mock := &StakingKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// UnbondingTime provides a mock function with given fields: ctx
func (m *StakingKeeper) UnbondingTime(ctx context.Context) (time.Duration, error) {
	ret := m.Called(ctx)

	var r0 time.Duration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (time.Duration, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) time.Duration); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}		