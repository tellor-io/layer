// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	types "github.com/tellor-io/layer/x/bridge/types"
)

// MsgClient is an autogenerated mock type for the MsgClient type
type MsgClient struct {
	mock.Mock
}

// ClaimDeposits provides a mock function with given fields: ctx, in, opts
func (_m *MsgClient) ClaimDeposits(ctx context.Context, in *types.MsgClaimDepositsRequest, opts ...grpc.CallOption) (*types.MsgClaimDepositsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ClaimDeposits")
	}

	var r0 *types.MsgClaimDepositsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.MsgClaimDepositsRequest, ...grpc.CallOption) (*types.MsgClaimDepositsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.MsgClaimDepositsRequest, ...grpc.CallOption) *types.MsgClaimDepositsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.MsgClaimDepositsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.MsgClaimDepositsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestAttestations provides a mock function with given fields: ctx, in, opts
func (_m *MsgClient) RequestAttestations(ctx context.Context, in *types.MsgRequestAttestations, opts ...grpc.CallOption) (*types.MsgRequestAttestationsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RequestAttestations")
	}

	var r0 *types.MsgRequestAttestationsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.MsgRequestAttestations, ...grpc.CallOption) (*types.MsgRequestAttestationsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.MsgRequestAttestations, ...grpc.CallOption) *types.MsgRequestAttestationsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.MsgRequestAttestationsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.MsgRequestAttestations, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubmitAttestationEvidence provides a mock function with given fields: ctx, in, opts
func (_m *MsgClient) SubmitAttestationEvidence(ctx context.Context, in *types.MsgSubmitAttestationEvidence, opts ...grpc.CallOption) (*types.MsgSubmitAttestationEvidenceResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SubmitAttestationEvidence")
	}

	var r0 *types.MsgSubmitAttestationEvidenceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.MsgSubmitAttestationEvidence, ...grpc.CallOption) (*types.MsgSubmitAttestationEvidenceResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.MsgSubmitAttestationEvidence, ...grpc.CallOption) *types.MsgSubmitAttestationEvidenceResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.MsgSubmitAttestationEvidenceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.MsgSubmitAttestationEvidence, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSnapshotLimit provides a mock function with given fields: ctx, in, opts
func (_m *MsgClient) UpdateSnapshotLimit(ctx context.Context, in *types.MsgUpdateSnapshotLimit, opts ...grpc.CallOption) (*types.MsgUpdateSnapshotLimitResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSnapshotLimit")
	}

	var r0 *types.MsgUpdateSnapshotLimitResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.MsgUpdateSnapshotLimit, ...grpc.CallOption) (*types.MsgUpdateSnapshotLimitResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.MsgUpdateSnapshotLimit, ...grpc.CallOption) *types.MsgUpdateSnapshotLimitResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.MsgUpdateSnapshotLimitResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.MsgUpdateSnapshotLimit, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WithdrawTokens provides a mock function with given fields: ctx, in, opts
func (_m *MsgClient) WithdrawTokens(ctx context.Context, in *types.MsgWithdrawTokens, opts ...grpc.CallOption) (*types.MsgWithdrawTokensResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WithdrawTokens")
	}

	var r0 *types.MsgWithdrawTokensResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.MsgWithdrawTokens, ...grpc.CallOption) (*types.MsgWithdrawTokensResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.MsgWithdrawTokens, ...grpc.CallOption) *types.MsgWithdrawTokensResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.MsgWithdrawTokensResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.MsgWithdrawTokens, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMsgClient creates a new instance of MsgClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMsgClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MsgClient {
	mock := &MsgClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
