// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	types "github.com/tellor-io/layer/x/bridge/types"
)

// QueryServer is an autogenerated mock type for the QueryServer type
type QueryServer struct {
	mock.Mock
}

// GetAttestationDataBySnapshot provides a mock function with given fields: _a0, _a1
func (_m *QueryServer) GetAttestationDataBySnapshot(_a0 context.Context, _a1 *types.QueryGetAttestationDataBySnapshotRequest) (*types.QueryGetAttestationDataBySnapshotResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetAttestationDataBySnapshot")
	}

	var r0 *types.QueryGetAttestationDataBySnapshotResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryGetAttestationDataBySnapshotRequest) (*types.QueryGetAttestationDataBySnapshotResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryGetAttestationDataBySnapshotRequest) *types.QueryGetAttestationDataBySnapshotResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryGetAttestationDataBySnapshotResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryGetAttestationDataBySnapshotRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAttestationsBySnapshot provides a mock function with given fields: _a0, _a1
func (_m *QueryServer) GetAttestationsBySnapshot(_a0 context.Context, _a1 *types.QueryGetAttestationsBySnapshotRequest) (*types.QueryGetAttestationsBySnapshotResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetAttestationsBySnapshot")
	}

	var r0 *types.QueryGetAttestationsBySnapshotResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryGetAttestationsBySnapshotRequest) (*types.QueryGetAttestationsBySnapshotResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryGetAttestationsBySnapshotRequest) *types.QueryGetAttestationsBySnapshotResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryGetAttestationsBySnapshotResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryGetAttestationsBySnapshotRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCurrentValidatorSetTimestamp provides a mock function with given fields: _a0, _a1
func (_m *QueryServer) GetCurrentValidatorSetTimestamp(_a0 context.Context, _a1 *types.QueryGetCurrentValidatorSetTimestampRequest) (*types.QueryGetCurrentValidatorSetTimestampResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentValidatorSetTimestamp")
	}

	var r0 *types.QueryGetCurrentValidatorSetTimestampResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryGetCurrentValidatorSetTimestampRequest) (*types.QueryGetCurrentValidatorSetTimestampResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryGetCurrentValidatorSetTimestampRequest) *types.QueryGetCurrentValidatorSetTimestampResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryGetCurrentValidatorSetTimestampResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryGetCurrentValidatorSetTimestampRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDepositClaimed provides a mock function with given fields: _a0, _a1
func (_m *QueryServer) GetDepositClaimed(_a0 context.Context, _a1 *types.QueryGetDepositClaimedRequest) (*types.QueryGetDepositClaimedResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetDepositClaimed")
	}

	var r0 *types.QueryGetDepositClaimedResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryGetDepositClaimedRequest) (*types.QueryGetDepositClaimedResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryGetDepositClaimedRequest) *types.QueryGetDepositClaimedResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryGetDepositClaimedResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryGetDepositClaimedRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEvmAddressByValidatorAddress provides a mock function with given fields: _a0, _a1
func (_m *QueryServer) GetEvmAddressByValidatorAddress(_a0 context.Context, _a1 *types.QueryGetEvmAddressByValidatorAddressRequest) (*types.QueryGetEvmAddressByValidatorAddressResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetEvmAddressByValidatorAddress")
	}

	var r0 *types.QueryGetEvmAddressByValidatorAddressResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryGetEvmAddressByValidatorAddressRequest) (*types.QueryGetEvmAddressByValidatorAddressResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryGetEvmAddressByValidatorAddressRequest) *types.QueryGetEvmAddressByValidatorAddressResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryGetEvmAddressByValidatorAddressResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryGetEvmAddressByValidatorAddressRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEvmValidators provides a mock function with given fields: _a0, _a1
func (_m *QueryServer) GetEvmValidators(_a0 context.Context, _a1 *types.QueryGetEvmValidatorsRequest) (*types.QueryGetEvmValidatorsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetEvmValidators")
	}

	var r0 *types.QueryGetEvmValidatorsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryGetEvmValidatorsRequest) (*types.QueryGetEvmValidatorsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryGetEvmValidatorsRequest) *types.QueryGetEvmValidatorsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryGetEvmValidatorsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryGetEvmValidatorsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLastWithdrawalId provides a mock function with given fields: _a0, _a1
func (_m *QueryServer) GetLastWithdrawalId(_a0 context.Context, _a1 *types.QueryGetLastWithdrawalIdRequest) (*types.QueryGetLastWithdrawalIdResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetLastWithdrawalId")
	}

	var r0 *types.QueryGetLastWithdrawalIdResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryGetLastWithdrawalIdRequest) (*types.QueryGetLastWithdrawalIdResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryGetLastWithdrawalIdRequest) *types.QueryGetLastWithdrawalIdResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryGetLastWithdrawalIdResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryGetLastWithdrawalIdRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSnapshotLimit provides a mock function with given fields: _a0, _a1
func (_m *QueryServer) GetSnapshotLimit(_a0 context.Context, _a1 *types.QueryGetSnapshotLimitRequest) (*types.QueryGetSnapshotLimitResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetSnapshotLimit")
	}

	var r0 *types.QueryGetSnapshotLimitResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryGetSnapshotLimitRequest) (*types.QueryGetSnapshotLimitResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryGetSnapshotLimitRequest) *types.QueryGetSnapshotLimitResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryGetSnapshotLimitResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryGetSnapshotLimitRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSnapshotsByReport provides a mock function with given fields: _a0, _a1
func (_m *QueryServer) GetSnapshotsByReport(_a0 context.Context, _a1 *types.QueryGetSnapshotsByReportRequest) (*types.QueryGetSnapshotsByReportResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetSnapshotsByReport")
	}

	var r0 *types.QueryGetSnapshotsByReportResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryGetSnapshotsByReportRequest) (*types.QueryGetSnapshotsByReportResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryGetSnapshotsByReportRequest) *types.QueryGetSnapshotsByReportResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryGetSnapshotsByReportResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryGetSnapshotsByReportRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetValidatorCheckpoint provides a mock function with given fields: _a0, _a1
func (_m *QueryServer) GetValidatorCheckpoint(_a0 context.Context, _a1 *types.QueryGetValidatorCheckpointRequest) (*types.QueryGetValidatorCheckpointResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetValidatorCheckpoint")
	}

	var r0 *types.QueryGetValidatorCheckpointResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryGetValidatorCheckpointRequest) (*types.QueryGetValidatorCheckpointResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryGetValidatorCheckpointRequest) *types.QueryGetValidatorCheckpointResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryGetValidatorCheckpointResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryGetValidatorCheckpointRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetValidatorCheckpointParams provides a mock function with given fields: _a0, _a1
func (_m *QueryServer) GetValidatorCheckpointParams(_a0 context.Context, _a1 *types.QueryGetValidatorCheckpointParamsRequest) (*types.QueryGetValidatorCheckpointParamsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetValidatorCheckpointParams")
	}

	var r0 *types.QueryGetValidatorCheckpointParamsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryGetValidatorCheckpointParamsRequest) (*types.QueryGetValidatorCheckpointParamsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryGetValidatorCheckpointParamsRequest) *types.QueryGetValidatorCheckpointParamsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryGetValidatorCheckpointParamsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryGetValidatorCheckpointParamsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetValidatorSetIndexByTimestamp provides a mock function with given fields: _a0, _a1
func (_m *QueryServer) GetValidatorSetIndexByTimestamp(_a0 context.Context, _a1 *types.QueryGetValidatorSetIndexByTimestampRequest) (*types.QueryGetValidatorSetIndexByTimestampResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetValidatorSetIndexByTimestamp")
	}

	var r0 *types.QueryGetValidatorSetIndexByTimestampResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryGetValidatorSetIndexByTimestampRequest) (*types.QueryGetValidatorSetIndexByTimestampResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryGetValidatorSetIndexByTimestampRequest) *types.QueryGetValidatorSetIndexByTimestampResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryGetValidatorSetIndexByTimestampResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryGetValidatorSetIndexByTimestampRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetValidatorTimestampByIndex provides a mock function with given fields: _a0, _a1
func (_m *QueryServer) GetValidatorTimestampByIndex(_a0 context.Context, _a1 *types.QueryGetValidatorTimestampByIndexRequest) (*types.QueryGetValidatorTimestampByIndexResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetValidatorTimestampByIndex")
	}

	var r0 *types.QueryGetValidatorTimestampByIndexResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryGetValidatorTimestampByIndexRequest) (*types.QueryGetValidatorTimestampByIndexResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryGetValidatorTimestampByIndexRequest) *types.QueryGetValidatorTimestampByIndexResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryGetValidatorTimestampByIndexResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryGetValidatorTimestampByIndexRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetValsetByTimestamp provides a mock function with given fields: _a0, _a1
func (_m *QueryServer) GetValsetByTimestamp(_a0 context.Context, _a1 *types.QueryGetValsetByTimestampRequest) (*types.QueryGetValsetByTimestampResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetValsetByTimestamp")
	}

	var r0 *types.QueryGetValsetByTimestampResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryGetValsetByTimestampRequest) (*types.QueryGetValsetByTimestampResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryGetValsetByTimestampRequest) *types.QueryGetValsetByTimestampResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryGetValsetByTimestampResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryGetValsetByTimestampRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetValsetSigs provides a mock function with given fields: _a0, _a1
func (_m *QueryServer) GetValsetSigs(_a0 context.Context, _a1 *types.QueryGetValsetSigsRequest) (*types.QueryGetValsetSigsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetValsetSigs")
	}

	var r0 *types.QueryGetValsetSigsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryGetValsetSigsRequest) (*types.QueryGetValsetSigsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryGetValsetSigsRequest) *types.QueryGetValsetSigsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryGetValsetSigsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryGetValsetSigsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Params provides a mock function with given fields: _a0, _a1
func (_m *QueryServer) Params(_a0 context.Context, _a1 *types.QueryParamsRequest) (*types.QueryParamsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Params")
	}

	var r0 *types.QueryParamsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryParamsRequest) (*types.QueryParamsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryParamsRequest) *types.QueryParamsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryParamsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryParamsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewQueryServer creates a new instance of QueryServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQueryServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *QueryServer {
	mock := &QueryServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
