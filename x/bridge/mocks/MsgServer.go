// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	types "github.com/tellor-io/layer/x/bridge/types"
)

// MsgServer is an autogenerated mock type for the MsgServer type
type MsgServer struct {
	mock.Mock
}

// ClaimDeposits provides a mock function with given fields: _a0, _a1
func (_m *MsgServer) ClaimDeposits(_a0 context.Context, _a1 *types.MsgClaimDepositsRequest) (*types.MsgClaimDepositsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ClaimDeposits")
	}

	var r0 *types.MsgClaimDepositsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.MsgClaimDepositsRequest) (*types.MsgClaimDepositsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.MsgClaimDepositsRequest) *types.MsgClaimDepositsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.MsgClaimDepositsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.MsgClaimDepositsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestAttestations provides a mock function with given fields: _a0, _a1
func (_m *MsgServer) RequestAttestations(_a0 context.Context, _a1 *types.MsgRequestAttestations) (*types.MsgRequestAttestationsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RequestAttestations")
	}

	var r0 *types.MsgRequestAttestationsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.MsgRequestAttestations) (*types.MsgRequestAttestationsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.MsgRequestAttestations) *types.MsgRequestAttestationsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.MsgRequestAttestationsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.MsgRequestAttestations) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubmitAttestationEvidence provides a mock function with given fields: _a0, _a1
func (_m *MsgServer) SubmitAttestationEvidence(_a0 context.Context, _a1 *types.MsgSubmitAttestationEvidence) (*types.MsgSubmitAttestationEvidenceResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SubmitAttestationEvidence")
	}

	var r0 *types.MsgSubmitAttestationEvidenceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.MsgSubmitAttestationEvidence) (*types.MsgSubmitAttestationEvidenceResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.MsgSubmitAttestationEvidence) *types.MsgSubmitAttestationEvidenceResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.MsgSubmitAttestationEvidenceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.MsgSubmitAttestationEvidence) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSnapshotLimit provides a mock function with given fields: _a0, _a1
func (_m *MsgServer) UpdateSnapshotLimit(_a0 context.Context, _a1 *types.MsgUpdateSnapshotLimit) (*types.MsgUpdateSnapshotLimitResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSnapshotLimit")
	}

	var r0 *types.MsgUpdateSnapshotLimitResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.MsgUpdateSnapshotLimit) (*types.MsgUpdateSnapshotLimitResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.MsgUpdateSnapshotLimit) *types.MsgUpdateSnapshotLimitResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.MsgUpdateSnapshotLimitResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.MsgUpdateSnapshotLimit) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WithdrawTokens provides a mock function with given fields: _a0, _a1
func (_m *MsgServer) WithdrawTokens(_a0 context.Context, _a1 *types.MsgWithdrawTokens) (*types.MsgWithdrawTokensResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for WithdrawTokens")
	}

	var r0 *types.MsgWithdrawTokensResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.MsgWithdrawTokens) (*types.MsgWithdrawTokensResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.MsgWithdrawTokens) *types.MsgWithdrawTokensResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.MsgWithdrawTokensResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.MsgWithdrawTokens) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMsgServer creates a new instance of MsgServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMsgServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MsgServer {
	mock := &MsgServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
