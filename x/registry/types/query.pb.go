// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: layer/registry/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ea550dd9a444afe, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ea550dd9a444afe, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryGetDataSpecRequest is request type for the Query/GetDataSpec RPC method.
type QueryGetDataSpecRequest struct {
	// queryType is the key to fetch a the corresponding data spec.
	QueryType string `protobuf:"bytes,1,opt,name=query_type,json=queryType,proto3" json:"query_type,omitempty"`
}

func (m *QueryGetDataSpecRequest) Reset()         { *m = QueryGetDataSpecRequest{} }
func (m *QueryGetDataSpecRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetDataSpecRequest) ProtoMessage()    {}
func (*QueryGetDataSpecRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ea550dd9a444afe, []int{2}
}
func (m *QueryGetDataSpecRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDataSpecRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDataSpecRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDataSpecRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDataSpecRequest.Merge(m, src)
}
func (m *QueryGetDataSpecRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDataSpecRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDataSpecRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDataSpecRequest proto.InternalMessageInfo

func (m *QueryGetDataSpecRequest) GetQueryType() string {
	if m != nil {
		return m.QueryType
	}
	return ""
}

// QueryGetDataSpecResponse is response type for the Query/GetDataSpec RPC method.
type QueryGetDataSpecResponse struct {
	// spec is the data spec corresponding to the query type.
	Spec *DataSpec `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (m *QueryGetDataSpecResponse) Reset()         { *m = QueryGetDataSpecResponse{} }
func (m *QueryGetDataSpecResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetDataSpecResponse) ProtoMessage()    {}
func (*QueryGetDataSpecResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ea550dd9a444afe, []int{3}
}
func (m *QueryGetDataSpecResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDataSpecResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDataSpecResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDataSpecResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDataSpecResponse.Merge(m, src)
}
func (m *QueryGetDataSpecResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDataSpecResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDataSpecResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDataSpecResponse proto.InternalMessageInfo

func (m *QueryGetDataSpecResponse) GetSpec() *DataSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

// QueryDecodeQuerydataRequest is request type for the Query/DecodeQuerydata RPC method.
type QueryDecodeQuerydataRequest struct {
	// query_data is the query data hex string to be decoded.
	QueryData []byte `protobuf:"bytes,1,opt,name=query_data,json=queryData,proto3" json:"query_data,omitempty"`
}

func (m *QueryDecodeQuerydataRequest) Reset()         { *m = QueryDecodeQuerydataRequest{} }
func (m *QueryDecodeQuerydataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDecodeQuerydataRequest) ProtoMessage()    {}
func (*QueryDecodeQuerydataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ea550dd9a444afe, []int{4}
}
func (m *QueryDecodeQuerydataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDecodeQuerydataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDecodeQuerydataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDecodeQuerydataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDecodeQuerydataRequest.Merge(m, src)
}
func (m *QueryDecodeQuerydataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDecodeQuerydataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDecodeQuerydataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDecodeQuerydataRequest proto.InternalMessageInfo

func (m *QueryDecodeQuerydataRequest) GetQueryData() []byte {
	if m != nil {
		return m.QueryData
	}
	return nil
}

// QueryDecodeQuerydataResponse is response type for the Query/DecodeQuerydata RPC method.
type QueryDecodeQuerydataResponse struct {
	// spec is the decoded json represention of the query data hex string.
	Spec string `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (m *QueryDecodeQuerydataResponse) Reset()         { *m = QueryDecodeQuerydataResponse{} }
func (m *QueryDecodeQuerydataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDecodeQuerydataResponse) ProtoMessage()    {}
func (*QueryDecodeQuerydataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ea550dd9a444afe, []int{5}
}
func (m *QueryDecodeQuerydataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDecodeQuerydataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDecodeQuerydataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDecodeQuerydataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDecodeQuerydataResponse.Merge(m, src)
}
func (m *QueryDecodeQuerydataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDecodeQuerydataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDecodeQuerydataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDecodeQuerydataResponse proto.InternalMessageInfo

func (m *QueryDecodeQuerydataResponse) GetSpec() string {
	if m != nil {
		return m.Spec
	}
	return ""
}

// QueryGenerateQuerydataRequest is request type for the Query/GenerateQuerydata RPC method.
type QueryGenerateQuerydataRequest struct {
	// querytype for which query_data is to be generated.
	Querytype string `protobuf:"bytes,1,opt,name=querytype,proto3" json:"querytype,omitempty"`
	// parameters for which query_data is to be generated.
	Parameters string `protobuf:"bytes,2,opt,name=parameters,proto3" json:"parameters,omitempty"`
}

func (m *QueryGenerateQuerydataRequest) Reset()         { *m = QueryGenerateQuerydataRequest{} }
func (m *QueryGenerateQuerydataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGenerateQuerydataRequest) ProtoMessage()    {}
func (*QueryGenerateQuerydataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ea550dd9a444afe, []int{6}
}
func (m *QueryGenerateQuerydataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGenerateQuerydataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGenerateQuerydataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGenerateQuerydataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGenerateQuerydataRequest.Merge(m, src)
}
func (m *QueryGenerateQuerydataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGenerateQuerydataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGenerateQuerydataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGenerateQuerydataRequest proto.InternalMessageInfo

func (m *QueryGenerateQuerydataRequest) GetQuerytype() string {
	if m != nil {
		return m.Querytype
	}
	return ""
}

func (m *QueryGenerateQuerydataRequest) GetParameters() string {
	if m != nil {
		return m.Parameters
	}
	return ""
}

// QueryGenerateQuerydataResponse is response type for the Query/GenerateQuerydata RPC method.
type QueryGenerateQuerydataResponse struct {
	// query_data is the generated query_data hex string.
	QueryData []byte `protobuf:"bytes,1,opt,name=query_data,json=queryData,proto3" json:"query_data,omitempty"`
}

func (m *QueryGenerateQuerydataResponse) Reset()         { *m = QueryGenerateQuerydataResponse{} }
func (m *QueryGenerateQuerydataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGenerateQuerydataResponse) ProtoMessage()    {}
func (*QueryGenerateQuerydataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ea550dd9a444afe, []int{7}
}
func (m *QueryGenerateQuerydataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGenerateQuerydataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGenerateQuerydataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGenerateQuerydataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGenerateQuerydataResponse.Merge(m, src)
}
func (m *QueryGenerateQuerydataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGenerateQuerydataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGenerateQuerydataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGenerateQuerydataResponse proto.InternalMessageInfo

func (m *QueryGenerateQuerydataResponse) GetQueryData() []byte {
	if m != nil {
		return m.QueryData
	}
	return nil
}

// QueryDecodeValueRequest is request type for the Query/DecodeValue RPC method.
type QueryDecodeValueRequest struct {
	// queryType is the key to fetch a the corresponding data spec.
	QueryType string `protobuf:"bytes,1,opt,name=queryType,proto3" json:"queryType,omitempty"`
	// value is the value hex string to be decoded.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *QueryDecodeValueRequest) Reset()         { *m = QueryDecodeValueRequest{} }
func (m *QueryDecodeValueRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDecodeValueRequest) ProtoMessage()    {}
func (*QueryDecodeValueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ea550dd9a444afe, []int{8}
}
func (m *QueryDecodeValueRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDecodeValueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDecodeValueRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDecodeValueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDecodeValueRequest.Merge(m, src)
}
func (m *QueryDecodeValueRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDecodeValueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDecodeValueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDecodeValueRequest proto.InternalMessageInfo

func (m *QueryDecodeValueRequest) GetQueryType() string {
	if m != nil {
		return m.QueryType
	}
	return ""
}

func (m *QueryDecodeValueRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// QueryDecodeValueResponse is response type for the Query/DecodeValue RPC method.
type QueryDecodeValueResponse struct {
	// decodedValue is the decoded value of the hex string.
	DecodedValue string `protobuf:"bytes,1,opt,name=decodedValue,proto3" json:"decodedValue,omitempty"`
}

func (m *QueryDecodeValueResponse) Reset()         { *m = QueryDecodeValueResponse{} }
func (m *QueryDecodeValueResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDecodeValueResponse) ProtoMessage()    {}
func (*QueryDecodeValueResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ea550dd9a444afe, []int{9}
}
func (m *QueryDecodeValueResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDecodeValueResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDecodeValueResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDecodeValueResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDecodeValueResponse.Merge(m, src)
}
func (m *QueryDecodeValueResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDecodeValueResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDecodeValueResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDecodeValueResponse proto.InternalMessageInfo

func (m *QueryDecodeValueResponse) GetDecodedValue() string {
	if m != nil {
		return m.DecodedValue
	}
	return ""
}

// QueryGetAllDataSpecsRequest is request type for the Query/GetAllDataSpecs RPC method.
type QueryGetAllDataSpecsRequest struct {
}

func (m *QueryGetAllDataSpecsRequest) Reset()         { *m = QueryGetAllDataSpecsRequest{} }
func (m *QueryGetAllDataSpecsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllDataSpecsRequest) ProtoMessage()    {}
func (*QueryGetAllDataSpecsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ea550dd9a444afe, []int{10}
}
func (m *QueryGetAllDataSpecsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllDataSpecsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllDataSpecsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllDataSpecsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllDataSpecsRequest.Merge(m, src)
}
func (m *QueryGetAllDataSpecsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllDataSpecsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllDataSpecsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllDataSpecsRequest proto.InternalMessageInfo

// QueryGetAllDataSpecsResponse is response type for the Query/GetAllDataSpecs RPC method.
type QueryGetAllDataSpecsResponse struct {
	// specs is the list of all data specs.
	Specs []*DataSpec `protobuf:"bytes,1,rep,name=specs,proto3" json:"specs,omitempty"`
}

func (m *QueryGetAllDataSpecsResponse) Reset()         { *m = QueryGetAllDataSpecsResponse{} }
func (m *QueryGetAllDataSpecsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllDataSpecsResponse) ProtoMessage()    {}
func (*QueryGetAllDataSpecsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ea550dd9a444afe, []int{11}
}
func (m *QueryGetAllDataSpecsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllDataSpecsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllDataSpecsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllDataSpecsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllDataSpecsResponse.Merge(m, src)
}
func (m *QueryGetAllDataSpecsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllDataSpecsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllDataSpecsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllDataSpecsResponse proto.InternalMessageInfo

func (m *QueryGetAllDataSpecsResponse) GetSpecs() []*DataSpec {
	if m != nil {
		return m.Specs
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "layer.registry.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "layer.registry.QueryParamsResponse")
	proto.RegisterType((*QueryGetDataSpecRequest)(nil), "layer.registry.QueryGetDataSpecRequest")
	proto.RegisterType((*QueryGetDataSpecResponse)(nil), "layer.registry.QueryGetDataSpecResponse")
	proto.RegisterType((*QueryDecodeQuerydataRequest)(nil), "layer.registry.QueryDecodeQuerydataRequest")
	proto.RegisterType((*QueryDecodeQuerydataResponse)(nil), "layer.registry.QueryDecodeQuerydataResponse")
	proto.RegisterType((*QueryGenerateQuerydataRequest)(nil), "layer.registry.QueryGenerateQuerydataRequest")
	proto.RegisterType((*QueryGenerateQuerydataResponse)(nil), "layer.registry.QueryGenerateQuerydataResponse")
	proto.RegisterType((*QueryDecodeValueRequest)(nil), "layer.registry.QueryDecodeValueRequest")
	proto.RegisterType((*QueryDecodeValueResponse)(nil), "layer.registry.QueryDecodeValueResponse")
	proto.RegisterType((*QueryGetAllDataSpecsRequest)(nil), "layer.registry.QueryGetAllDataSpecsRequest")
	proto.RegisterType((*QueryGetAllDataSpecsResponse)(nil), "layer.registry.QueryGetAllDataSpecsResponse")
}

func init() { proto.RegisterFile("layer/registry/query.proto", fileDescriptor_6ea550dd9a444afe) }

var fileDescriptor_6ea550dd9a444afe = []byte{
	// 691 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x95, 0x4d, 0x6b, 0x14, 0x4d,
	0x10, 0xc7, 0x77, 0xf2, 0x24, 0x79, 0x48, 0x25, 0x18, 0x6c, 0x43, 0x5c, 0x26, 0xc9, 0x28, 0xad,
	0x60, 0xc8, 0xcb, 0x8c, 0xac, 0x0a, 0x01, 0xdf, 0x30, 0x46, 0x22, 0x88, 0xa2, 0x31, 0x78, 0x10,
	0x64, 0xe9, 0xec, 0x36, 0xe3, 0xc2, 0x64, 0x7b, 0x76, 0xa6, 0x57, 0x5c, 0xc2, 0x5e, 0xfc, 0x04,
	0x82, 0x1e, 0xc4, 0xab, 0x27, 0x3f, 0x81, 0x5f, 0x21, 0xc7, 0x80, 0x17, 0x4f, 0x22, 0x89, 0x1f,
	0x44, 0xa6, 0xba, 0x36, 0xbb, 0x3b, 0x2f, 0x49, 0x6e, 0x93, 0xaa, 0xea, 0x7f, 0xff, 0xba, 0xaa,
	0xfe, 0x59, 0xb0, 0x03, 0xd1, 0x91, 0x91, 0x17, 0x49, 0xbf, 0x11, 0xeb, 0xa8, 0xe3, 0xb5, 0xda,
	0x32, 0xea, 0xb8, 0x61, 0xa4, 0xb4, 0x62, 0xe7, 0x30, 0xe7, 0xf6, 0x72, 0xf6, 0x8c, 0xaf, 0x7c,
	0x85, 0x29, 0x2f, 0xf9, 0x32, 0x55, 0xf6, 0xbc, 0xaf, 0x94, 0x1f, 0x48, 0x4f, 0x84, 0x0d, 0x4f,
	0x34, 0x9b, 0x4a, 0x0b, 0xdd, 0x50, 0xcd, 0x98, 0xb2, 0x4e, 0x4a, 0xbf, 0x2e, 0xb4, 0xa8, 0xc6,
	0xa1, 0xac, 0x51, 0x7e, 0x2e, 0x95, 0x0f, 0x45, 0x24, 0x76, 0xe9, 0x30, 0x9f, 0x01, 0xf6, 0x22,
	0xe1, 0x79, 0x8e, 0xc1, 0x2d, 0xd9, 0x6a, 0xcb, 0x58, 0xf3, 0x27, 0x70, 0x61, 0x28, 0x1a, 0x87,
	0xaa, 0x19, 0x4b, 0x76, 0x13, 0xc6, 0xcd, 0xe1, 0xb2, 0x75, 0xd9, 0x5a, 0x9c, 0xac, 0xcc, 0xba,
	0xc3, 0xf8, 0xae, 0xa9, 0x5f, 0x1f, 0xdd, 0xff, 0x7d, 0xa9, 0xb4, 0x45, 0xb5, 0x7c, 0x0d, 0x2e,
	0xa2, 0xd8, 0xa6, 0xd4, 0x1b, 0x42, 0x8b, 0x97, 0xa1, 0xac, 0xd1, 0x3d, 0x6c, 0x01, 0x00, 0xbb,
	0x51, 0xd5, 0x9d, 0x50, 0xa2, 0xe8, 0xc4, 0xd6, 0x04, 0x46, 0xb6, 0x3b, 0xa1, 0xe4, 0x8f, 0xa1,
	0x9c, 0x3d, 0x49, 0x2c, 0x2b, 0x30, 0x9a, 0xbc, 0x91, 0x48, 0xca, 0x69, 0x92, 0xe3, 0x7a, 0xac,
	0xe2, 0x77, 0x60, 0x0e, 0x95, 0x36, 0x64, 0x4d, 0xd5, 0x25, 0x7e, 0x26, 0x6d, 0xca, 0x70, 0x24,
	0x41, 0x94, 0x9c, 0x22, 0x8e, 0x44, 0x87, 0x57, 0x60, 0x3e, 0xff, 0x34, 0xb1, 0xb0, 0x01, 0x96,
	0x09, 0xba, 0xf1, 0x0d, 0x2c, 0x10, 0x7b, 0x53, 0x46, 0x42, 0x67, 0xef, 0x9c, 0x07, 0x73, 0x43,
	0xe6, 0xe9, 0x49, 0x80, 0x39, 0x00, 0xd8, 0x3e, 0xa9, 0x65, 0x14, 0x97, 0x47, 0x30, 0x3d, 0x10,
	0xe1, 0xf7, 0xc1, 0x29, 0x92, 0x27, 0xa8, 0x53, 0xde, 0xf4, 0x94, 0xa6, 0x62, 0xde, 0xf4, 0x4a,
	0x04, 0x6d, 0x99, 0x26, 0xdb, 0xce, 0x1b, 0x0a, 0x9b, 0x81, 0xb1, 0x77, 0x49, 0x35, 0x41, 0x99,
	0x3f, 0xf8, 0x3d, 0x1a, 0xd5, 0x90, 0x1c, 0x91, 0x70, 0x98, 0xaa, 0x63, 0xb8, 0x8e, 0x71, 0x92,
	0x1c, 0x8a, 0xf1, 0x05, 0x1a, 0xd0, 0xa6, 0xd4, 0x0f, 0x82, 0xa0, 0x37, 0xbd, 0xe3, 0x85, 0x7c,
	0x46, 0x13, 0xc8, 0xa4, 0xe9, 0x0a, 0x17, 0xc6, 0x92, 0xae, 0x27, 0x8b, 0xf9, 0xdf, 0x89, 0xeb,
	0x60, 0xca, 0x2a, 0xdf, 0xff, 0x87, 0x31, 0x14, 0x64, 0x2d, 0x18, 0x37, 0x5b, 0xcb, 0x78, 0xfa,
	0x50, 0xd6, 0x18, 0xf6, 0x95, 0x13, 0x6b, 0x0c, 0x0c, 0x77, 0x3e, 0xfc, 0xfc, 0xfb, 0x69, 0xa4,
	0xcc, 0x66, 0xbd, 0x5c, 0xe7, 0xb1, 0xcf, 0x16, 0x4c, 0x0e, 0xac, 0x34, 0xbb, 0x96, 0x2b, 0x9a,
	0xb5, 0x8b, 0xbd, 0x78, 0x7a, 0x21, 0x21, 0x54, 0x10, 0x61, 0x85, 0x2d, 0xa5, 0x11, 0x7c, 0xa9,
	0xab, 0xc7, 0xff, 0x20, 0xbc, 0xbd, 0xbe, 0xfb, 0xba, 0xec, 0x9b, 0x05, 0xd3, 0xa9, 0x0d, 0x67,
	0xcb, 0xb9, 0x37, 0xe6, 0xbb, 0xc8, 0x5e, 0x39, 0x5b, 0x31, 0x21, 0xde, 0x42, 0x44, 0x8f, 0xad,
	0xa6, 0x11, 0xcd, 0x5e, 0x54, 0x5b, 0xbd, 0x13, 0x3d, 0xca, 0xe4, 0xbb, 0xcb, 0x7e, 0x58, 0x70,
	0x3e, 0xb3, 0xf4, 0x6c, 0xb5, 0xa0, 0x33, 0xf9, 0xde, 0xb3, 0xdd, 0xb3, 0x96, 0x13, 0xeb, 0x43,
	0x64, 0xbd, 0xcb, 0x6e, 0x67, 0xdb, 0x69, 0x8e, 0x64, 0x68, 0xb1, 0xa5, 0xde, 0x5e, 0xdf, 0xb1,
	0x5d, 0xf6, 0xd5, 0x82, 0xc9, 0x01, 0x7b, 0x14, 0x8c, 0x3d, 0xeb, 0xc7, 0x82, 0xb1, 0xe7, 0x38,
	0x8d, 0xaf, 0x21, 0x67, 0x85, 0x5d, 0x2f, 0xe8, 0x29, 0x7a, 0x95, 0x08, 0xb7, 0x0d, 0x21, 0x86,
	0xba, 0xec, 0x8b, 0x05, 0xd3, 0x29, 0x73, 0x15, 0x0c, 0x3f, 0xdf, 0xa1, 0x05, 0xc3, 0x2f, 0xf0,
	0x2b, 0x5f, 0x42, 0xd0, 0xab, 0x8c, 0xe7, 0xed, 0xa7, 0x08, 0x82, 0xfe, 0x8e, 0xc6, 0xeb, 0x8f,
	0xf6, 0x0f, 0x1d, 0xeb, 0xe0, 0xd0, 0xb1, 0xfe, 0x1c, 0x3a, 0xd6, 0xc7, 0x23, 0xa7, 0x74, 0x70,
	0xe4, 0x94, 0x7e, 0x1d, 0x39, 0xa5, 0xd7, 0xcb, 0x7e, 0x43, 0xbf, 0x6d, 0xef, 0xb8, 0x35, 0xb5,
	0xeb, 0x69, 0x19, 0x04, 0x2a, 0x5a, 0x6d, 0x28, 0x52, 0x7c, 0xdf, 0xd7, 0x4c, 0x66, 0x11, 0xef,
	0x8c, 0xe3, 0x0f, 0xde, 0x8d, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xbb, 0xad, 0x53, 0x71, 0x8f,
	0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of GetDataSpec items.
	GetDataSpec(ctx context.Context, in *QueryGetDataSpecRequest, opts ...grpc.CallOption) (*QueryGetDataSpecResponse, error)
	// Queries a list of DecodeQuerydata items.
	DecodeQuerydata(ctx context.Context, in *QueryDecodeQuerydataRequest, opts ...grpc.CallOption) (*QueryDecodeQuerydataResponse, error)
	// Queries a list of GenerateQuerydata items.
	GenerateQuerydata(ctx context.Context, in *QueryGenerateQuerydataRequest, opts ...grpc.CallOption) (*QueryGenerateQuerydataResponse, error)
	// Queries a list of DecodeValue items.
	DecodeValue(ctx context.Context, in *QueryDecodeValueRequest, opts ...grpc.CallOption) (*QueryDecodeValueResponse, error)
	// Queries a list of GetAllDataSpecs items.
	GetAllDataSpecs(ctx context.Context, in *QueryGetAllDataSpecsRequest, opts ...grpc.CallOption) (*QueryGetAllDataSpecsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/layer.registry.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetDataSpec(ctx context.Context, in *QueryGetDataSpecRequest, opts ...grpc.CallOption) (*QueryGetDataSpecResponse, error) {
	out := new(QueryGetDataSpecResponse)
	err := c.cc.Invoke(ctx, "/layer.registry.Query/GetDataSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DecodeQuerydata(ctx context.Context, in *QueryDecodeQuerydataRequest, opts ...grpc.CallOption) (*QueryDecodeQuerydataResponse, error) {
	out := new(QueryDecodeQuerydataResponse)
	err := c.cc.Invoke(ctx, "/layer.registry.Query/DecodeQuerydata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GenerateQuerydata(ctx context.Context, in *QueryGenerateQuerydataRequest, opts ...grpc.CallOption) (*QueryGenerateQuerydataResponse, error) {
	out := new(QueryGenerateQuerydataResponse)
	err := c.cc.Invoke(ctx, "/layer.registry.Query/GenerateQuerydata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DecodeValue(ctx context.Context, in *QueryDecodeValueRequest, opts ...grpc.CallOption) (*QueryDecodeValueResponse, error) {
	out := new(QueryDecodeValueResponse)
	err := c.cc.Invoke(ctx, "/layer.registry.Query/DecodeValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAllDataSpecs(ctx context.Context, in *QueryGetAllDataSpecsRequest, opts ...grpc.CallOption) (*QueryGetAllDataSpecsResponse, error) {
	out := new(QueryGetAllDataSpecsResponse)
	err := c.cc.Invoke(ctx, "/layer.registry.Query/GetAllDataSpecs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of GetDataSpec items.
	GetDataSpec(context.Context, *QueryGetDataSpecRequest) (*QueryGetDataSpecResponse, error)
	// Queries a list of DecodeQuerydata items.
	DecodeQuerydata(context.Context, *QueryDecodeQuerydataRequest) (*QueryDecodeQuerydataResponse, error)
	// Queries a list of GenerateQuerydata items.
	GenerateQuerydata(context.Context, *QueryGenerateQuerydataRequest) (*QueryGenerateQuerydataResponse, error)
	// Queries a list of DecodeValue items.
	DecodeValue(context.Context, *QueryDecodeValueRequest) (*QueryDecodeValueResponse, error)
	// Queries a list of GetAllDataSpecs items.
	GetAllDataSpecs(context.Context, *QueryGetAllDataSpecsRequest) (*QueryGetAllDataSpecsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) GetDataSpec(ctx context.Context, req *QueryGetDataSpecRequest) (*QueryGetDataSpecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataSpec not implemented")
}
func (*UnimplementedQueryServer) DecodeQuerydata(ctx context.Context, req *QueryDecodeQuerydataRequest) (*QueryDecodeQuerydataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecodeQuerydata not implemented")
}
func (*UnimplementedQueryServer) GenerateQuerydata(ctx context.Context, req *QueryGenerateQuerydataRequest) (*QueryGenerateQuerydataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateQuerydata not implemented")
}
func (*UnimplementedQueryServer) DecodeValue(ctx context.Context, req *QueryDecodeValueRequest) (*QueryDecodeValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecodeValue not implemented")
}
func (*UnimplementedQueryServer) GetAllDataSpecs(ctx context.Context, req *QueryGetAllDataSpecsRequest) (*QueryGetAllDataSpecsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllDataSpecs not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.registry.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetDataSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetDataSpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetDataSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.registry.Query/GetDataSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetDataSpec(ctx, req.(*QueryGetDataSpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DecodeQuerydata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDecodeQuerydataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DecodeQuerydata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.registry.Query/DecodeQuerydata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DecodeQuerydata(ctx, req.(*QueryDecodeQuerydataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GenerateQuerydata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGenerateQuerydataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GenerateQuerydata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.registry.Query/GenerateQuerydata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GenerateQuerydata(ctx, req.(*QueryGenerateQuerydataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DecodeValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDecodeValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DecodeValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.registry.Query/DecodeValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DecodeValue(ctx, req.(*QueryDecodeValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAllDataSpecs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAllDataSpecsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAllDataSpecs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.registry.Query/GetAllDataSpecs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAllDataSpecs(ctx, req.(*QueryGetAllDataSpecsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "layer.registry.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "GetDataSpec",
			Handler:    _Query_GetDataSpec_Handler,
		},
		{
			MethodName: "DecodeQuerydata",
			Handler:    _Query_DecodeQuerydata_Handler,
		},
		{
			MethodName: "GenerateQuerydata",
			Handler:    _Query_GenerateQuerydata_Handler,
		},
		{
			MethodName: "DecodeValue",
			Handler:    _Query_DecodeValue_Handler,
		},
		{
			MethodName: "GetAllDataSpecs",
			Handler:    _Query_GetAllDataSpecs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "layer/registry/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetDataSpecRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDataSpecRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDataSpecRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.QueryType) > 0 {
		i -= len(m.QueryType)
		copy(dAtA[i:], m.QueryType)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.QueryType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetDataSpecResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDataSpecResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDataSpecResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDecodeQuerydataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDecodeQuerydataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDecodeQuerydataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.QueryData) > 0 {
		i -= len(m.QueryData)
		copy(dAtA[i:], m.QueryData)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.QueryData)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDecodeQuerydataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDecodeQuerydataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDecodeQuerydataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Spec) > 0 {
		i -= len(m.Spec)
		copy(dAtA[i:], m.Spec)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Spec)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGenerateQuerydataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGenerateQuerydataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGenerateQuerydataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Parameters) > 0 {
		i -= len(m.Parameters)
		copy(dAtA[i:], m.Parameters)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Parameters)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Querytype) > 0 {
		i -= len(m.Querytype)
		copy(dAtA[i:], m.Querytype)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Querytype)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGenerateQuerydataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGenerateQuerydataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGenerateQuerydataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.QueryData) > 0 {
		i -= len(m.QueryData)
		copy(dAtA[i:], m.QueryData)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.QueryData)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDecodeValueRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDecodeValueRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDecodeValueRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.QueryType) > 0 {
		i -= len(m.QueryType)
		copy(dAtA[i:], m.QueryType)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.QueryType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDecodeValueResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDecodeValueResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDecodeValueResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DecodedValue) > 0 {
		i -= len(m.DecodedValue)
		copy(dAtA[i:], m.DecodedValue)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DecodedValue)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllDataSpecsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllDataSpecsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllDataSpecsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetAllDataSpecsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllDataSpecsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllDataSpecsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Specs) > 0 {
		for iNdEx := len(m.Specs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Specs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetDataSpecRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.QueryType)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetDataSpecResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDecodeQuerydataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.QueryData)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDecodeQuerydataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Spec)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGenerateQuerydataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Querytype)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Parameters)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGenerateQuerydataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.QueryData)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDecodeValueRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.QueryType)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDecodeValueResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DecodedValue)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAllDataSpecsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetAllDataSpecsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Specs) > 0 {
		for _, e := range m.Specs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDataSpecRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDataSpecRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDataSpecRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDataSpecResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDataSpecResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDataSpecResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &DataSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDecodeQuerydataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDecodeQuerydataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDecodeQuerydataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryData = append(m.QueryData[:0], dAtA[iNdEx:postIndex]...)
			if m.QueryData == nil {
				m.QueryData = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDecodeQuerydataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDecodeQuerydataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDecodeQuerydataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spec = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGenerateQuerydataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGenerateQuerydataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGenerateQuerydataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Querytype", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Querytype = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parameters", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parameters = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGenerateQuerydataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGenerateQuerydataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGenerateQuerydataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryData = append(m.QueryData[:0], dAtA[iNdEx:postIndex]...)
			if m.QueryData == nil {
				m.QueryData = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDecodeValueRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDecodeValueRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDecodeValueRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDecodeValueResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDecodeValueResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDecodeValueResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecodedValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DecodedValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllDataSpecsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllDataSpecsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllDataSpecsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllDataSpecsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllDataSpecsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllDataSpecsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Specs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Specs = append(m.Specs, &DataSpec{})
			if err := m.Specs[len(m.Specs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
