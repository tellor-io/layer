// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: layer/registry/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgRegisterSpec defines the Msg/RegisterSpec request type.
type MsgRegisterSpec struct {
	// address that registers the data spec
	Registrar string `protobuf:"bytes,1,opt,name=registrar,proto3" json:"registrar,omitempty"`
	// name of the query type (ie. "SpotPrice")
	QueryType string `protobuf:"bytes,2,opt,name=query_type,json=queryType,proto3" json:"query_type,omitempty"`
	// data spec
	Spec DataSpec `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec"`
}

func (m *MsgRegisterSpec) Reset()         { *m = MsgRegisterSpec{} }
func (m *MsgRegisterSpec) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterSpec) ProtoMessage()    {}
func (*MsgRegisterSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dfd681be11a64dd, []int{0}
}
func (m *MsgRegisterSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterSpec.Merge(m, src)
}
func (m *MsgRegisterSpec) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterSpec.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterSpec proto.InternalMessageInfo

func (m *MsgRegisterSpec) GetRegistrar() string {
	if m != nil {
		return m.Registrar
	}
	return ""
}

func (m *MsgRegisterSpec) GetQueryType() string {
	if m != nil {
		return m.QueryType
	}
	return ""
}

func (m *MsgRegisterSpec) GetSpec() DataSpec {
	if m != nil {
		return m.Spec
	}
	return DataSpec{}
}

// MsgRegisterSpecResponse defines the Msg/RegisterSpec response type.
type MsgRegisterSpecResponse struct {
}

func (m *MsgRegisterSpecResponse) Reset()         { *m = MsgRegisterSpecResponse{} }
func (m *MsgRegisterSpecResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterSpecResponse) ProtoMessage()    {}
func (*MsgRegisterSpecResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dfd681be11a64dd, []int{1}
}
func (m *MsgRegisterSpecResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterSpecResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterSpecResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterSpecResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterSpecResponse.Merge(m, src)
}
func (m *MsgRegisterSpecResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterSpecResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterSpecResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterSpecResponse proto.InternalMessageInfo

// MsgUpdateDataSpec is the Msg/UpdateDataSpec request type.
type MsgUpdateDataSpec struct {
	// authority is the address that is allowed calling this msg.
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// query type to update
	QueryType string `protobuf:"bytes,2,opt,name=query_type,json=queryType,proto3" json:"query_type,omitempty"`
	// data spec update
	Spec DataSpec `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec"`
}

func (m *MsgUpdateDataSpec) Reset()         { *m = MsgUpdateDataSpec{} }
func (m *MsgUpdateDataSpec) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateDataSpec) ProtoMessage()    {}
func (*MsgUpdateDataSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dfd681be11a64dd, []int{2}
}
func (m *MsgUpdateDataSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateDataSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateDataSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateDataSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateDataSpec.Merge(m, src)
}
func (m *MsgUpdateDataSpec) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateDataSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateDataSpec.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateDataSpec proto.InternalMessageInfo

func (m *MsgUpdateDataSpec) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateDataSpec) GetQueryType() string {
	if m != nil {
		return m.QueryType
	}
	return ""
}

func (m *MsgUpdateDataSpec) GetSpec() DataSpec {
	if m != nil {
		return m.Spec
	}
	return DataSpec{}
}

type MsgUpdateDataSpecResponse struct {
}

func (m *MsgUpdateDataSpecResponse) Reset()         { *m = MsgUpdateDataSpecResponse{} }
func (m *MsgUpdateDataSpecResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateDataSpecResponse) ProtoMessage()    {}
func (*MsgUpdateDataSpecResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dfd681be11a64dd, []int{3}
}
func (m *MsgUpdateDataSpecResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateDataSpecResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateDataSpecResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateDataSpecResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateDataSpecResponse.Merge(m, src)
}
func (m *MsgUpdateDataSpecResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateDataSpecResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateDataSpecResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateDataSpecResponse proto.InternalMessageInfo

// MsgRemoveDataSpecs is the Msg/RemoveDataSpecs request type.
type MsgRemoveDataSpecs struct {
	// authority is the address that is allowed calling this msg.
	Authority     string   `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	DataSpecTypes []string `protobuf:"bytes,2,rep,name=data_spec_types,json=dataSpecTypes,proto3" json:"data_spec_types,omitempty"`
}

func (m *MsgRemoveDataSpecs) Reset()         { *m = MsgRemoveDataSpecs{} }
func (m *MsgRemoveDataSpecs) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveDataSpecs) ProtoMessage()    {}
func (*MsgRemoveDataSpecs) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dfd681be11a64dd, []int{4}
}
func (m *MsgRemoveDataSpecs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveDataSpecs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveDataSpecs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveDataSpecs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveDataSpecs.Merge(m, src)
}
func (m *MsgRemoveDataSpecs) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveDataSpecs) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveDataSpecs.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveDataSpecs proto.InternalMessageInfo

func (m *MsgRemoveDataSpecs) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgRemoveDataSpecs) GetDataSpecTypes() []string {
	if m != nil {
		return m.DataSpecTypes
	}
	return nil
}

type MsgRemoveDataSpecsResponse struct {
}

func (m *MsgRemoveDataSpecsResponse) Reset()         { *m = MsgRemoveDataSpecsResponse{} }
func (m *MsgRemoveDataSpecsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveDataSpecsResponse) ProtoMessage()    {}
func (*MsgRemoveDataSpecsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dfd681be11a64dd, []int{5}
}
func (m *MsgRemoveDataSpecsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveDataSpecsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveDataSpecsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveDataSpecsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveDataSpecsResponse.Merge(m, src)
}
func (m *MsgRemoveDataSpecsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveDataSpecsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveDataSpecsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveDataSpecsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgRegisterSpec)(nil), "layer.registry.MsgRegisterSpec")
	proto.RegisterType((*MsgRegisterSpecResponse)(nil), "layer.registry.MsgRegisterSpecResponse")
	proto.RegisterType((*MsgUpdateDataSpec)(nil), "layer.registry.MsgUpdateDataSpec")
	proto.RegisterType((*MsgUpdateDataSpecResponse)(nil), "layer.registry.MsgUpdateDataSpecResponse")
	proto.RegisterType((*MsgRemoveDataSpecs)(nil), "layer.registry.MsgRemoveDataSpecs")
	proto.RegisterType((*MsgRemoveDataSpecsResponse)(nil), "layer.registry.MsgRemoveDataSpecsResponse")
}

func init() { proto.RegisterFile("layer/registry/tx.proto", fileDescriptor_6dfd681be11a64dd) }

var fileDescriptor_6dfd681be11a64dd = []byte{
	// 495 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xcf, 0x8b, 0xd3, 0x40,
	0x14, 0xee, 0xb4, 0xab, 0xd0, 0xa7, 0xb6, 0x6c, 0x58, 0x68, 0x1a, 0x35, 0x5b, 0x73, 0xd0, 0x5a,
	0xd9, 0x04, 0x2b, 0x7a, 0xf0, 0x66, 0xd1, 0x63, 0x2f, 0x59, 0x05, 0xf1, 0x60, 0x99, 0x6d, 0x86,
	0xd9, 0x40, 0xd3, 0x89, 0x33, 0xd3, 0x65, 0x73, 0x13, 0x8f, 0x9e, 0xfc, 0x37, 0x44, 0x0f, 0x3d,
	0xf8, 0x47, 0xec, 0x71, 0x11, 0x04, 0x4f, 0x22, 0xed, 0xa1, 0xff, 0x86, 0x64, 0xf2, 0xa3, 0x34,
	0x5d, 0x08, 0x14, 0xbc, 0x24, 0x99, 0xf7, 0x7d, 0xf3, 0xbe, 0xf7, 0xbd, 0xf7, 0x08, 0xb4, 0x26,
	0x38, 0x22, 0xdc, 0xe1, 0x84, 0xfa, 0x42, 0xf2, 0xc8, 0x91, 0xe7, 0x76, 0xc8, 0x99, 0x64, 0x5a,
	0x43, 0x01, 0x76, 0x06, 0x18, 0xfb, 0x38, 0xf0, 0xa7, 0xcc, 0x51, 0xcf, 0x84, 0x62, 0xb4, 0xc6,
	0x4c, 0x04, 0x4c, 0x38, 0x81, 0xa0, 0xce, 0xd9, 0xe3, 0xf8, 0x95, 0x02, 0xed, 0x04, 0x18, 0xa9,
	0x93, 0x93, 0x1c, 0x52, 0xe8, 0x80, 0x32, 0xca, 0x92, 0x78, 0xfc, 0x95, 0x46, 0xcd, 0x42, 0x15,
	0x1e, 0x96, 0x78, 0x24, 0x42, 0x32, 0x4e, 0x70, 0xeb, 0x3b, 0x82, 0xe6, 0x50, 0x50, 0x57, 0xe1,
	0x84, 0x1f, 0x87, 0x64, 0xac, 0x3d, 0x83, 0x7a, 0xca, 0xc7, 0x5c, 0x47, 0x1d, 0xd4, 0xad, 0x0f,
	0xf4, 0x9f, 0x3f, 0x8e, 0x0e, 0x52, 0xb9, 0x17, 0x9e, 0xc7, 0x89, 0x10, 0xc7, 0x92, 0xfb, 0x53,
	0xea, 0xae, 0xa9, 0xda, 0x5d, 0x80, 0x0f, 0x33, 0xc2, 0xa3, 0x91, 0x8c, 0x42, 0xa2, 0x57, 0xe3,
	0x8b, 0x6e, 0x5d, 0x45, 0x5e, 0x47, 0x21, 0xd1, 0xfa, 0xb0, 0x17, 0x0b, 0xeb, 0xb5, 0x0e, 0xea,
	0xde, 0xe8, 0xeb, 0xf6, 0x66, 0x1b, 0xec, 0x97, 0x58, 0xe2, 0x58, 0x7e, 0xb0, 0x77, 0xf1, 0xe7,
	0xb0, 0xe2, 0x2a, 0xee, 0xf3, 0xc6, 0xa7, 0xd5, 0xbc, 0xb7, 0x96, 0xb0, 0xda, 0xd0, 0x2a, 0x54,
	0xeb, 0x12, 0x11, 0xb2, 0xa9, 0x20, 0xd6, 0x2f, 0x04, 0xfb, 0x43, 0x41, 0xdf, 0x84, 0x1e, 0x96,
	0x24, 0x4b, 0x16, 0x7b, 0xc1, 0x33, 0x79, 0xca, 0xb8, 0x2f, 0xa3, 0x72, 0x2f, 0x39, 0xf5, 0x7f,
	0x78, 0x79, 0xaa, 0xbc, 0xe4, 0x12, 0x9f, 0x57, 0xf3, 0x9e, 0x95, 0x4c, 0xe7, 0x7c, 0x3d, 0x9f,
	0x2d, 0x07, 0xd6, 0x6d, 0x68, 0x6f, 0x05, 0x73, 0xd3, 0xdf, 0x10, 0x68, 0xaa, 0x21, 0x01, 0x3b,
	0xcb, 0x51, 0xb1, 0xb3, 0xeb, 0xfb, 0xd0, 0xcc, 0x17, 0x44, 0x39, 0x17, 0x7a, 0xb5, 0x53, 0xeb,
	0xd6, 0xdd, 0x5b, 0x5e, 0x9a, 0x3b, 0x76, 0x2f, 0x76, 0xb5, 0x72, 0x07, 0x8c, 0xed, 0x62, 0x33,
	0x2f, 0xfd, 0xaf, 0x55, 0xa8, 0x0d, 0x05, 0xd5, 0xde, 0xc2, 0xcd, 0x8d, 0x75, 0x3c, 0x2c, 0x76,
	0xb7, 0xb0, 0x01, 0xc6, 0x83, 0x12, 0x42, 0xa6, 0xa0, 0xbd, 0x87, 0x46, 0x61, 0x3d, 0xee, 0x5d,
	0x71, 0x75, 0x93, 0x62, 0x3c, 0x2c, 0xa5, 0xe4, 0xf9, 0x31, 0x34, 0x8b, 0x93, 0xb0, 0xae, 0xac,
	0x6d, 0x83, 0x63, 0xf4, 0xca, 0x39, 0x99, 0x84, 0x71, 0xed, 0xe3, 0x6a, 0xde, 0x43, 0x83, 0x57,
	0x17, 0x0b, 0x13, 0x5d, 0x2e, 0x4c, 0xf4, 0x77, 0x61, 0xa2, 0x2f, 0x4b, 0xb3, 0x72, 0xb9, 0x34,
	0x2b, 0xbf, 0x97, 0x66, 0xe5, 0xdd, 0x23, 0xea, 0xcb, 0xd3, 0xd9, 0x89, 0x3d, 0x66, 0x81, 0x23,
	0xc9, 0x64, 0xc2, 0xf8, 0x91, 0xcf, 0x9c, 0xad, 0xe1, 0xa8, 0xe1, 0x9e, 0x5c, 0x57, 0x3f, 0x81,
	0x27, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x9e, 0x5f, 0x4a, 0x6a, 0xac, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// RegisterSpec defines a method for registering a new data specification.
	RegisterSpec(ctx context.Context, in *MsgRegisterSpec, opts ...grpc.CallOption) (*MsgRegisterSpecResponse, error)
	// UpdateDataSpec defines a method for updating an existing data specification.
	UpdateDataSpec(ctx context.Context, in *MsgUpdateDataSpec, opts ...grpc.CallOption) (*MsgUpdateDataSpecResponse, error)
	// RemoveDataSpecs defines a method for removing data specs via governance
	RemoveDataSpecs(ctx context.Context, in *MsgRemoveDataSpecs, opts ...grpc.CallOption) (*MsgRemoveDataSpecsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) RegisterSpec(ctx context.Context, in *MsgRegisterSpec, opts ...grpc.CallOption) (*MsgRegisterSpecResponse, error) {
	out := new(MsgRegisterSpecResponse)
	err := c.cc.Invoke(ctx, "/layer.registry.Msg/RegisterSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateDataSpec(ctx context.Context, in *MsgUpdateDataSpec, opts ...grpc.CallOption) (*MsgUpdateDataSpecResponse, error) {
	out := new(MsgUpdateDataSpecResponse)
	err := c.cc.Invoke(ctx, "/layer.registry.Msg/UpdateDataSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveDataSpecs(ctx context.Context, in *MsgRemoveDataSpecs, opts ...grpc.CallOption) (*MsgRemoveDataSpecsResponse, error) {
	out := new(MsgRemoveDataSpecsResponse)
	err := c.cc.Invoke(ctx, "/layer.registry.Msg/RemoveDataSpecs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// RegisterSpec defines a method for registering a new data specification.
	RegisterSpec(context.Context, *MsgRegisterSpec) (*MsgRegisterSpecResponse, error)
	// UpdateDataSpec defines a method for updating an existing data specification.
	UpdateDataSpec(context.Context, *MsgUpdateDataSpec) (*MsgUpdateDataSpecResponse, error)
	// RemoveDataSpecs defines a method for removing data specs via governance
	RemoveDataSpecs(context.Context, *MsgRemoveDataSpecs) (*MsgRemoveDataSpecsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) RegisterSpec(ctx context.Context, req *MsgRegisterSpec) (*MsgRegisterSpecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterSpec not implemented")
}
func (*UnimplementedMsgServer) UpdateDataSpec(ctx context.Context, req *MsgUpdateDataSpec) (*MsgUpdateDataSpecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDataSpec not implemented")
}
func (*UnimplementedMsgServer) RemoveDataSpecs(ctx context.Context, req *MsgRemoveDataSpecs) (*MsgRemoveDataSpecsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDataSpecs not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_RegisterSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.registry.Msg/RegisterSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterSpec(ctx, req.(*MsgRegisterSpec))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateDataSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateDataSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateDataSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.registry.Msg/UpdateDataSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateDataSpec(ctx, req.(*MsgUpdateDataSpec))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveDataSpecs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveDataSpecs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveDataSpecs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.registry.Msg/RemoveDataSpecs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveDataSpecs(ctx, req.(*MsgRemoveDataSpecs))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "layer.registry.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterSpec",
			Handler:    _Msg_RegisterSpec_Handler,
		},
		{
			MethodName: "UpdateDataSpec",
			Handler:    _Msg_UpdateDataSpec_Handler,
		},
		{
			MethodName: "RemoveDataSpecs",
			Handler:    _Msg_RemoveDataSpecs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "layer/registry/tx.proto",
}

func (m *MsgRegisterSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.QueryType) > 0 {
		i -= len(m.QueryType)
		copy(dAtA[i:], m.QueryType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.QueryType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Registrar) > 0 {
		i -= len(m.Registrar)
		copy(dAtA[i:], m.Registrar)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Registrar)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterSpecResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterSpecResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterSpecResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateDataSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateDataSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateDataSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.QueryType) > 0 {
		i -= len(m.QueryType)
		copy(dAtA[i:], m.QueryType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.QueryType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateDataSpecResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateDataSpecResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateDataSpecResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRemoveDataSpecs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveDataSpecs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveDataSpecs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DataSpecTypes) > 0 {
		for iNdEx := len(m.DataSpecTypes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DataSpecTypes[iNdEx])
			copy(dAtA[i:], m.DataSpecTypes[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.DataSpecTypes[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveDataSpecsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveDataSpecsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveDataSpecsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgRegisterSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Registrar)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.QueryType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Spec.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgRegisterSpecResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateDataSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.QueryType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Spec.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateDataSpecResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRemoveDataSpecs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.DataSpecTypes) > 0 {
		for _, s := range m.DataSpecTypes {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgRemoveDataSpecsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgRegisterSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Registrar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Registrar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterSpecResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterSpecResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterSpecResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateDataSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateDataSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateDataSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateDataSpecResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateDataSpecResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateDataSpecResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveDataSpecs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveDataSpecs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveDataSpecs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSpecTypes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataSpecTypes = append(m.DataSpecTypes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveDataSpecsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveDataSpecsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveDataSpecsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
