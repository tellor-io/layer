// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package dispute

import (
	_ "cosmossdk.io/api/cosmos/base/v1beta1"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	oracle "github.com/tellor-io/layer/api/layer/oracle"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_Dispute_14_list)(nil)

type _Dispute_14_list struct {
	list *[]uint64
}

func (x *_Dispute_14_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Dispute_14_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfUint64((*x.list)[i])
}

func (x *_Dispute_14_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_Dispute_14_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_Dispute_14_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message Dispute at list field PrevDisputeIds as it is not of Message kind"))
}

func (x *_Dispute_14_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_Dispute_14_list) NewElement() protoreflect.Value {
	v := uint64(0)
	return protoreflect.ValueOfUint64(v)
}

func (x *_Dispute_14_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_Dispute_17_list)(nil)

type _Dispute_17_list struct {
	list *[]*oracle.MicroReport
}

func (x *_Dispute_17_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Dispute_17_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_Dispute_17_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*oracle.MicroReport)
	(*x.list)[i] = concreteValue
}

func (x *_Dispute_17_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*oracle.MicroReport)
	*x.list = append(*x.list, concreteValue)
}

func (x *_Dispute_17_list) AppendMutable() protoreflect.Value {
	v := new(oracle.MicroReport)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Dispute_17_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_Dispute_17_list) NewElement() protoreflect.Value {
	v := new(oracle.MicroReport)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Dispute_17_list) IsValid() bool {
	return x.list != nil
}

var (
	md_Dispute                     protoreflect.MessageDescriptor
	fd_Dispute_hash_id             protoreflect.FieldDescriptor
	fd_Dispute_dispute_id          protoreflect.FieldDescriptor
	fd_Dispute_dispute_category    protoreflect.FieldDescriptor
	fd_Dispute_dispute_fee         protoreflect.FieldDescriptor
	fd_Dispute_dispute_status      protoreflect.FieldDescriptor
	fd_Dispute_dispute_start_time  protoreflect.FieldDescriptor
	fd_Dispute_dispute_end_time    protoreflect.FieldDescriptor
	fd_Dispute_dispute_start_block protoreflect.FieldDescriptor
	fd_Dispute_dispute_round       protoreflect.FieldDescriptor
	fd_Dispute_slash_amount        protoreflect.FieldDescriptor
	fd_Dispute_burn_amount         protoreflect.FieldDescriptor
	fd_Dispute_initial_evidence    protoreflect.FieldDescriptor
	fd_Dispute_fee_total           protoreflect.FieldDescriptor
	fd_Dispute_prev_dispute_ids    protoreflect.FieldDescriptor
	fd_Dispute_block_number        protoreflect.FieldDescriptor
	fd_Dispute_open                protoreflect.FieldDescriptor
	fd_Dispute_additional_evidence protoreflect.FieldDescriptor
	fd_Dispute_voter_reward        protoreflect.FieldDescriptor
	fd_Dispute_pending_execution   protoreflect.FieldDescriptor
)

func init() {
	file_layer_dispute_dispute_proto_init()
	md_Dispute = File_layer_dispute_dispute_proto.Messages().ByName("Dispute")
	fd_Dispute_hash_id = md_Dispute.Fields().ByName("hash_id")
	fd_Dispute_dispute_id = md_Dispute.Fields().ByName("dispute_id")
	fd_Dispute_dispute_category = md_Dispute.Fields().ByName("dispute_category")
	fd_Dispute_dispute_fee = md_Dispute.Fields().ByName("dispute_fee")
	fd_Dispute_dispute_status = md_Dispute.Fields().ByName("dispute_status")
	fd_Dispute_dispute_start_time = md_Dispute.Fields().ByName("dispute_start_time")
	fd_Dispute_dispute_end_time = md_Dispute.Fields().ByName("dispute_end_time")
	fd_Dispute_dispute_start_block = md_Dispute.Fields().ByName("dispute_start_block")
	fd_Dispute_dispute_round = md_Dispute.Fields().ByName("dispute_round")
	fd_Dispute_slash_amount = md_Dispute.Fields().ByName("slash_amount")
	fd_Dispute_burn_amount = md_Dispute.Fields().ByName("burn_amount")
	fd_Dispute_initial_evidence = md_Dispute.Fields().ByName("initial_evidence")
	fd_Dispute_fee_total = md_Dispute.Fields().ByName("fee_total")
	fd_Dispute_prev_dispute_ids = md_Dispute.Fields().ByName("prev_dispute_ids")
	fd_Dispute_block_number = md_Dispute.Fields().ByName("block_number")
	fd_Dispute_open = md_Dispute.Fields().ByName("open")
	fd_Dispute_additional_evidence = md_Dispute.Fields().ByName("additional_evidence")
	fd_Dispute_voter_reward = md_Dispute.Fields().ByName("voter_reward")
	fd_Dispute_pending_execution = md_Dispute.Fields().ByName("pending_execution")
}

var _ protoreflect.Message = (*fastReflection_Dispute)(nil)

type fastReflection_Dispute Dispute

func (x *Dispute) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Dispute)(x)
}

func (x *Dispute) slowProtoReflect() protoreflect.Message {
	mi := &file_layer_dispute_dispute_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Dispute_messageType fastReflection_Dispute_messageType
var _ protoreflect.MessageType = fastReflection_Dispute_messageType{}

type fastReflection_Dispute_messageType struct{}

func (x fastReflection_Dispute_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Dispute)(nil)
}
func (x fastReflection_Dispute_messageType) New() protoreflect.Message {
	return new(fastReflection_Dispute)
}
func (x fastReflection_Dispute_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Dispute
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Dispute) Descriptor() protoreflect.MessageDescriptor {
	return md_Dispute
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Dispute) Type() protoreflect.MessageType {
	return _fastReflection_Dispute_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Dispute) New() protoreflect.Message {
	return new(fastReflection_Dispute)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Dispute) Interface() protoreflect.ProtoMessage {
	return (*Dispute)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Dispute) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.HashId) != 0 {
		value := protoreflect.ValueOfBytes(x.HashId)
		if !f(fd_Dispute_hash_id, value) {
			return
		}
	}
	if x.DisputeId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.DisputeId)
		if !f(fd_Dispute_dispute_id, value) {
			return
		}
	}
	if x.DisputeCategory != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.DisputeCategory))
		if !f(fd_Dispute_dispute_category, value) {
			return
		}
	}
	if x.DisputeFee != "" {
		value := protoreflect.ValueOfString(x.DisputeFee)
		if !f(fd_Dispute_dispute_fee, value) {
			return
		}
	}
	if x.DisputeStatus != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.DisputeStatus))
		if !f(fd_Dispute_dispute_status, value) {
			return
		}
	}
	if x.DisputeStartTime != nil {
		value := protoreflect.ValueOfMessage(x.DisputeStartTime.ProtoReflect())
		if !f(fd_Dispute_dispute_start_time, value) {
			return
		}
	}
	if x.DisputeEndTime != nil {
		value := protoreflect.ValueOfMessage(x.DisputeEndTime.ProtoReflect())
		if !f(fd_Dispute_dispute_end_time, value) {
			return
		}
	}
	if x.DisputeStartBlock != uint64(0) {
		value := protoreflect.ValueOfUint64(x.DisputeStartBlock)
		if !f(fd_Dispute_dispute_start_block, value) {
			return
		}
	}
	if x.DisputeRound != uint64(0) {
		value := protoreflect.ValueOfUint64(x.DisputeRound)
		if !f(fd_Dispute_dispute_round, value) {
			return
		}
	}
	if x.SlashAmount != "" {
		value := protoreflect.ValueOfString(x.SlashAmount)
		if !f(fd_Dispute_slash_amount, value) {
			return
		}
	}
	if x.BurnAmount != "" {
		value := protoreflect.ValueOfString(x.BurnAmount)
		if !f(fd_Dispute_burn_amount, value) {
			return
		}
	}
	if x.InitialEvidence != nil {
		value := protoreflect.ValueOfMessage(x.InitialEvidence.ProtoReflect())
		if !f(fd_Dispute_initial_evidence, value) {
			return
		}
	}
	if x.FeeTotal != "" {
		value := protoreflect.ValueOfString(x.FeeTotal)
		if !f(fd_Dispute_fee_total, value) {
			return
		}
	}
	if len(x.PrevDisputeIds) != 0 {
		value := protoreflect.ValueOfList(&_Dispute_14_list{list: &x.PrevDisputeIds})
		if !f(fd_Dispute_prev_dispute_ids, value) {
			return
		}
	}
	if x.BlockNumber != uint64(0) {
		value := protoreflect.ValueOfUint64(x.BlockNumber)
		if !f(fd_Dispute_block_number, value) {
			return
		}
	}
	if x.Open != false {
		value := protoreflect.ValueOfBool(x.Open)
		if !f(fd_Dispute_open, value) {
			return
		}
	}
	if len(x.AdditionalEvidence) != 0 {
		value := protoreflect.ValueOfList(&_Dispute_17_list{list: &x.AdditionalEvidence})
		if !f(fd_Dispute_additional_evidence, value) {
			return
		}
	}
	if x.VoterReward != "" {
		value := protoreflect.ValueOfString(x.VoterReward)
		if !f(fd_Dispute_voter_reward, value) {
			return
		}
	}
	if x.PendingExecution != false {
		value := protoreflect.ValueOfBool(x.PendingExecution)
		if !f(fd_Dispute_pending_execution, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Dispute) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "layer.dispute.Dispute.hash_id":
		return len(x.HashId) != 0
	case "layer.dispute.Dispute.dispute_id":
		return x.DisputeId != uint64(0)
	case "layer.dispute.Dispute.dispute_category":
		return x.DisputeCategory != 0
	case "layer.dispute.Dispute.dispute_fee":
		return x.DisputeFee != ""
	case "layer.dispute.Dispute.dispute_status":
		return x.DisputeStatus != 0
	case "layer.dispute.Dispute.dispute_start_time":
		return x.DisputeStartTime != nil
	case "layer.dispute.Dispute.dispute_end_time":
		return x.DisputeEndTime != nil
	case "layer.dispute.Dispute.dispute_start_block":
		return x.DisputeStartBlock != uint64(0)
	case "layer.dispute.Dispute.dispute_round":
		return x.DisputeRound != uint64(0)
	case "layer.dispute.Dispute.slash_amount":
		return x.SlashAmount != ""
	case "layer.dispute.Dispute.burn_amount":
		return x.BurnAmount != ""
	case "layer.dispute.Dispute.initial_evidence":
		return x.InitialEvidence != nil
	case "layer.dispute.Dispute.fee_total":
		return x.FeeTotal != ""
	case "layer.dispute.Dispute.prev_dispute_ids":
		return len(x.PrevDisputeIds) != 0
	case "layer.dispute.Dispute.block_number":
		return x.BlockNumber != uint64(0)
	case "layer.dispute.Dispute.open":
		return x.Open != false
	case "layer.dispute.Dispute.additional_evidence":
		return len(x.AdditionalEvidence) != 0
	case "layer.dispute.Dispute.voter_reward":
		return x.VoterReward != ""
	case "layer.dispute.Dispute.pending_execution":
		return x.PendingExecution != false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: layer.dispute.Dispute"))
		}
		panic(fmt.Errorf("message layer.dispute.Dispute does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Dispute) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "layer.dispute.Dispute.hash_id":
		x.HashId = nil
	case "layer.dispute.Dispute.dispute_id":
		x.DisputeId = uint64(0)
	case "layer.dispute.Dispute.dispute_category":
		x.DisputeCategory = 0
	case "layer.dispute.Dispute.dispute_fee":
		x.DisputeFee = ""
	case "layer.dispute.Dispute.dispute_status":
		x.DisputeStatus = 0
	case "layer.dispute.Dispute.dispute_start_time":
		x.DisputeStartTime = nil
	case "layer.dispute.Dispute.dispute_end_time":
		x.DisputeEndTime = nil
	case "layer.dispute.Dispute.dispute_start_block":
		x.DisputeStartBlock = uint64(0)
	case "layer.dispute.Dispute.dispute_round":
		x.DisputeRound = uint64(0)
	case "layer.dispute.Dispute.slash_amount":
		x.SlashAmount = ""
	case "layer.dispute.Dispute.burn_amount":
		x.BurnAmount = ""
	case "layer.dispute.Dispute.initial_evidence":
		x.InitialEvidence = nil
	case "layer.dispute.Dispute.fee_total":
		x.FeeTotal = ""
	case "layer.dispute.Dispute.prev_dispute_ids":
		x.PrevDisputeIds = nil
	case "layer.dispute.Dispute.block_number":
		x.BlockNumber = uint64(0)
	case "layer.dispute.Dispute.open":
		x.Open = false
	case "layer.dispute.Dispute.additional_evidence":
		x.AdditionalEvidence = nil
	case "layer.dispute.Dispute.voter_reward":
		x.VoterReward = ""
	case "layer.dispute.Dispute.pending_execution":
		x.PendingExecution = false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: layer.dispute.Dispute"))
		}
		panic(fmt.Errorf("message layer.dispute.Dispute does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Dispute) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "layer.dispute.Dispute.hash_id":
		value := x.HashId
		return protoreflect.ValueOfBytes(value)
	case "layer.dispute.Dispute.dispute_id":
		value := x.DisputeId
		return protoreflect.ValueOfUint64(value)
	case "layer.dispute.Dispute.dispute_category":
		value := x.DisputeCategory
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "layer.dispute.Dispute.dispute_fee":
		value := x.DisputeFee
		return protoreflect.ValueOfString(value)
	case "layer.dispute.Dispute.dispute_status":
		value := x.DisputeStatus
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "layer.dispute.Dispute.dispute_start_time":
		value := x.DisputeStartTime
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "layer.dispute.Dispute.dispute_end_time":
		value := x.DisputeEndTime
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "layer.dispute.Dispute.dispute_start_block":
		value := x.DisputeStartBlock
		return protoreflect.ValueOfUint64(value)
	case "layer.dispute.Dispute.dispute_round":
		value := x.DisputeRound
		return protoreflect.ValueOfUint64(value)
	case "layer.dispute.Dispute.slash_amount":
		value := x.SlashAmount
		return protoreflect.ValueOfString(value)
	case "layer.dispute.Dispute.burn_amount":
		value := x.BurnAmount
		return protoreflect.ValueOfString(value)
	case "layer.dispute.Dispute.initial_evidence":
		value := x.InitialEvidence
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "layer.dispute.Dispute.fee_total":
		value := x.FeeTotal
		return protoreflect.ValueOfString(value)
	case "layer.dispute.Dispute.prev_dispute_ids":
		if len(x.PrevDisputeIds) == 0 {
			return protoreflect.ValueOfList(&_Dispute_14_list{})
		}
		listValue := &_Dispute_14_list{list: &x.PrevDisputeIds}
		return protoreflect.ValueOfList(listValue)
	case "layer.dispute.Dispute.block_number":
		value := x.BlockNumber
		return protoreflect.ValueOfUint64(value)
	case "layer.dispute.Dispute.open":
		value := x.Open
		return protoreflect.ValueOfBool(value)
	case "layer.dispute.Dispute.additional_evidence":
		if len(x.AdditionalEvidence) == 0 {
			return protoreflect.ValueOfList(&_Dispute_17_list{})
		}
		listValue := &_Dispute_17_list{list: &x.AdditionalEvidence}
		return protoreflect.ValueOfList(listValue)
	case "layer.dispute.Dispute.voter_reward":
		value := x.VoterReward
		return protoreflect.ValueOfString(value)
	case "layer.dispute.Dispute.pending_execution":
		value := x.PendingExecution
		return protoreflect.ValueOfBool(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: layer.dispute.Dispute"))
		}
		panic(fmt.Errorf("message layer.dispute.Dispute does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Dispute) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "layer.dispute.Dispute.hash_id":
		x.HashId = value.Bytes()
	case "layer.dispute.Dispute.dispute_id":
		x.DisputeId = value.Uint()
	case "layer.dispute.Dispute.dispute_category":
		x.DisputeCategory = (DisputeCategory)(value.Enum())
	case "layer.dispute.Dispute.dispute_fee":
		x.DisputeFee = value.Interface().(string)
	case "layer.dispute.Dispute.dispute_status":
		x.DisputeStatus = (DisputeStatus)(value.Enum())
	case "layer.dispute.Dispute.dispute_start_time":
		x.DisputeStartTime = value.Message().Interface().(*timestamppb.Timestamp)
	case "layer.dispute.Dispute.dispute_end_time":
		x.DisputeEndTime = value.Message().Interface().(*timestamppb.Timestamp)
	case "layer.dispute.Dispute.dispute_start_block":
		x.DisputeStartBlock = value.Uint()
	case "layer.dispute.Dispute.dispute_round":
		x.DisputeRound = value.Uint()
	case "layer.dispute.Dispute.slash_amount":
		x.SlashAmount = value.Interface().(string)
	case "layer.dispute.Dispute.burn_amount":
		x.BurnAmount = value.Interface().(string)
	case "layer.dispute.Dispute.initial_evidence":
		x.InitialEvidence = value.Message().Interface().(*oracle.MicroReport)
	case "layer.dispute.Dispute.fee_total":
		x.FeeTotal = value.Interface().(string)
	case "layer.dispute.Dispute.prev_dispute_ids":
		lv := value.List()
		clv := lv.(*_Dispute_14_list)
		x.PrevDisputeIds = *clv.list
	case "layer.dispute.Dispute.block_number":
		x.BlockNumber = value.Uint()
	case "layer.dispute.Dispute.open":
		x.Open = value.Bool()
	case "layer.dispute.Dispute.additional_evidence":
		lv := value.List()
		clv := lv.(*_Dispute_17_list)
		x.AdditionalEvidence = *clv.list
	case "layer.dispute.Dispute.voter_reward":
		x.VoterReward = value.Interface().(string)
	case "layer.dispute.Dispute.pending_execution":
		x.PendingExecution = value.Bool()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: layer.dispute.Dispute"))
		}
		panic(fmt.Errorf("message layer.dispute.Dispute does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Dispute) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "layer.dispute.Dispute.dispute_start_time":
		if x.DisputeStartTime == nil {
			x.DisputeStartTime = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.DisputeStartTime.ProtoReflect())
	case "layer.dispute.Dispute.dispute_end_time":
		if x.DisputeEndTime == nil {
			x.DisputeEndTime = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.DisputeEndTime.ProtoReflect())
	case "layer.dispute.Dispute.initial_evidence":
		if x.InitialEvidence == nil {
			x.InitialEvidence = new(oracle.MicroReport)
		}
		return protoreflect.ValueOfMessage(x.InitialEvidence.ProtoReflect())
	case "layer.dispute.Dispute.prev_dispute_ids":
		if x.PrevDisputeIds == nil {
			x.PrevDisputeIds = []uint64{}
		}
		value := &_Dispute_14_list{list: &x.PrevDisputeIds}
		return protoreflect.ValueOfList(value)
	case "layer.dispute.Dispute.additional_evidence":
		if x.AdditionalEvidence == nil {
			x.AdditionalEvidence = []*oracle.MicroReport{}
		}
		value := &_Dispute_17_list{list: &x.AdditionalEvidence}
		return protoreflect.ValueOfList(value)
	case "layer.dispute.Dispute.hash_id":
		panic(fmt.Errorf("field hash_id of message layer.dispute.Dispute is not mutable"))
	case "layer.dispute.Dispute.dispute_id":
		panic(fmt.Errorf("field dispute_id of message layer.dispute.Dispute is not mutable"))
	case "layer.dispute.Dispute.dispute_category":
		panic(fmt.Errorf("field dispute_category of message layer.dispute.Dispute is not mutable"))
	case "layer.dispute.Dispute.dispute_fee":
		panic(fmt.Errorf("field dispute_fee of message layer.dispute.Dispute is not mutable"))
	case "layer.dispute.Dispute.dispute_status":
		panic(fmt.Errorf("field dispute_status of message layer.dispute.Dispute is not mutable"))
	case "layer.dispute.Dispute.dispute_start_block":
		panic(fmt.Errorf("field dispute_start_block of message layer.dispute.Dispute is not mutable"))
	case "layer.dispute.Dispute.dispute_round":
		panic(fmt.Errorf("field dispute_round of message layer.dispute.Dispute is not mutable"))
	case "layer.dispute.Dispute.slash_amount":
		panic(fmt.Errorf("field slash_amount of message layer.dispute.Dispute is not mutable"))
	case "layer.dispute.Dispute.burn_amount":
		panic(fmt.Errorf("field burn_amount of message layer.dispute.Dispute is not mutable"))
	case "layer.dispute.Dispute.fee_total":
		panic(fmt.Errorf("field fee_total of message layer.dispute.Dispute is not mutable"))
	case "layer.dispute.Dispute.block_number":
		panic(fmt.Errorf("field block_number of message layer.dispute.Dispute is not mutable"))
	case "layer.dispute.Dispute.open":
		panic(fmt.Errorf("field open of message layer.dispute.Dispute is not mutable"))
	case "layer.dispute.Dispute.voter_reward":
		panic(fmt.Errorf("field voter_reward of message layer.dispute.Dispute is not mutable"))
	case "layer.dispute.Dispute.pending_execution":
		panic(fmt.Errorf("field pending_execution of message layer.dispute.Dispute is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: layer.dispute.Dispute"))
		}
		panic(fmt.Errorf("message layer.dispute.Dispute does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Dispute) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "layer.dispute.Dispute.hash_id":
		return protoreflect.ValueOfBytes(nil)
	case "layer.dispute.Dispute.dispute_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "layer.dispute.Dispute.dispute_category":
		return protoreflect.ValueOfEnum(0)
	case "layer.dispute.Dispute.dispute_fee":
		return protoreflect.ValueOfString("")
	case "layer.dispute.Dispute.dispute_status":
		return protoreflect.ValueOfEnum(0)
	case "layer.dispute.Dispute.dispute_start_time":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "layer.dispute.Dispute.dispute_end_time":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "layer.dispute.Dispute.dispute_start_block":
		return protoreflect.ValueOfUint64(uint64(0))
	case "layer.dispute.Dispute.dispute_round":
		return protoreflect.ValueOfUint64(uint64(0))
	case "layer.dispute.Dispute.slash_amount":
		return protoreflect.ValueOfString("")
	case "layer.dispute.Dispute.burn_amount":
		return protoreflect.ValueOfString("")
	case "layer.dispute.Dispute.initial_evidence":
		m := new(oracle.MicroReport)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "layer.dispute.Dispute.fee_total":
		return protoreflect.ValueOfString("")
	case "layer.dispute.Dispute.prev_dispute_ids":
		list := []uint64{}
		return protoreflect.ValueOfList(&_Dispute_14_list{list: &list})
	case "layer.dispute.Dispute.block_number":
		return protoreflect.ValueOfUint64(uint64(0))
	case "layer.dispute.Dispute.open":
		return protoreflect.ValueOfBool(false)
	case "layer.dispute.Dispute.additional_evidence":
		list := []*oracle.MicroReport{}
		return protoreflect.ValueOfList(&_Dispute_17_list{list: &list})
	case "layer.dispute.Dispute.voter_reward":
		return protoreflect.ValueOfString("")
	case "layer.dispute.Dispute.pending_execution":
		return protoreflect.ValueOfBool(false)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: layer.dispute.Dispute"))
		}
		panic(fmt.Errorf("message layer.dispute.Dispute does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Dispute) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in layer.dispute.Dispute", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Dispute) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Dispute) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Dispute) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Dispute) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Dispute)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.HashId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.DisputeId != 0 {
			n += 1 + runtime.Sov(uint64(x.DisputeId))
		}
		if x.DisputeCategory != 0 {
			n += 1 + runtime.Sov(uint64(x.DisputeCategory))
		}
		l = len(x.DisputeFee)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.DisputeStatus != 0 {
			n += 1 + runtime.Sov(uint64(x.DisputeStatus))
		}
		if x.DisputeStartTime != nil {
			l = options.Size(x.DisputeStartTime)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.DisputeEndTime != nil {
			l = options.Size(x.DisputeEndTime)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.DisputeStartBlock != 0 {
			n += 1 + runtime.Sov(uint64(x.DisputeStartBlock))
		}
		if x.DisputeRound != 0 {
			n += 1 + runtime.Sov(uint64(x.DisputeRound))
		}
		l = len(x.SlashAmount)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.BurnAmount)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.InitialEvidence != nil {
			l = options.Size(x.InitialEvidence)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.FeeTotal)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.PrevDisputeIds) > 0 {
			l = 0
			for _, e := range x.PrevDisputeIds {
				l += runtime.Sov(uint64(e))
			}
			n += 1 + runtime.Sov(uint64(l)) + l
		}
		if x.BlockNumber != 0 {
			n += 1 + runtime.Sov(uint64(x.BlockNumber))
		}
		if x.Open {
			n += 3
		}
		if len(x.AdditionalEvidence) > 0 {
			for _, e := range x.AdditionalEvidence {
				l = options.Size(e)
				n += 2 + l + runtime.Sov(uint64(l))
			}
		}
		l = len(x.VoterReward)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.PendingExecution {
			n += 3
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Dispute)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.PendingExecution {
			i--
			if x.PendingExecution {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x98
		}
		if len(x.VoterReward) > 0 {
			i -= len(x.VoterReward)
			copy(dAtA[i:], x.VoterReward)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.VoterReward)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
		if len(x.AdditionalEvidence) > 0 {
			for iNdEx := len(x.AdditionalEvidence) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.AdditionalEvidence[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1
				i--
				dAtA[i] = 0x8a
			}
		}
		if x.Open {
			i--
			if x.Open {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x80
		}
		if x.BlockNumber != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.BlockNumber))
			i--
			dAtA[i] = 0x78
		}
		if len(x.PrevDisputeIds) > 0 {
			var pksize2 int
			for _, num := range x.PrevDisputeIds {
				pksize2 += runtime.Sov(uint64(num))
			}
			i -= pksize2
			j1 := i
			for _, num := range x.PrevDisputeIds {
				for num >= 1<<7 {
					dAtA[j1] = uint8(uint64(num)&0x7f | 0x80)
					num >>= 7
					j1++
				}
				dAtA[j1] = uint8(num)
				j1++
			}
			i = runtime.EncodeVarint(dAtA, i, uint64(pksize2))
			i--
			dAtA[i] = 0x72
		}
		if len(x.FeeTotal) > 0 {
			i -= len(x.FeeTotal)
			copy(dAtA[i:], x.FeeTotal)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.FeeTotal)))
			i--
			dAtA[i] = 0x6a
		}
		if x.InitialEvidence != nil {
			encoded, err := options.Marshal(x.InitialEvidence)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x62
		}
		if len(x.BurnAmount) > 0 {
			i -= len(x.BurnAmount)
			copy(dAtA[i:], x.BurnAmount)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.BurnAmount)))
			i--
			dAtA[i] = 0x5a
		}
		if len(x.SlashAmount) > 0 {
			i -= len(x.SlashAmount)
			copy(dAtA[i:], x.SlashAmount)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SlashAmount)))
			i--
			dAtA[i] = 0x52
		}
		if x.DisputeRound != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.DisputeRound))
			i--
			dAtA[i] = 0x48
		}
		if x.DisputeStartBlock != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.DisputeStartBlock))
			i--
			dAtA[i] = 0x40
		}
		if x.DisputeEndTime != nil {
			encoded, err := options.Marshal(x.DisputeEndTime)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x3a
		}
		if x.DisputeStartTime != nil {
			encoded, err := options.Marshal(x.DisputeStartTime)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x32
		}
		if x.DisputeStatus != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.DisputeStatus))
			i--
			dAtA[i] = 0x28
		}
		if len(x.DisputeFee) > 0 {
			i -= len(x.DisputeFee)
			copy(dAtA[i:], x.DisputeFee)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.DisputeFee)))
			i--
			dAtA[i] = 0x22
		}
		if x.DisputeCategory != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.DisputeCategory))
			i--
			dAtA[i] = 0x18
		}
		if x.DisputeId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.DisputeId))
			i--
			dAtA[i] = 0x10
		}
		if len(x.HashId) > 0 {
			i -= len(x.HashId)
			copy(dAtA[i:], x.HashId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.HashId)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Dispute)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Dispute: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Dispute: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field HashId", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.HashId = append(x.HashId[:0], dAtA[iNdEx:postIndex]...)
				if x.HashId == nil {
					x.HashId = []byte{}
				}
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DisputeId", wireType)
				}
				x.DisputeId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.DisputeId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DisputeCategory", wireType)
				}
				x.DisputeCategory = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.DisputeCategory |= DisputeCategory(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DisputeFee", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.DisputeFee = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DisputeStatus", wireType)
				}
				x.DisputeStatus = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.DisputeStatus |= DisputeStatus(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DisputeStartTime", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.DisputeStartTime == nil {
					x.DisputeStartTime = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.DisputeStartTime); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DisputeEndTime", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.DisputeEndTime == nil {
					x.DisputeEndTime = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.DisputeEndTime); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 8:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DisputeStartBlock", wireType)
				}
				x.DisputeStartBlock = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.DisputeStartBlock |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 9:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DisputeRound", wireType)
				}
				x.DisputeRound = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.DisputeRound |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SlashAmount", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SlashAmount = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 11:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BurnAmount", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.BurnAmount = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 12:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field InitialEvidence", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.InitialEvidence == nil {
					x.InitialEvidence = &oracle.MicroReport{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.InitialEvidence); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 13:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FeeTotal", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.FeeTotal = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 14:
				if wireType == 0 {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					x.PrevDisputeIds = append(x.PrevDisputeIds, v)
				} else if wireType == 2 {
					var packedLen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						packedLen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if packedLen < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					postIndex := iNdEx + packedLen
					if postIndex < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					if postIndex > l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					var elementCount int
					var count int
					for _, integer := range dAtA[iNdEx:postIndex] {
						if integer < 128 {
							count++
						}
					}
					elementCount = count
					if elementCount != 0 && len(x.PrevDisputeIds) == 0 {
						x.PrevDisputeIds = make([]uint64, 0, elementCount)
					}
					for iNdEx < postIndex {
						var v uint64
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							v |= uint64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						x.PrevDisputeIds = append(x.PrevDisputeIds, v)
					}
				} else {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PrevDisputeIds", wireType)
				}
			case 15:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BlockNumber", wireType)
				}
				x.BlockNumber = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.BlockNumber |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 16:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Open", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.Open = bool(v != 0)
			case 17:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AdditionalEvidence", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AdditionalEvidence = append(x.AdditionalEvidence, &oracle.MicroReport{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.AdditionalEvidence[len(x.AdditionalEvidence)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 18:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field VoterReward", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.VoterReward = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 19:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PendingExecution", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.PendingExecution = bool(v != 0)
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_PayerInfo           protoreflect.MessageDescriptor
	fd_PayerInfo_amount    protoreflect.FieldDescriptor
	fd_PayerInfo_from_bond protoreflect.FieldDescriptor
)

func init() {
	file_layer_dispute_dispute_proto_init()
	md_PayerInfo = File_layer_dispute_dispute_proto.Messages().ByName("PayerInfo")
	fd_PayerInfo_amount = md_PayerInfo.Fields().ByName("amount")
	fd_PayerInfo_from_bond = md_PayerInfo.Fields().ByName("from_bond")
}

var _ protoreflect.Message = (*fastReflection_PayerInfo)(nil)

type fastReflection_PayerInfo PayerInfo

func (x *PayerInfo) ProtoReflect() protoreflect.Message {
	return (*fastReflection_PayerInfo)(x)
}

func (x *PayerInfo) slowProtoReflect() protoreflect.Message {
	mi := &file_layer_dispute_dispute_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_PayerInfo_messageType fastReflection_PayerInfo_messageType
var _ protoreflect.MessageType = fastReflection_PayerInfo_messageType{}

type fastReflection_PayerInfo_messageType struct{}

func (x fastReflection_PayerInfo_messageType) Zero() protoreflect.Message {
	return (*fastReflection_PayerInfo)(nil)
}
func (x fastReflection_PayerInfo_messageType) New() protoreflect.Message {
	return new(fastReflection_PayerInfo)
}
func (x fastReflection_PayerInfo_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_PayerInfo
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_PayerInfo) Descriptor() protoreflect.MessageDescriptor {
	return md_PayerInfo
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_PayerInfo) Type() protoreflect.MessageType {
	return _fastReflection_PayerInfo_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_PayerInfo) New() protoreflect.Message {
	return new(fastReflection_PayerInfo)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_PayerInfo) Interface() protoreflect.ProtoMessage {
	return (*PayerInfo)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_PayerInfo) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Amount != "" {
		value := protoreflect.ValueOfString(x.Amount)
		if !f(fd_PayerInfo_amount, value) {
			return
		}
	}
	if x.FromBond != false {
		value := protoreflect.ValueOfBool(x.FromBond)
		if !f(fd_PayerInfo_from_bond, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_PayerInfo) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "layer.dispute.PayerInfo.amount":
		return x.Amount != ""
	case "layer.dispute.PayerInfo.from_bond":
		return x.FromBond != false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: layer.dispute.PayerInfo"))
		}
		panic(fmt.Errorf("message layer.dispute.PayerInfo does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PayerInfo) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "layer.dispute.PayerInfo.amount":
		x.Amount = ""
	case "layer.dispute.PayerInfo.from_bond":
		x.FromBond = false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: layer.dispute.PayerInfo"))
		}
		panic(fmt.Errorf("message layer.dispute.PayerInfo does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_PayerInfo) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "layer.dispute.PayerInfo.amount":
		value := x.Amount
		return protoreflect.ValueOfString(value)
	case "layer.dispute.PayerInfo.from_bond":
		value := x.FromBond
		return protoreflect.ValueOfBool(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: layer.dispute.PayerInfo"))
		}
		panic(fmt.Errorf("message layer.dispute.PayerInfo does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PayerInfo) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "layer.dispute.PayerInfo.amount":
		x.Amount = value.Interface().(string)
	case "layer.dispute.PayerInfo.from_bond":
		x.FromBond = value.Bool()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: layer.dispute.PayerInfo"))
		}
		panic(fmt.Errorf("message layer.dispute.PayerInfo does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PayerInfo) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "layer.dispute.PayerInfo.amount":
		panic(fmt.Errorf("field amount of message layer.dispute.PayerInfo is not mutable"))
	case "layer.dispute.PayerInfo.from_bond":
		panic(fmt.Errorf("field from_bond of message layer.dispute.PayerInfo is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: layer.dispute.PayerInfo"))
		}
		panic(fmt.Errorf("message layer.dispute.PayerInfo does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_PayerInfo) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "layer.dispute.PayerInfo.amount":
		return protoreflect.ValueOfString("")
	case "layer.dispute.PayerInfo.from_bond":
		return protoreflect.ValueOfBool(false)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: layer.dispute.PayerInfo"))
		}
		panic(fmt.Errorf("message layer.dispute.PayerInfo does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_PayerInfo) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in layer.dispute.PayerInfo", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_PayerInfo) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PayerInfo) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_PayerInfo) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_PayerInfo) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*PayerInfo)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Amount)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.FromBond {
			n += 2
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*PayerInfo)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.FromBond {
			i--
			if x.FromBond {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x10
		}
		if len(x.Amount) > 0 {
			i -= len(x.Amount)
			copy(dAtA[i:], x.Amount)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Amount)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*PayerInfo)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PayerInfo: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PayerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Amount = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FromBond", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.FromBond = bool(v != 0)
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_BlockInfo                      protoreflect.MessageDescriptor
	fd_BlockInfo_total_reporter_power protoreflect.FieldDescriptor
	fd_BlockInfo_total_user_tips      protoreflect.FieldDescriptor
)

func init() {
	file_layer_dispute_dispute_proto_init()
	md_BlockInfo = File_layer_dispute_dispute_proto.Messages().ByName("BlockInfo")
	fd_BlockInfo_total_reporter_power = md_BlockInfo.Fields().ByName("total_reporter_power")
	fd_BlockInfo_total_user_tips = md_BlockInfo.Fields().ByName("total_user_tips")
}

var _ protoreflect.Message = (*fastReflection_BlockInfo)(nil)

type fastReflection_BlockInfo BlockInfo

func (x *BlockInfo) ProtoReflect() protoreflect.Message {
	return (*fastReflection_BlockInfo)(x)
}

func (x *BlockInfo) slowProtoReflect() protoreflect.Message {
	mi := &file_layer_dispute_dispute_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_BlockInfo_messageType fastReflection_BlockInfo_messageType
var _ protoreflect.MessageType = fastReflection_BlockInfo_messageType{}

type fastReflection_BlockInfo_messageType struct{}

func (x fastReflection_BlockInfo_messageType) Zero() protoreflect.Message {
	return (*fastReflection_BlockInfo)(nil)
}
func (x fastReflection_BlockInfo_messageType) New() protoreflect.Message {
	return new(fastReflection_BlockInfo)
}
func (x fastReflection_BlockInfo_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_BlockInfo
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_BlockInfo) Descriptor() protoreflect.MessageDescriptor {
	return md_BlockInfo
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_BlockInfo) Type() protoreflect.MessageType {
	return _fastReflection_BlockInfo_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_BlockInfo) New() protoreflect.Message {
	return new(fastReflection_BlockInfo)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_BlockInfo) Interface() protoreflect.ProtoMessage {
	return (*BlockInfo)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_BlockInfo) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.TotalReporterPower != "" {
		value := protoreflect.ValueOfString(x.TotalReporterPower)
		if !f(fd_BlockInfo_total_reporter_power, value) {
			return
		}
	}
	if x.TotalUserTips != "" {
		value := protoreflect.ValueOfString(x.TotalUserTips)
		if !f(fd_BlockInfo_total_user_tips, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_BlockInfo) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "layer.dispute.BlockInfo.total_reporter_power":
		return x.TotalReporterPower != ""
	case "layer.dispute.BlockInfo.total_user_tips":
		return x.TotalUserTips != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: layer.dispute.BlockInfo"))
		}
		panic(fmt.Errorf("message layer.dispute.BlockInfo does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BlockInfo) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "layer.dispute.BlockInfo.total_reporter_power":
		x.TotalReporterPower = ""
	case "layer.dispute.BlockInfo.total_user_tips":
		x.TotalUserTips = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: layer.dispute.BlockInfo"))
		}
		panic(fmt.Errorf("message layer.dispute.BlockInfo does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_BlockInfo) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "layer.dispute.BlockInfo.total_reporter_power":
		value := x.TotalReporterPower
		return protoreflect.ValueOfString(value)
	case "layer.dispute.BlockInfo.total_user_tips":
		value := x.TotalUserTips
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: layer.dispute.BlockInfo"))
		}
		panic(fmt.Errorf("message layer.dispute.BlockInfo does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BlockInfo) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "layer.dispute.BlockInfo.total_reporter_power":
		x.TotalReporterPower = value.Interface().(string)
	case "layer.dispute.BlockInfo.total_user_tips":
		x.TotalUserTips = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: layer.dispute.BlockInfo"))
		}
		panic(fmt.Errorf("message layer.dispute.BlockInfo does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BlockInfo) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "layer.dispute.BlockInfo.total_reporter_power":
		panic(fmt.Errorf("field total_reporter_power of message layer.dispute.BlockInfo is not mutable"))
	case "layer.dispute.BlockInfo.total_user_tips":
		panic(fmt.Errorf("field total_user_tips of message layer.dispute.BlockInfo is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: layer.dispute.BlockInfo"))
		}
		panic(fmt.Errorf("message layer.dispute.BlockInfo does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_BlockInfo) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "layer.dispute.BlockInfo.total_reporter_power":
		return protoreflect.ValueOfString("")
	case "layer.dispute.BlockInfo.total_user_tips":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: layer.dispute.BlockInfo"))
		}
		panic(fmt.Errorf("message layer.dispute.BlockInfo does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_BlockInfo) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in layer.dispute.BlockInfo", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_BlockInfo) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BlockInfo) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_BlockInfo) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_BlockInfo) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*BlockInfo)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.TotalReporterPower)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TotalUserTips)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*BlockInfo)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.TotalUserTips) > 0 {
			i -= len(x.TotalUserTips)
			copy(dAtA[i:], x.TotalUserTips)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TotalUserTips)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.TotalReporterPower) > 0 {
			i -= len(x.TotalReporterPower)
			copy(dAtA[i:], x.TotalReporterPower)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TotalReporterPower)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*BlockInfo)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: BlockInfo: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: BlockInfo: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalReporterPower", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TotalReporterPower = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalUserTips", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TotalUserTips = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: layer/dispute/dispute.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// DisputeCategory defines the severity of a dispute.
type DisputeCategory int32

const (
	// UNSPECIFIED defines an invalid dispute category.
	DisputeCategory_DISPUTE_CATEGORY_UNSPECIFIED DisputeCategory = 0
	// WARNING defines a 1 percent slashing.
	DisputeCategory_DISPUTE_CATEGORY_WARNING DisputeCategory = 1
	// MINOR defines a 5 percent slashing.
	DisputeCategory_DISPUTE_CATEGORY_MINOR DisputeCategory = 2
	// MAJOR defines a 100 percent slashing.
	DisputeCategory_DISPUTE_CATEGORY_MAJOR DisputeCategory = 3
)

// Enum value maps for DisputeCategory.
var (
	DisputeCategory_name = map[int32]string{
		0: "DISPUTE_CATEGORY_UNSPECIFIED",
		1: "DISPUTE_CATEGORY_WARNING",
		2: "DISPUTE_CATEGORY_MINOR",
		3: "DISPUTE_CATEGORY_MAJOR",
	}
	DisputeCategory_value = map[string]int32{
		"DISPUTE_CATEGORY_UNSPECIFIED": 0,
		"DISPUTE_CATEGORY_WARNING":     1,
		"DISPUTE_CATEGORY_MINOR":       2,
		"DISPUTE_CATEGORY_MAJOR":       3,
	}
)

func (x DisputeCategory) Enum() *DisputeCategory {
	p := new(DisputeCategory)
	*p = x
	return p
}

func (x DisputeCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DisputeCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_layer_dispute_dispute_proto_enumTypes[0].Descriptor()
}

func (DisputeCategory) Type() protoreflect.EnumType {
	return &file_layer_dispute_dispute_proto_enumTypes[0]
}

func (x DisputeCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DisputeCategory.Descriptor instead.
func (DisputeCategory) EnumDescriptor() ([]byte, []int) {
	return file_layer_dispute_dispute_proto_rawDescGZIP(), []int{0}
}

// DisputeStatus defines the status of a dispute.
type DisputeStatus int32

const (
	// PREVOTE defines a dispute that hasn't started voting (ie in funding).
	DisputeStatus_DISPUTE_STATUS_PREVOTE DisputeStatus = 0
	// VOTING defines a dispute that has been funded and is in voting.
	DisputeStatus_DISPUTE_STATUS_VOTING DisputeStatus = 1
	// RESOLVED defines a dispute where dispute period has ended
	DisputeStatus_DISPUTE_STATUS_RESOLVED DisputeStatus = 2
	// UNRESOLVED defines a dispute where dispute period has not ended but voting period has.
	DisputeStatus_DISPUTE_STATUS_UNRESOLVED DisputeStatus = 3
	// FAILED defines a dispute that failed to pay the dispute fee to start vote.
	DisputeStatus_DISPUTE_STATUS_FAILED DisputeStatus = 4
)

// Enum value maps for DisputeStatus.
var (
	DisputeStatus_name = map[int32]string{
		0: "DISPUTE_STATUS_PREVOTE",
		1: "DISPUTE_STATUS_VOTING",
		2: "DISPUTE_STATUS_RESOLVED",
		3: "DISPUTE_STATUS_UNRESOLVED",
		4: "DISPUTE_STATUS_FAILED",
	}
	DisputeStatus_value = map[string]int32{
		"DISPUTE_STATUS_PREVOTE":    0,
		"DISPUTE_STATUS_VOTING":     1,
		"DISPUTE_STATUS_RESOLVED":   2,
		"DISPUTE_STATUS_UNRESOLVED": 3,
		"DISPUTE_STATUS_FAILED":     4,
	}
)

func (x DisputeStatus) Enum() *DisputeStatus {
	p := new(DisputeStatus)
	*p = x
	return p
}

func (x DisputeStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DisputeStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_layer_dispute_dispute_proto_enumTypes[1].Descriptor()
}

func (DisputeStatus) Type() protoreflect.EnumType {
	return &file_layer_dispute_dispute_proto_enumTypes[1]
}

func (x DisputeStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DisputeStatus.Descriptor instead.
func (DisputeStatus) EnumDescriptor() ([]byte, []int) {
	return file_layer_dispute_dispute_proto_rawDescGZIP(), []int{1}
}

// Dispute defines a dispute.
type Dispute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique dispute hash identifier
	HashId []byte `protobuf:"bytes,1,opt,name=hash_id,json=hashId,proto3" json:"hash_id,omitempty"`
	// current dispute id
	DisputeId uint64 `protobuf:"varint,2,opt,name=dispute_id,json=disputeId,proto3" json:"dispute_id,omitempty"`
	// dispute severity level
	DisputeCategory DisputeCategory `protobuf:"varint,3,opt,name=dispute_category,json=disputeCategory,proto3,enum=layer.dispute.DisputeCategory" json:"dispute_category,omitempty"`
	// cost to start dispute
	DisputeFee string `protobuf:"bytes,4,opt,name=dispute_fee,json=disputeFee,proto3" json:"dispute_fee,omitempty"`
	// current dispute status
	DisputeStatus DisputeStatus `protobuf:"varint,5,opt,name=dispute_status,json=disputeStatus,proto3,enum=layer.dispute.DisputeStatus" json:"dispute_status,omitempty"`
	// start time of the dispute that begins after dispute fee is fully paid
	DisputeStartTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=dispute_start_time,json=disputeStartTime,proto3" json:"dispute_start_time,omitempty"`
	// end time that the dispute stop taking votes and creating new rounds
	DisputeEndTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=dispute_end_time,json=disputeEndTime,proto3" json:"dispute_end_time,omitempty"`
	// height of the block that started the dispute
	DisputeStartBlock uint64 `protobuf:"varint,8,opt,name=dispute_start_block,json=disputeStartBlock,proto3" json:"dispute_start_block,omitempty"`
	// current dispute round
	DisputeRound uint64 `protobuf:"varint,9,opt,name=dispute_round,json=disputeRound,proto3" json:"dispute_round,omitempty"`
	// reporter's slashed amount
	SlashAmount string `protobuf:"bytes,10,opt,name=slash_amount,json=slashAmount,proto3" json:"slash_amount,omitempty"`
	// burn amount that will be divided in half and paid to voters and the other half burned
	BurnAmount string `protobuf:"bytes,11,opt,name=burn_amount,json=burnAmount,proto3" json:"burn_amount,omitempty"`
	// initial single report evidence to be disputed
	InitialEvidence *oracle.MicroReport `protobuf:"bytes,12,opt,name=initial_evidence,json=initialEvidence,proto3" json:"initial_evidence,omitempty"`
	// fee payers that were involved in paying the dispute fee in order to start the dispute
	// total fee paid tracked to know if dispute fee is fully paid to start dispute
	FeeTotal string `protobuf:"bytes,13,opt,name=fee_total,json=feeTotal,proto3" json:"fee_total,omitempty"`
	// list of dispute ids that preceded before this current round began
	PrevDisputeIds []uint64 `protobuf:"varint,14,rep,packed,name=prev_dispute_ids,json=prevDisputeIds,proto3" json:"prev_dispute_ids,omitempty"`
	// block number when this specific dispute was created
	BlockNumber        uint64                `protobuf:"varint,15,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	Open               bool                  `protobuf:"varint,16,opt,name=open,proto3" json:"open,omitempty"`
	AdditionalEvidence []*oracle.MicroReport `protobuf:"bytes,17,rep,name=additional_evidence,json=additionalEvidence,proto3" json:"additional_evidence,omitempty"`
	// total tokens allocated to voters
	VoterReward string `protobuf:"bytes,18,opt,name=voter_reward,json=voterReward,proto3" json:"voter_reward,omitempty"`
	// pending execution is true if the dispute has reached quorum and is pending execution.
	// however, if a new dispute round begins, this is set to false again
	PendingExecution bool `protobuf:"varint,19,opt,name=pending_execution,json=pendingExecution,proto3" json:"pending_execution,omitempty"`
}

func (x *Dispute) Reset() {
	*x = Dispute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_layer_dispute_dispute_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dispute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dispute) ProtoMessage() {}

// Deprecated: Use Dispute.ProtoReflect.Descriptor instead.
func (*Dispute) Descriptor() ([]byte, []int) {
	return file_layer_dispute_dispute_proto_rawDescGZIP(), []int{0}
}

func (x *Dispute) GetHashId() []byte {
	if x != nil {
		return x.HashId
	}
	return nil
}

func (x *Dispute) GetDisputeId() uint64 {
	if x != nil {
		return x.DisputeId
	}
	return 0
}

func (x *Dispute) GetDisputeCategory() DisputeCategory {
	if x != nil {
		return x.DisputeCategory
	}
	return DisputeCategory_DISPUTE_CATEGORY_UNSPECIFIED
}

func (x *Dispute) GetDisputeFee() string {
	if x != nil {
		return x.DisputeFee
	}
	return ""
}

func (x *Dispute) GetDisputeStatus() DisputeStatus {
	if x != nil {
		return x.DisputeStatus
	}
	return DisputeStatus_DISPUTE_STATUS_PREVOTE
}

func (x *Dispute) GetDisputeStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DisputeStartTime
	}
	return nil
}

func (x *Dispute) GetDisputeEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DisputeEndTime
	}
	return nil
}

func (x *Dispute) GetDisputeStartBlock() uint64 {
	if x != nil {
		return x.DisputeStartBlock
	}
	return 0
}

func (x *Dispute) GetDisputeRound() uint64 {
	if x != nil {
		return x.DisputeRound
	}
	return 0
}

func (x *Dispute) GetSlashAmount() string {
	if x != nil {
		return x.SlashAmount
	}
	return ""
}

func (x *Dispute) GetBurnAmount() string {
	if x != nil {
		return x.BurnAmount
	}
	return ""
}

func (x *Dispute) GetInitialEvidence() *oracle.MicroReport {
	if x != nil {
		return x.InitialEvidence
	}
	return nil
}

func (x *Dispute) GetFeeTotal() string {
	if x != nil {
		return x.FeeTotal
	}
	return ""
}

func (x *Dispute) GetPrevDisputeIds() []uint64 {
	if x != nil {
		return x.PrevDisputeIds
	}
	return nil
}

func (x *Dispute) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *Dispute) GetOpen() bool {
	if x != nil {
		return x.Open
	}
	return false
}

func (x *Dispute) GetAdditionalEvidence() []*oracle.MicroReport {
	if x != nil {
		return x.AdditionalEvidence
	}
	return nil
}

func (x *Dispute) GetVoterReward() string {
	if x != nil {
		return x.VoterReward
	}
	return ""
}

func (x *Dispute) GetPendingExecution() bool {
	if x != nil {
		return x.PendingExecution
	}
	return false
}

// PayerInfo defines the payer info of a dispute
// fee payer's info that was involved in paying the dispute fee in order to start the dispute
type PayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// amount paid
	Amount string `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// source of funds either from bond or free floating funds
	FromBond bool `protobuf:"varint,2,opt,name=from_bond,json=fromBond,proto3" json:"from_bond,omitempty"`
}

func (x *PayerInfo) Reset() {
	*x = PayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_layer_dispute_dispute_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayerInfo) ProtoMessage() {}

// Deprecated: Use PayerInfo.ProtoReflect.Descriptor instead.
func (*PayerInfo) Descriptor() ([]byte, []int) {
	return file_layer_dispute_dispute_proto_rawDescGZIP(), []int{1}
}

func (x *PayerInfo) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *PayerInfo) GetFromBond() bool {
	if x != nil {
		return x.FromBond
	}
	return false
}

type BlockInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// total reporter power at block
	TotalReporterPower string `protobuf:"bytes,1,opt,name=total_reporter_power,json=totalReporterPower,proto3" json:"total_reporter_power,omitempty"`
	// total user tips at block
	TotalUserTips string `protobuf:"bytes,2,opt,name=total_user_tips,json=totalUserTips,proto3" json:"total_user_tips,omitempty"`
}

func (x *BlockInfo) Reset() {
	*x = BlockInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_layer_dispute_dispute_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockInfo) ProtoMessage() {}

// Deprecated: Use BlockInfo.ProtoReflect.Descriptor instead.
func (*BlockInfo) Descriptor() ([]byte, []int) {
	return file_layer_dispute_dispute_proto_rawDescGZIP(), []int{2}
}

func (x *BlockInfo) GetTotalReporterPower() string {
	if x != nil {
		return x.TotalReporterPower
	}
	return ""
}

func (x *BlockInfo) GetTotalUserTips() string {
	if x != nil {
		return x.TotalUserTips
	}
	return ""
}

var File_layer_dispute_dispute_proto protoreflect.FileDescriptor

var file_layer_dispute_dispute_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2f, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x2f,
	0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x1a, 0x1e, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2f, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xf6, 0x08, 0x0a, 0x07, 0x44, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x68,
	0x61, 0x73, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x68, 0x61,
	0x73, 0x68, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74,
	0x65, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x44, 0x69,
	0x73, 0x70, 0x75, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0f, 0x64,
	0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x4c,
	0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2b, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49,
	0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x52, 0x0a, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x46, 0x65, 0x65, 0x12, 0x43, 0x0a, 0x0e,
	0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x64, 0x69, 0x73,
	0x70, 0x75, 0x74, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x52, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xc8, 0xde, 0x1f, 0x00, 0x90,
	0xdf, 0x1f, 0x01, 0x52, 0x10, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65,
	0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xc8, 0xde, 0x1f,
	0x00, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x45, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x11, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65,
	0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x64, 0x69,
	0x73, 0x70, 0x75, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x4e, 0x0a, 0x0c, 0x73, 0x6c,
	0x61, 0x73, 0x68, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2b, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2,
	0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x0b, 0x73,
	0x6c, 0x61, 0x73, 0x68, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x0b, 0x62, 0x75,
	0x72, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2b, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73,
	0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4,
	0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x0a, 0x62, 0x75,
	0x72, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x10, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x5f, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c,
	0x65, 0x2e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x04, 0xc8,
	0xde, 0x1f, 0x00, 0x52, 0x0f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x76, 0x69, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x09, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f,
	0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61,
	0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x52, 0x08, 0x66, 0x65, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x28,
	0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x44, 0x69,
	0x73, 0x70, 0x75, 0x74, 0x65, 0x49, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6f,
	0x70, 0x65, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12,
	0x4a, 0x0a, 0x13, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x76,
	0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x4d, 0x69, 0x63, 0x72,
	0x6f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x12, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x0c, 0x76,
	0x6f, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2b, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74,
	0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x0b,
	0x76, 0x6f, 0x74, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x70,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6d, 0x0a, 0x09, 0x50, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x43, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68,
	0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x62, 0x6f, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66,
	0x72, 0x6f, 0x6d, 0x42, 0x6f, 0x6e, 0x64, 0x22, 0xbf, 0x01, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5d, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2b, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49,
	0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x12, 0x53, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xc8,
	0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b,
	0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x54, 0x69, 0x70, 0x73, 0x2a, 0xc3, 0x01, 0x0a, 0x0f, 0x44, 0x69,
	0x73, 0x70, 0x75, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x31, 0x0a,
	0x1c, 0x44, 0x49, 0x53, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x1a,
	0x0f, 0x8a, 0x9d, 0x20, 0x0b, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x12, 0x29, 0x0a, 0x18, 0x44, 0x49, 0x53, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45,
	0x47, 0x4f, 0x52, 0x59, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x1a, 0x0b,
	0x8a, 0x9d, 0x20, 0x07, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x16, 0x44,
	0x49, 0x53, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x4d, 0x49, 0x4e, 0x4f, 0x52, 0x10, 0x02, 0x1a, 0x09, 0x8a, 0x9d, 0x20, 0x05, 0x4d, 0x69, 0x6e,
	0x6f, 0x72, 0x12, 0x25, 0x0a, 0x16, 0x44, 0x49, 0x53, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x4d, 0x41, 0x4a, 0x4f, 0x52, 0x10, 0x03, 0x1a, 0x09,
	0x8a, 0x9d, 0x20, 0x05, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x1a, 0x04, 0x88, 0xa3, 0x1e, 0x00, 0x2a,
	0xe6, 0x01, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x27, 0x0a, 0x16, 0x44, 0x49, 0x53, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x50, 0x52, 0x45, 0x56, 0x4f, 0x54, 0x45, 0x10, 0x00, 0x1a, 0x0b, 0x8a,
	0x9d, 0x20, 0x07, 0x50, 0x72, 0x65, 0x76, 0x6f, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x15, 0x44, 0x49,
	0x53, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x56, 0x4f, 0x54,
	0x49, 0x4e, 0x47, 0x10, 0x01, 0x1a, 0x0a, 0x8a, 0x9d, 0x20, 0x06, 0x56, 0x6f, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x29, 0x0a, 0x17, 0x44, 0x49, 0x53, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x44, 0x10, 0x02, 0x1a, 0x0c,
	0x8a, 0x9d, 0x20, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x19,
	0x44, 0x49, 0x53, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x4e, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x44, 0x10, 0x03, 0x1a, 0x0e, 0x8a, 0x9d, 0x20,
	0x0a, 0x55, 0x6e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x15, 0x44,
	0x49, 0x53, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x1a, 0x0a, 0x8a, 0x9d, 0x20, 0x06, 0x46, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x1a, 0x04, 0x88, 0xa3, 0x1e, 0x00, 0x42, 0xa4, 0x01, 0x0a, 0x11, 0x63, 0x6f, 0x6d,
	0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x42, 0x0c,
	0x44, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2c,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x65, 0x6c, 0x6c, 0x6f,
	0x72, 0x2d, 0x69, 0x6f, 0x2f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2f, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0xa2, 0x02, 0x03, 0x4c,
	0x44, 0x58, 0xaa, 0x02, 0x0d, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x75,
	0x74, 0x65, 0xca, 0x02, 0x0d, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x5c, 0x44, 0x69, 0x73, 0x70, 0x75,
	0x74, 0x65, 0xe2, 0x02, 0x19, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x5c, 0x44, 0x69, 0x73, 0x70, 0x75,
	0x74, 0x65, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x0e, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x3a, 0x3a, 0x44, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_layer_dispute_dispute_proto_rawDescOnce sync.Once
	file_layer_dispute_dispute_proto_rawDescData = file_layer_dispute_dispute_proto_rawDesc
)

func file_layer_dispute_dispute_proto_rawDescGZIP() []byte {
	file_layer_dispute_dispute_proto_rawDescOnce.Do(func() {
		file_layer_dispute_dispute_proto_rawDescData = protoimpl.X.CompressGZIP(file_layer_dispute_dispute_proto_rawDescData)
	})
	return file_layer_dispute_dispute_proto_rawDescData
}

var file_layer_dispute_dispute_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_layer_dispute_dispute_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_layer_dispute_dispute_proto_goTypes = []interface{}{
	(DisputeCategory)(0),          // 0: layer.dispute.DisputeCategory
	(DisputeStatus)(0),            // 1: layer.dispute.DisputeStatus
	(*Dispute)(nil),               // 2: layer.dispute.Dispute
	(*PayerInfo)(nil),             // 3: layer.dispute.PayerInfo
	(*BlockInfo)(nil),             // 4: layer.dispute.BlockInfo
	(*timestamppb.Timestamp)(nil), // 5: google.protobuf.Timestamp
	(*oracle.MicroReport)(nil),    // 6: layer.oracle.MicroReport
}
var file_layer_dispute_dispute_proto_depIdxs = []int32{
	0, // 0: layer.dispute.Dispute.dispute_category:type_name -> layer.dispute.DisputeCategory
	1, // 1: layer.dispute.Dispute.dispute_status:type_name -> layer.dispute.DisputeStatus
	5, // 2: layer.dispute.Dispute.dispute_start_time:type_name -> google.protobuf.Timestamp
	5, // 3: layer.dispute.Dispute.dispute_end_time:type_name -> google.protobuf.Timestamp
	6, // 4: layer.dispute.Dispute.initial_evidence:type_name -> layer.oracle.MicroReport
	6, // 5: layer.dispute.Dispute.additional_evidence:type_name -> layer.oracle.MicroReport
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_layer_dispute_dispute_proto_init() }
func file_layer_dispute_dispute_proto_init() {
	if File_layer_dispute_dispute_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_layer_dispute_dispute_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dispute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_layer_dispute_dispute_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_layer_dispute_dispute_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_layer_dispute_dispute_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_layer_dispute_dispute_proto_goTypes,
		DependencyIndexes: file_layer_dispute_dispute_proto_depIdxs,
		EnumInfos:         file_layer_dispute_dispute_proto_enumTypes,
		MessageInfos:      file_layer_dispute_dispute_proto_msgTypes,
	}.Build()
	File_layer_dispute_dispute_proto = out.File
	file_layer_dispute_dispute_proto_rawDesc = nil
	file_layer_dispute_dispute_proto_goTypes = nil
	file_layer_dispute_dispute_proto_depIdxs = nil
}
