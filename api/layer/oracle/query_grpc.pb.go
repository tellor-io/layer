// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: layer/oracle/query.proto

package oracle

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Query_Params_FullMethodName                       = "/layer.oracle.Query/Params"
	Query_GetReportsbyQid_FullMethodName              = "/layer.oracle.Query/GetReportsbyQid"
	Query_GetReportsbyReporter_FullMethodName         = "/layer.oracle.Query/GetReportsbyReporter"
	Query_GetReportsbyReporterQid_FullMethodName      = "/layer.oracle.Query/GetReportsbyReporterQid"
	Query_GetCurrentTip_FullMethodName                = "/layer.oracle.Query/GetCurrentTip"
	Query_GetUserTipTotal_FullMethodName              = "/layer.oracle.Query/GetUserTipTotal"
	Query_GetDataBefore_FullMethodName                = "/layer.oracle.Query/GetDataBefore"
	Query_GetDataAfter_FullMethodName                 = "/layer.oracle.Query/GetDataAfter"
	Query_GetTimeBasedRewards_FullMethodName          = "/layer.oracle.Query/GetTimeBasedRewards"
	Query_CurrentCyclelistQuery_FullMethodName        = "/layer.oracle.Query/CurrentCyclelistQuery"
	Query_NextCyclelistQuery_FullMethodName           = "/layer.oracle.Query/NextCyclelistQuery"
	Query_RetrieveData_FullMethodName                 = "/layer.oracle.Query/RetrieveData"
	Query_GetCurrentAggregateReport_FullMethodName    = "/layer.oracle.Query/GetCurrentAggregateReport"
	Query_GetAggregateBeforeByReporter_FullMethodName = "/layer.oracle.Query/GetAggregateBeforeByReporter"
	Query_GetQuery_FullMethodName                     = "/layer.oracle.Query/GetQuery"
	Query_TippedQueriesForDaemon_FullMethodName       = "/layer.oracle.Query/TippedQueriesForDaemon"
	Query_GetReportsByAggregate_FullMethodName        = "/layer.oracle.Query/GetReportsByAggregate"
	Query_GetCurrentQueryByQueryId_FullMethodName     = "/layer.oracle.Query/GetCurrentQueryByQueryId"
	Query_GetQueryDataLimit_FullMethodName            = "/layer.oracle.Query/GetQueryDataLimit"
	Query_ReportedIdsByReporter_FullMethodName        = "/layer.oracle.Query/ReportedIdsByReporter"
	Query_GetCycleList_FullMethodName                 = "/layer.oracle.Query/GetCycleList"
	Query_GetTimestampBefore_FullMethodName           = "/layer.oracle.Query/GetTimestampBefore"
	Query_GetTimestampAfter_FullMethodName            = "/layer.oracle.Query/GetTimestampAfter"
	Query_GetTippedQueries_FullMethodName             = "/layer.oracle.Query/GetTippedQueries"
	Query_GetReportersNoStakeReports_FullMethodName   = "/layer.oracle.Query/GetReportersNoStakeReports"
	Query_GetNoStakeReportsByQueryId_FullMethodName   = "/layer.oracle.Query/GetNoStakeReportsByQueryId"
	Query_GetTipTotal_FullMethodName                  = "/layer.oracle.Query/GetTipTotal"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Query defines the gRPC querier service.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of GetReportsbyQid items.
	GetReportsbyQid(ctx context.Context, in *QueryGetReportsbyQidRequest, opts ...grpc.CallOption) (*QueryMicroReportsResponse, error)
	// Queries a list of GetReportsbyReporter items.
	GetReportsbyReporter(ctx context.Context, in *QueryGetReportsbyReporterRequest, opts ...grpc.CallOption) (*QueryMicroReportsResponse, error)
	// Queries a list of GetReportsbyReporterQid items.
	GetReportsbyReporterQid(ctx context.Context, in *QueryGetReportsbyReporterQidRequest, opts ...grpc.CallOption) (*QueryMicroReportsResponse, error)
	// Queries a list of GetCurrentTip items.
	GetCurrentTip(ctx context.Context, in *QueryGetCurrentTipRequest, opts ...grpc.CallOption) (*QueryGetCurrentTipResponse, error)
	// Queries a list of GetUserTipTotal items.
	GetUserTipTotal(ctx context.Context, in *QueryGetUserTipTotalRequest, opts ...grpc.CallOption) (*QueryGetUserTipTotalResponse, error)
	// Queries a list of GetAggregatedReport items before a timestamp.
	GetDataBefore(ctx context.Context, in *QueryGetDataBeforeRequest, opts ...grpc.CallOption) (*QueryGetDataBeforeResponse, error)
	// Queries a list of GetAggregatedReport items after a timestamp.
	GetDataAfter(ctx context.Context, in *QueryGetDataAfterRequest, opts ...grpc.CallOption) (*QueryGetDataAfterResponse, error)
	// Queries a list of GetTimeBasedRewards items.
	GetTimeBasedRewards(ctx context.Context, in *QueryGetTimeBasedRewardsRequest, opts ...grpc.CallOption) (*QueryGetTimeBasedRewardsResponse, error)
	// Queries a list of CurrentCyclelistQuery items.
	CurrentCyclelistQuery(ctx context.Context, in *QueryCurrentCyclelistQueryRequest, opts ...grpc.CallOption) (*QueryCurrentCyclelistQueryResponse, error)
	// Queries a list of NextCyclelistQuery items.
	NextCyclelistQuery(ctx context.Context, in *QueryNextCyclelistQueryRequest, opts ...grpc.CallOption) (*QueryNextCyclelistQueryResponse, error)
	// Queries an aggregate report by query id and timestamp
	RetrieveData(ctx context.Context, in *QueryRetrieveDataRequest, opts ...grpc.CallOption) (*QueryRetrieveDataResponse, error)
	// Queries the current aggregate report by query id
	GetCurrentAggregateReport(ctx context.Context, in *QueryGetCurrentAggregateReportRequest, opts ...grpc.CallOption) (*QueryGetCurrentAggregateReportResponse, error)
	// Queries an aggregate report before a timestamp by query id, and reporter
	GetAggregateBeforeByReporter(ctx context.Context, in *QueryGetAggregateBeforeByReporterRequest, opts ...grpc.CallOption) (*QueryGetAggregateBeforeByReporterResponse, error)
	// Queries a query by query id and id
	GetQuery(ctx context.Context, in *QueryGetQueryRequest, opts ...grpc.CallOption) (*QueryGetQueryResponse, error)
	// Queries a list of tipped non-expired queries
	TippedQueriesForDaemon(ctx context.Context, in *QueryTippedQueriesForDaemonRequest, opts ...grpc.CallOption) (*QueryTippedQueriesForDaemonResponse, error)
	// Queries reports by aggregate by query id and timestamp
	GetReportsByAggregate(ctx context.Context, in *QueryGetReportsByAggregateRequest, opts ...grpc.CallOption) (*QueryGetReportsByAggregateResponse, error)
	// Queries the current query by query id
	GetCurrentQueryByQueryId(ctx context.Context, in *QueryGetCurrentQueryByQueryIdRequest, opts ...grpc.CallOption) (*QueryGetCurrentQueryByQueryIdResponse, error)
	// Queries the query data limit
	GetQueryDataLimit(ctx context.Context, in *QueryGetQueryDataLimitRequest, opts ...grpc.CallOption) (*QueryGetQueryDataLimitResponse, error)
	// Queries reported ids by reporter
	ReportedIdsByReporter(ctx context.Context, in *QueryReportedIdsByReporterRequest, opts ...grpc.CallOption) (*QueryReportedIdsByReporterResponse, error)
	// Queries the cycle list
	GetCycleList(ctx context.Context, in *QueryGetCycleListRequest, opts ...grpc.CallOption) (*QueryGetCycleListResponse, error)
	// Queries the timestamp before a query id and timestamp
	GetTimestampBefore(ctx context.Context, in *QueryGetTimestampBeforeRequest, opts ...grpc.CallOption) (*QueryGetTimestampBeforeResponse, error)
	// Queries the timestamp after a query id and timestamp
	GetTimestampAfter(ctx context.Context, in *QueryGetTimestampAfterRequest, opts ...grpc.CallOption) (*QueryGetTimestampAfterResponse, error)
	// Queries a readable list of tipped queries
	GetTippedQueries(ctx context.Context, in *QueryGetTippedQueriesRequest, opts ...grpc.CallOption) (*QueryGetTippedQueriesResponse, error)
	// Queries a list of no stake reports by reporter
	GetReportersNoStakeReports(ctx context.Context, in *QueryGetReportersNoStakeReportsRequest, opts ...grpc.CallOption) (*QueryGetReportersNoStakeReportsResponse, error)
	// Queries a list of no stake reports by query id
	GetNoStakeReportsByQueryId(ctx context.Context, in *QueryGetNoStakeReportsByQueryIdRequest, opts ...grpc.CallOption) (*QueryGetNoStakeReportsByQueryIdResponse, error)
	// Queries the total tips
	GetTipTotal(ctx context.Context, in *QueryGetTipTotalRequest, opts ...grpc.CallOption) (*QueryGetTipTotalResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetReportsbyQid(ctx context.Context, in *QueryGetReportsbyQidRequest, opts ...grpc.CallOption) (*QueryMicroReportsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryMicroReportsResponse)
	err := c.cc.Invoke(ctx, Query_GetReportsbyQid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetReportsbyReporter(ctx context.Context, in *QueryGetReportsbyReporterRequest, opts ...grpc.CallOption) (*QueryMicroReportsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryMicroReportsResponse)
	err := c.cc.Invoke(ctx, Query_GetReportsbyReporter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetReportsbyReporterQid(ctx context.Context, in *QueryGetReportsbyReporterQidRequest, opts ...grpc.CallOption) (*QueryMicroReportsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryMicroReportsResponse)
	err := c.cc.Invoke(ctx, Query_GetReportsbyReporterQid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetCurrentTip(ctx context.Context, in *QueryGetCurrentTipRequest, opts ...grpc.CallOption) (*QueryGetCurrentTipResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryGetCurrentTipResponse)
	err := c.cc.Invoke(ctx, Query_GetCurrentTip_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetUserTipTotal(ctx context.Context, in *QueryGetUserTipTotalRequest, opts ...grpc.CallOption) (*QueryGetUserTipTotalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryGetUserTipTotalResponse)
	err := c.cc.Invoke(ctx, Query_GetUserTipTotal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetDataBefore(ctx context.Context, in *QueryGetDataBeforeRequest, opts ...grpc.CallOption) (*QueryGetDataBeforeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryGetDataBeforeResponse)
	err := c.cc.Invoke(ctx, Query_GetDataBefore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetDataAfter(ctx context.Context, in *QueryGetDataAfterRequest, opts ...grpc.CallOption) (*QueryGetDataAfterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryGetDataAfterResponse)
	err := c.cc.Invoke(ctx, Query_GetDataAfter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTimeBasedRewards(ctx context.Context, in *QueryGetTimeBasedRewardsRequest, opts ...grpc.CallOption) (*QueryGetTimeBasedRewardsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryGetTimeBasedRewardsResponse)
	err := c.cc.Invoke(ctx, Query_GetTimeBasedRewards_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CurrentCyclelistQuery(ctx context.Context, in *QueryCurrentCyclelistQueryRequest, opts ...grpc.CallOption) (*QueryCurrentCyclelistQueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryCurrentCyclelistQueryResponse)
	err := c.cc.Invoke(ctx, Query_CurrentCyclelistQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NextCyclelistQuery(ctx context.Context, in *QueryNextCyclelistQueryRequest, opts ...grpc.CallOption) (*QueryNextCyclelistQueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryNextCyclelistQueryResponse)
	err := c.cc.Invoke(ctx, Query_NextCyclelistQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RetrieveData(ctx context.Context, in *QueryRetrieveDataRequest, opts ...grpc.CallOption) (*QueryRetrieveDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryRetrieveDataResponse)
	err := c.cc.Invoke(ctx, Query_RetrieveData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetCurrentAggregateReport(ctx context.Context, in *QueryGetCurrentAggregateReportRequest, opts ...grpc.CallOption) (*QueryGetCurrentAggregateReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryGetCurrentAggregateReportResponse)
	err := c.cc.Invoke(ctx, Query_GetCurrentAggregateReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAggregateBeforeByReporter(ctx context.Context, in *QueryGetAggregateBeforeByReporterRequest, opts ...grpc.CallOption) (*QueryGetAggregateBeforeByReporterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryGetAggregateBeforeByReporterResponse)
	err := c.cc.Invoke(ctx, Query_GetAggregateBeforeByReporter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetQuery(ctx context.Context, in *QueryGetQueryRequest, opts ...grpc.CallOption) (*QueryGetQueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryGetQueryResponse)
	err := c.cc.Invoke(ctx, Query_GetQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TippedQueriesForDaemon(ctx context.Context, in *QueryTippedQueriesForDaemonRequest, opts ...grpc.CallOption) (*QueryTippedQueriesForDaemonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryTippedQueriesForDaemonResponse)
	err := c.cc.Invoke(ctx, Query_TippedQueriesForDaemon_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetReportsByAggregate(ctx context.Context, in *QueryGetReportsByAggregateRequest, opts ...grpc.CallOption) (*QueryGetReportsByAggregateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryGetReportsByAggregateResponse)
	err := c.cc.Invoke(ctx, Query_GetReportsByAggregate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetCurrentQueryByQueryId(ctx context.Context, in *QueryGetCurrentQueryByQueryIdRequest, opts ...grpc.CallOption) (*QueryGetCurrentQueryByQueryIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryGetCurrentQueryByQueryIdResponse)
	err := c.cc.Invoke(ctx, Query_GetCurrentQueryByQueryId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetQueryDataLimit(ctx context.Context, in *QueryGetQueryDataLimitRequest, opts ...grpc.CallOption) (*QueryGetQueryDataLimitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryGetQueryDataLimitResponse)
	err := c.cc.Invoke(ctx, Query_GetQueryDataLimit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ReportedIdsByReporter(ctx context.Context, in *QueryReportedIdsByReporterRequest, opts ...grpc.CallOption) (*QueryReportedIdsByReporterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryReportedIdsByReporterResponse)
	err := c.cc.Invoke(ctx, Query_ReportedIdsByReporter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetCycleList(ctx context.Context, in *QueryGetCycleListRequest, opts ...grpc.CallOption) (*QueryGetCycleListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryGetCycleListResponse)
	err := c.cc.Invoke(ctx, Query_GetCycleList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTimestampBefore(ctx context.Context, in *QueryGetTimestampBeforeRequest, opts ...grpc.CallOption) (*QueryGetTimestampBeforeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryGetTimestampBeforeResponse)
	err := c.cc.Invoke(ctx, Query_GetTimestampBefore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTimestampAfter(ctx context.Context, in *QueryGetTimestampAfterRequest, opts ...grpc.CallOption) (*QueryGetTimestampAfterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryGetTimestampAfterResponse)
	err := c.cc.Invoke(ctx, Query_GetTimestampAfter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTippedQueries(ctx context.Context, in *QueryGetTippedQueriesRequest, opts ...grpc.CallOption) (*QueryGetTippedQueriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryGetTippedQueriesResponse)
	err := c.cc.Invoke(ctx, Query_GetTippedQueries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetReportersNoStakeReports(ctx context.Context, in *QueryGetReportersNoStakeReportsRequest, opts ...grpc.CallOption) (*QueryGetReportersNoStakeReportsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryGetReportersNoStakeReportsResponse)
	err := c.cc.Invoke(ctx, Query_GetReportersNoStakeReports_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetNoStakeReportsByQueryId(ctx context.Context, in *QueryGetNoStakeReportsByQueryIdRequest, opts ...grpc.CallOption) (*QueryGetNoStakeReportsByQueryIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryGetNoStakeReportsByQueryIdResponse)
	err := c.cc.Invoke(ctx, Query_GetNoStakeReportsByQueryId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTipTotal(ctx context.Context, in *QueryGetTipTotalRequest, opts ...grpc.CallOption) (*QueryGetTipTotalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryGetTipTotalResponse)
	err := c.cc.Invoke(ctx, Query_GetTipTotal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility.
//
// Query defines the gRPC querier service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of GetReportsbyQid items.
	GetReportsbyQid(context.Context, *QueryGetReportsbyQidRequest) (*QueryMicroReportsResponse, error)
	// Queries a list of GetReportsbyReporter items.
	GetReportsbyReporter(context.Context, *QueryGetReportsbyReporterRequest) (*QueryMicroReportsResponse, error)
	// Queries a list of GetReportsbyReporterQid items.
	GetReportsbyReporterQid(context.Context, *QueryGetReportsbyReporterQidRequest) (*QueryMicroReportsResponse, error)
	// Queries a list of GetCurrentTip items.
	GetCurrentTip(context.Context, *QueryGetCurrentTipRequest) (*QueryGetCurrentTipResponse, error)
	// Queries a list of GetUserTipTotal items.
	GetUserTipTotal(context.Context, *QueryGetUserTipTotalRequest) (*QueryGetUserTipTotalResponse, error)
	// Queries a list of GetAggregatedReport items before a timestamp.
	GetDataBefore(context.Context, *QueryGetDataBeforeRequest) (*QueryGetDataBeforeResponse, error)
	// Queries a list of GetAggregatedReport items after a timestamp.
	GetDataAfter(context.Context, *QueryGetDataAfterRequest) (*QueryGetDataAfterResponse, error)
	// Queries a list of GetTimeBasedRewards items.
	GetTimeBasedRewards(context.Context, *QueryGetTimeBasedRewardsRequest) (*QueryGetTimeBasedRewardsResponse, error)
	// Queries a list of CurrentCyclelistQuery items.
	CurrentCyclelistQuery(context.Context, *QueryCurrentCyclelistQueryRequest) (*QueryCurrentCyclelistQueryResponse, error)
	// Queries a list of NextCyclelistQuery items.
	NextCyclelistQuery(context.Context, *QueryNextCyclelistQueryRequest) (*QueryNextCyclelistQueryResponse, error)
	// Queries an aggregate report by query id and timestamp
	RetrieveData(context.Context, *QueryRetrieveDataRequest) (*QueryRetrieveDataResponse, error)
	// Queries the current aggregate report by query id
	GetCurrentAggregateReport(context.Context, *QueryGetCurrentAggregateReportRequest) (*QueryGetCurrentAggregateReportResponse, error)
	// Queries an aggregate report before a timestamp by query id, and reporter
	GetAggregateBeforeByReporter(context.Context, *QueryGetAggregateBeforeByReporterRequest) (*QueryGetAggregateBeforeByReporterResponse, error)
	// Queries a query by query id and id
	GetQuery(context.Context, *QueryGetQueryRequest) (*QueryGetQueryResponse, error)
	// Queries a list of tipped non-expired queries
	TippedQueriesForDaemon(context.Context, *QueryTippedQueriesForDaemonRequest) (*QueryTippedQueriesForDaemonResponse, error)
	// Queries reports by aggregate by query id and timestamp
	GetReportsByAggregate(context.Context, *QueryGetReportsByAggregateRequest) (*QueryGetReportsByAggregateResponse, error)
	// Queries the current query by query id
	GetCurrentQueryByQueryId(context.Context, *QueryGetCurrentQueryByQueryIdRequest) (*QueryGetCurrentQueryByQueryIdResponse, error)
	// Queries the query data limit
	GetQueryDataLimit(context.Context, *QueryGetQueryDataLimitRequest) (*QueryGetQueryDataLimitResponse, error)
	// Queries reported ids by reporter
	ReportedIdsByReporter(context.Context, *QueryReportedIdsByReporterRequest) (*QueryReportedIdsByReporterResponse, error)
	// Queries the cycle list
	GetCycleList(context.Context, *QueryGetCycleListRequest) (*QueryGetCycleListResponse, error)
	// Queries the timestamp before a query id and timestamp
	GetTimestampBefore(context.Context, *QueryGetTimestampBeforeRequest) (*QueryGetTimestampBeforeResponse, error)
	// Queries the timestamp after a query id and timestamp
	GetTimestampAfter(context.Context, *QueryGetTimestampAfterRequest) (*QueryGetTimestampAfterResponse, error)
	// Queries a readable list of tipped queries
	GetTippedQueries(context.Context, *QueryGetTippedQueriesRequest) (*QueryGetTippedQueriesResponse, error)
	// Queries a list of no stake reports by reporter
	GetReportersNoStakeReports(context.Context, *QueryGetReportersNoStakeReportsRequest) (*QueryGetReportersNoStakeReportsResponse, error)
	// Queries a list of no stake reports by query id
	GetNoStakeReportsByQueryId(context.Context, *QueryGetNoStakeReportsByQueryIdRequest) (*QueryGetNoStakeReportsByQueryIdResponse, error)
	// Queries the total tips
	GetTipTotal(context.Context, *QueryGetTipTotalRequest) (*QueryGetTipTotalResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQueryServer struct{}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) GetReportsbyQid(context.Context, *QueryGetReportsbyQidRequest) (*QueryMicroReportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReportsbyQid not implemented")
}
func (UnimplementedQueryServer) GetReportsbyReporter(context.Context, *QueryGetReportsbyReporterRequest) (*QueryMicroReportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReportsbyReporter not implemented")
}
func (UnimplementedQueryServer) GetReportsbyReporterQid(context.Context, *QueryGetReportsbyReporterQidRequest) (*QueryMicroReportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReportsbyReporterQid not implemented")
}
func (UnimplementedQueryServer) GetCurrentTip(context.Context, *QueryGetCurrentTipRequest) (*QueryGetCurrentTipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentTip not implemented")
}
func (UnimplementedQueryServer) GetUserTipTotal(context.Context, *QueryGetUserTipTotalRequest) (*QueryGetUserTipTotalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserTipTotal not implemented")
}
func (UnimplementedQueryServer) GetDataBefore(context.Context, *QueryGetDataBeforeRequest) (*QueryGetDataBeforeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataBefore not implemented")
}
func (UnimplementedQueryServer) GetDataAfter(context.Context, *QueryGetDataAfterRequest) (*QueryGetDataAfterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataAfter not implemented")
}
func (UnimplementedQueryServer) GetTimeBasedRewards(context.Context, *QueryGetTimeBasedRewardsRequest) (*QueryGetTimeBasedRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimeBasedRewards not implemented")
}
func (UnimplementedQueryServer) CurrentCyclelistQuery(context.Context, *QueryCurrentCyclelistQueryRequest) (*QueryCurrentCyclelistQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentCyclelistQuery not implemented")
}
func (UnimplementedQueryServer) NextCyclelistQuery(context.Context, *QueryNextCyclelistQueryRequest) (*QueryNextCyclelistQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextCyclelistQuery not implemented")
}
func (UnimplementedQueryServer) RetrieveData(context.Context, *QueryRetrieveDataRequest) (*QueryRetrieveDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveData not implemented")
}
func (UnimplementedQueryServer) GetCurrentAggregateReport(context.Context, *QueryGetCurrentAggregateReportRequest) (*QueryGetCurrentAggregateReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentAggregateReport not implemented")
}
func (UnimplementedQueryServer) GetAggregateBeforeByReporter(context.Context, *QueryGetAggregateBeforeByReporterRequest) (*QueryGetAggregateBeforeByReporterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAggregateBeforeByReporter not implemented")
}
func (UnimplementedQueryServer) GetQuery(context.Context, *QueryGetQueryRequest) (*QueryGetQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuery not implemented")
}
func (UnimplementedQueryServer) TippedQueriesForDaemon(context.Context, *QueryTippedQueriesForDaemonRequest) (*QueryTippedQueriesForDaemonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TippedQueriesForDaemon not implemented")
}
func (UnimplementedQueryServer) GetReportsByAggregate(context.Context, *QueryGetReportsByAggregateRequest) (*QueryGetReportsByAggregateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReportsByAggregate not implemented")
}
func (UnimplementedQueryServer) GetCurrentQueryByQueryId(context.Context, *QueryGetCurrentQueryByQueryIdRequest) (*QueryGetCurrentQueryByQueryIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentQueryByQueryId not implemented")
}
func (UnimplementedQueryServer) GetQueryDataLimit(context.Context, *QueryGetQueryDataLimitRequest) (*QueryGetQueryDataLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQueryDataLimit not implemented")
}
func (UnimplementedQueryServer) ReportedIdsByReporter(context.Context, *QueryReportedIdsByReporterRequest) (*QueryReportedIdsByReporterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportedIdsByReporter not implemented")
}
func (UnimplementedQueryServer) GetCycleList(context.Context, *QueryGetCycleListRequest) (*QueryGetCycleListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCycleList not implemented")
}
func (UnimplementedQueryServer) GetTimestampBefore(context.Context, *QueryGetTimestampBeforeRequest) (*QueryGetTimestampBeforeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimestampBefore not implemented")
}
func (UnimplementedQueryServer) GetTimestampAfter(context.Context, *QueryGetTimestampAfterRequest) (*QueryGetTimestampAfterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimestampAfter not implemented")
}
func (UnimplementedQueryServer) GetTippedQueries(context.Context, *QueryGetTippedQueriesRequest) (*QueryGetTippedQueriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTippedQueries not implemented")
}
func (UnimplementedQueryServer) GetReportersNoStakeReports(context.Context, *QueryGetReportersNoStakeReportsRequest) (*QueryGetReportersNoStakeReportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReportersNoStakeReports not implemented")
}
func (UnimplementedQueryServer) GetNoStakeReportsByQueryId(context.Context, *QueryGetNoStakeReportsByQueryIdRequest) (*QueryGetNoStakeReportsByQueryIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNoStakeReportsByQueryId not implemented")
}
func (UnimplementedQueryServer) GetTipTotal(context.Context, *QueryGetTipTotalRequest) (*QueryGetTipTotalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTipTotal not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}
func (UnimplementedQueryServer) testEmbeddedByValue()               {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	// If the following call pancis, it indicates UnimplementedQueryServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetReportsbyQid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetReportsbyQidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetReportsbyQid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetReportsbyQid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetReportsbyQid(ctx, req.(*QueryGetReportsbyQidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetReportsbyReporter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetReportsbyReporterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetReportsbyReporter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetReportsbyReporter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetReportsbyReporter(ctx, req.(*QueryGetReportsbyReporterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetReportsbyReporterQid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetReportsbyReporterQidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetReportsbyReporterQid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetReportsbyReporterQid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetReportsbyReporterQid(ctx, req.(*QueryGetReportsbyReporterQidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetCurrentTip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCurrentTipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetCurrentTip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetCurrentTip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetCurrentTip(ctx, req.(*QueryGetCurrentTipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetUserTipTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetUserTipTotalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetUserTipTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetUserTipTotal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetUserTipTotal(ctx, req.(*QueryGetUserTipTotalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetDataBefore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetDataBeforeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetDataBefore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetDataBefore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetDataBefore(ctx, req.(*QueryGetDataBeforeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetDataAfter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetDataAfterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetDataAfter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetDataAfter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetDataAfter(ctx, req.(*QueryGetDataAfterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTimeBasedRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTimeBasedRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTimeBasedRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetTimeBasedRewards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTimeBasedRewards(ctx, req.(*QueryGetTimeBasedRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CurrentCyclelistQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCurrentCyclelistQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CurrentCyclelistQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_CurrentCyclelistQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CurrentCyclelistQuery(ctx, req.(*QueryCurrentCyclelistQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NextCyclelistQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNextCyclelistQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NextCyclelistQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_NextCyclelistQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NextCyclelistQuery(ctx, req.(*QueryNextCyclelistQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RetrieveData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRetrieveDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RetrieveData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_RetrieveData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RetrieveData(ctx, req.(*QueryRetrieveDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetCurrentAggregateReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCurrentAggregateReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetCurrentAggregateReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetCurrentAggregateReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetCurrentAggregateReport(ctx, req.(*QueryGetCurrentAggregateReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAggregateBeforeByReporter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAggregateBeforeByReporterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAggregateBeforeByReporter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetAggregateBeforeByReporter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAggregateBeforeByReporter(ctx, req.(*QueryGetAggregateBeforeByReporterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetQuery(ctx, req.(*QueryGetQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TippedQueriesForDaemon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTippedQueriesForDaemonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TippedQueriesForDaemon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TippedQueriesForDaemon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TippedQueriesForDaemon(ctx, req.(*QueryTippedQueriesForDaemonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetReportsByAggregate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetReportsByAggregateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetReportsByAggregate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetReportsByAggregate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetReportsByAggregate(ctx, req.(*QueryGetReportsByAggregateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetCurrentQueryByQueryId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCurrentQueryByQueryIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetCurrentQueryByQueryId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetCurrentQueryByQueryId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetCurrentQueryByQueryId(ctx, req.(*QueryGetCurrentQueryByQueryIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetQueryDataLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetQueryDataLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetQueryDataLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetQueryDataLimit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetQueryDataLimit(ctx, req.(*QueryGetQueryDataLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ReportedIdsByReporter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReportedIdsByReporterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ReportedIdsByReporter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ReportedIdsByReporter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ReportedIdsByReporter(ctx, req.(*QueryReportedIdsByReporterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetCycleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCycleListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetCycleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetCycleList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetCycleList(ctx, req.(*QueryGetCycleListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTimestampBefore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTimestampBeforeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTimestampBefore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetTimestampBefore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTimestampBefore(ctx, req.(*QueryGetTimestampBeforeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTimestampAfter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTimestampAfterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTimestampAfter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetTimestampAfter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTimestampAfter(ctx, req.(*QueryGetTimestampAfterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTippedQueries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTippedQueriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTippedQueries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetTippedQueries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTippedQueries(ctx, req.(*QueryGetTippedQueriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetReportersNoStakeReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetReportersNoStakeReportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetReportersNoStakeReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetReportersNoStakeReports_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetReportersNoStakeReports(ctx, req.(*QueryGetReportersNoStakeReportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetNoStakeReportsByQueryId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNoStakeReportsByQueryIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetNoStakeReportsByQueryId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetNoStakeReportsByQueryId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetNoStakeReportsByQueryId(ctx, req.(*QueryGetNoStakeReportsByQueryIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTipTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTipTotalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTipTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetTipTotal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTipTotal(ctx, req.(*QueryGetTipTotalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "layer.oracle.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "GetReportsbyQid",
			Handler:    _Query_GetReportsbyQid_Handler,
		},
		{
			MethodName: "GetReportsbyReporter",
			Handler:    _Query_GetReportsbyReporter_Handler,
		},
		{
			MethodName: "GetReportsbyReporterQid",
			Handler:    _Query_GetReportsbyReporterQid_Handler,
		},
		{
			MethodName: "GetCurrentTip",
			Handler:    _Query_GetCurrentTip_Handler,
		},
		{
			MethodName: "GetUserTipTotal",
			Handler:    _Query_GetUserTipTotal_Handler,
		},
		{
			MethodName: "GetDataBefore",
			Handler:    _Query_GetDataBefore_Handler,
		},
		{
			MethodName: "GetDataAfter",
			Handler:    _Query_GetDataAfter_Handler,
		},
		{
			MethodName: "GetTimeBasedRewards",
			Handler:    _Query_GetTimeBasedRewards_Handler,
		},
		{
			MethodName: "CurrentCyclelistQuery",
			Handler:    _Query_CurrentCyclelistQuery_Handler,
		},
		{
			MethodName: "NextCyclelistQuery",
			Handler:    _Query_NextCyclelistQuery_Handler,
		},
		{
			MethodName: "RetrieveData",
			Handler:    _Query_RetrieveData_Handler,
		},
		{
			MethodName: "GetCurrentAggregateReport",
			Handler:    _Query_GetCurrentAggregateReport_Handler,
		},
		{
			MethodName: "GetAggregateBeforeByReporter",
			Handler:    _Query_GetAggregateBeforeByReporter_Handler,
		},
		{
			MethodName: "GetQuery",
			Handler:    _Query_GetQuery_Handler,
		},
		{
			MethodName: "TippedQueriesForDaemon",
			Handler:    _Query_TippedQueriesForDaemon_Handler,
		},
		{
			MethodName: "GetReportsByAggregate",
			Handler:    _Query_GetReportsByAggregate_Handler,
		},
		{
			MethodName: "GetCurrentQueryByQueryId",
			Handler:    _Query_GetCurrentQueryByQueryId_Handler,
		},
		{
			MethodName: "GetQueryDataLimit",
			Handler:    _Query_GetQueryDataLimit_Handler,
		},
		{
			MethodName: "ReportedIdsByReporter",
			Handler:    _Query_ReportedIdsByReporter_Handler,
		},
		{
			MethodName: "GetCycleList",
			Handler:    _Query_GetCycleList_Handler,
		},
		{
			MethodName: "GetTimestampBefore",
			Handler:    _Query_GetTimestampBefore_Handler,
		},
		{
			MethodName: "GetTimestampAfter",
			Handler:    _Query_GetTimestampAfter_Handler,
		},
		{
			MethodName: "GetTippedQueries",
			Handler:    _Query_GetTippedQueries_Handler,
		},
		{
			MethodName: "GetReportersNoStakeReports",
			Handler:    _Query_GetReportersNoStakeReports_Handler,
		},
		{
			MethodName: "GetNoStakeReportsByQueryId",
			Handler:    _Query_GetNoStakeReportsByQueryId_Handler,
		},
		{
			MethodName: "GetTipTotal",
			Handler:    _Query_GetTipTotal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "layer/oracle/query.proto",
}
