// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package oracle

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_Aggregate                    protoreflect.MessageDescriptor
	fd_Aggregate_query_id           protoreflect.FieldDescriptor
	fd_Aggregate_aggregate_value    protoreflect.FieldDescriptor
	fd_Aggregate_aggregate_reporter protoreflect.FieldDescriptor
	fd_Aggregate_aggregate_power    protoreflect.FieldDescriptor
	fd_Aggregate_flagged            protoreflect.FieldDescriptor
	fd_Aggregate_index              protoreflect.FieldDescriptor
	fd_Aggregate_height             protoreflect.FieldDescriptor
	fd_Aggregate_micro_height       protoreflect.FieldDescriptor
	fd_Aggregate_meta_id            protoreflect.FieldDescriptor
)

func init() {
	file_layer_oracle_aggregate_proto_init()
	md_Aggregate = File_layer_oracle_aggregate_proto.Messages().ByName("Aggregate")
	fd_Aggregate_query_id = md_Aggregate.Fields().ByName("query_id")
	fd_Aggregate_aggregate_value = md_Aggregate.Fields().ByName("aggregate_value")
	fd_Aggregate_aggregate_reporter = md_Aggregate.Fields().ByName("aggregate_reporter")
	fd_Aggregate_aggregate_power = md_Aggregate.Fields().ByName("aggregate_power")
	fd_Aggregate_flagged = md_Aggregate.Fields().ByName("flagged")
	fd_Aggregate_index = md_Aggregate.Fields().ByName("index")
	fd_Aggregate_height = md_Aggregate.Fields().ByName("height")
	fd_Aggregate_micro_height = md_Aggregate.Fields().ByName("micro_height")
	fd_Aggregate_meta_id = md_Aggregate.Fields().ByName("meta_id")
}

var _ protoreflect.Message = (*fastReflection_Aggregate)(nil)

type fastReflection_Aggregate Aggregate

func (x *Aggregate) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Aggregate)(x)
}

func (x *Aggregate) slowProtoReflect() protoreflect.Message {
	mi := &file_layer_oracle_aggregate_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Aggregate_messageType fastReflection_Aggregate_messageType
var _ protoreflect.MessageType = fastReflection_Aggregate_messageType{}

type fastReflection_Aggregate_messageType struct{}

func (x fastReflection_Aggregate_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Aggregate)(nil)
}
func (x fastReflection_Aggregate_messageType) New() protoreflect.Message {
	return new(fastReflection_Aggregate)
}
func (x fastReflection_Aggregate_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Aggregate
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Aggregate) Descriptor() protoreflect.MessageDescriptor {
	return md_Aggregate
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Aggregate) Type() protoreflect.MessageType {
	return _fastReflection_Aggregate_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Aggregate) New() protoreflect.Message {
	return new(fastReflection_Aggregate)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Aggregate) Interface() protoreflect.ProtoMessage {
	return (*Aggregate)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Aggregate) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.QueryId) != 0 {
		value := protoreflect.ValueOfBytes(x.QueryId)
		if !f(fd_Aggregate_query_id, value) {
			return
		}
	}
	if x.AggregateValue != "" {
		value := protoreflect.ValueOfString(x.AggregateValue)
		if !f(fd_Aggregate_aggregate_value, value) {
			return
		}
	}
	if x.AggregateReporter != "" {
		value := protoreflect.ValueOfString(x.AggregateReporter)
		if !f(fd_Aggregate_aggregate_reporter, value) {
			return
		}
	}
	if x.AggregatePower != uint64(0) {
		value := protoreflect.ValueOfUint64(x.AggregatePower)
		if !f(fd_Aggregate_aggregate_power, value) {
			return
		}
	}
	if x.Flagged != false {
		value := protoreflect.ValueOfBool(x.Flagged)
		if !f(fd_Aggregate_flagged, value) {
			return
		}
	}
	if x.Index != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Index)
		if !f(fd_Aggregate_index, value) {
			return
		}
	}
	if x.Height != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Height)
		if !f(fd_Aggregate_height, value) {
			return
		}
	}
	if x.MicroHeight != uint64(0) {
		value := protoreflect.ValueOfUint64(x.MicroHeight)
		if !f(fd_Aggregate_micro_height, value) {
			return
		}
	}
	if x.MetaId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.MetaId)
		if !f(fd_Aggregate_meta_id, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Aggregate) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "layer.oracle.Aggregate.query_id":
		return len(x.QueryId) != 0
	case "layer.oracle.Aggregate.aggregate_value":
		return x.AggregateValue != ""
	case "layer.oracle.Aggregate.aggregate_reporter":
		return x.AggregateReporter != ""
	case "layer.oracle.Aggregate.aggregate_power":
		return x.AggregatePower != uint64(0)
	case "layer.oracle.Aggregate.flagged":
		return x.Flagged != false
	case "layer.oracle.Aggregate.index":
		return x.Index != uint64(0)
	case "layer.oracle.Aggregate.height":
		return x.Height != uint64(0)
	case "layer.oracle.Aggregate.micro_height":
		return x.MicroHeight != uint64(0)
	case "layer.oracle.Aggregate.meta_id":
		return x.MetaId != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: layer.oracle.Aggregate"))
		}
		panic(fmt.Errorf("message layer.oracle.Aggregate does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Aggregate) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "layer.oracle.Aggregate.query_id":
		x.QueryId = nil
	case "layer.oracle.Aggregate.aggregate_value":
		x.AggregateValue = ""
	case "layer.oracle.Aggregate.aggregate_reporter":
		x.AggregateReporter = ""
	case "layer.oracle.Aggregate.aggregate_power":
		x.AggregatePower = uint64(0)
	case "layer.oracle.Aggregate.flagged":
		x.Flagged = false
	case "layer.oracle.Aggregate.index":
		x.Index = uint64(0)
	case "layer.oracle.Aggregate.height":
		x.Height = uint64(0)
	case "layer.oracle.Aggregate.micro_height":
		x.MicroHeight = uint64(0)
	case "layer.oracle.Aggregate.meta_id":
		x.MetaId = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: layer.oracle.Aggregate"))
		}
		panic(fmt.Errorf("message layer.oracle.Aggregate does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Aggregate) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "layer.oracle.Aggregate.query_id":
		value := x.QueryId
		return protoreflect.ValueOfBytes(value)
	case "layer.oracle.Aggregate.aggregate_value":
		value := x.AggregateValue
		return protoreflect.ValueOfString(value)
	case "layer.oracle.Aggregate.aggregate_reporter":
		value := x.AggregateReporter
		return protoreflect.ValueOfString(value)
	case "layer.oracle.Aggregate.aggregate_power":
		value := x.AggregatePower
		return protoreflect.ValueOfUint64(value)
	case "layer.oracle.Aggregate.flagged":
		value := x.Flagged
		return protoreflect.ValueOfBool(value)
	case "layer.oracle.Aggregate.index":
		value := x.Index
		return protoreflect.ValueOfUint64(value)
	case "layer.oracle.Aggregate.height":
		value := x.Height
		return protoreflect.ValueOfUint64(value)
	case "layer.oracle.Aggregate.micro_height":
		value := x.MicroHeight
		return protoreflect.ValueOfUint64(value)
	case "layer.oracle.Aggregate.meta_id":
		value := x.MetaId
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: layer.oracle.Aggregate"))
		}
		panic(fmt.Errorf("message layer.oracle.Aggregate does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Aggregate) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "layer.oracle.Aggregate.query_id":
		x.QueryId = value.Bytes()
	case "layer.oracle.Aggregate.aggregate_value":
		x.AggregateValue = value.Interface().(string)
	case "layer.oracle.Aggregate.aggregate_reporter":
		x.AggregateReporter = value.Interface().(string)
	case "layer.oracle.Aggregate.aggregate_power":
		x.AggregatePower = value.Uint()
	case "layer.oracle.Aggregate.flagged":
		x.Flagged = value.Bool()
	case "layer.oracle.Aggregate.index":
		x.Index = value.Uint()
	case "layer.oracle.Aggregate.height":
		x.Height = value.Uint()
	case "layer.oracle.Aggregate.micro_height":
		x.MicroHeight = value.Uint()
	case "layer.oracle.Aggregate.meta_id":
		x.MetaId = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: layer.oracle.Aggregate"))
		}
		panic(fmt.Errorf("message layer.oracle.Aggregate does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Aggregate) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "layer.oracle.Aggregate.query_id":
		panic(fmt.Errorf("field query_id of message layer.oracle.Aggregate is not mutable"))
	case "layer.oracle.Aggregate.aggregate_value":
		panic(fmt.Errorf("field aggregate_value of message layer.oracle.Aggregate is not mutable"))
	case "layer.oracle.Aggregate.aggregate_reporter":
		panic(fmt.Errorf("field aggregate_reporter of message layer.oracle.Aggregate is not mutable"))
	case "layer.oracle.Aggregate.aggregate_power":
		panic(fmt.Errorf("field aggregate_power of message layer.oracle.Aggregate is not mutable"))
	case "layer.oracle.Aggregate.flagged":
		panic(fmt.Errorf("field flagged of message layer.oracle.Aggregate is not mutable"))
	case "layer.oracle.Aggregate.index":
		panic(fmt.Errorf("field index of message layer.oracle.Aggregate is not mutable"))
	case "layer.oracle.Aggregate.height":
		panic(fmt.Errorf("field height of message layer.oracle.Aggregate is not mutable"))
	case "layer.oracle.Aggregate.micro_height":
		panic(fmt.Errorf("field micro_height of message layer.oracle.Aggregate is not mutable"))
	case "layer.oracle.Aggregate.meta_id":
		panic(fmt.Errorf("field meta_id of message layer.oracle.Aggregate is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: layer.oracle.Aggregate"))
		}
		panic(fmt.Errorf("message layer.oracle.Aggregate does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Aggregate) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "layer.oracle.Aggregate.query_id":
		return protoreflect.ValueOfBytes(nil)
	case "layer.oracle.Aggregate.aggregate_value":
		return protoreflect.ValueOfString("")
	case "layer.oracle.Aggregate.aggregate_reporter":
		return protoreflect.ValueOfString("")
	case "layer.oracle.Aggregate.aggregate_power":
		return protoreflect.ValueOfUint64(uint64(0))
	case "layer.oracle.Aggregate.flagged":
		return protoreflect.ValueOfBool(false)
	case "layer.oracle.Aggregate.index":
		return protoreflect.ValueOfUint64(uint64(0))
	case "layer.oracle.Aggregate.height":
		return protoreflect.ValueOfUint64(uint64(0))
	case "layer.oracle.Aggregate.micro_height":
		return protoreflect.ValueOfUint64(uint64(0))
	case "layer.oracle.Aggregate.meta_id":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: layer.oracle.Aggregate"))
		}
		panic(fmt.Errorf("message layer.oracle.Aggregate does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Aggregate) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in layer.oracle.Aggregate", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Aggregate) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Aggregate) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Aggregate) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Aggregate) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Aggregate)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.QueryId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.AggregateValue)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.AggregateReporter)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.AggregatePower != 0 {
			n += 1 + runtime.Sov(uint64(x.AggregatePower))
		}
		if x.Flagged {
			n += 2
		}
		if x.Index != 0 {
			n += 1 + runtime.Sov(uint64(x.Index))
		}
		if x.Height != 0 {
			n += 1 + runtime.Sov(uint64(x.Height))
		}
		if x.MicroHeight != 0 {
			n += 1 + runtime.Sov(uint64(x.MicroHeight))
		}
		if x.MetaId != 0 {
			n += 1 + runtime.Sov(uint64(x.MetaId))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Aggregate)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.MetaId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MetaId))
			i--
			dAtA[i] = 0x48
		}
		if x.MicroHeight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MicroHeight))
			i--
			dAtA[i] = 0x40
		}
		if x.Height != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Height))
			i--
			dAtA[i] = 0x38
		}
		if x.Index != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Index))
			i--
			dAtA[i] = 0x30
		}
		if x.Flagged {
			i--
			if x.Flagged {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x28
		}
		if x.AggregatePower != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.AggregatePower))
			i--
			dAtA[i] = 0x20
		}
		if len(x.AggregateReporter) > 0 {
			i -= len(x.AggregateReporter)
			copy(dAtA[i:], x.AggregateReporter)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.AggregateReporter)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.AggregateValue) > 0 {
			i -= len(x.AggregateValue)
			copy(dAtA[i:], x.AggregateValue)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.AggregateValue)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.QueryId) > 0 {
			i -= len(x.QueryId)
			copy(dAtA[i:], x.QueryId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.QueryId)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Aggregate)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Aggregate: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Aggregate: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field QueryId", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.QueryId = append(x.QueryId[:0], dAtA[iNdEx:postIndex]...)
				if x.QueryId == nil {
					x.QueryId = []byte{}
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AggregateValue", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AggregateValue = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AggregateReporter", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AggregateReporter = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AggregatePower", wireType)
				}
				x.AggregatePower = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.AggregatePower |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Flagged", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.Flagged = bool(v != 0)
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
				}
				x.Index = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Index |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
				}
				x.Height = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Height |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 8:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MicroHeight", wireType)
				}
				x.MicroHeight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MicroHeight |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 9:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MetaId", wireType)
				}
				x.MetaId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MetaId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_AvailableTimestamps_1_list)(nil)

type _AvailableTimestamps_1_list struct {
	list *[]*timestamppb.Timestamp
}

func (x *_AvailableTimestamps_1_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_AvailableTimestamps_1_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_AvailableTimestamps_1_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*timestamppb.Timestamp)
	(*x.list)[i] = concreteValue
}

func (x *_AvailableTimestamps_1_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*timestamppb.Timestamp)
	*x.list = append(*x.list, concreteValue)
}

func (x *_AvailableTimestamps_1_list) AppendMutable() protoreflect.Value {
	v := new(timestamppb.Timestamp)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_AvailableTimestamps_1_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_AvailableTimestamps_1_list) NewElement() protoreflect.Value {
	v := new(timestamppb.Timestamp)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_AvailableTimestamps_1_list) IsValid() bool {
	return x.list != nil
}

var (
	md_AvailableTimestamps            protoreflect.MessageDescriptor
	fd_AvailableTimestamps_timestamps protoreflect.FieldDescriptor
)

func init() {
	file_layer_oracle_aggregate_proto_init()
	md_AvailableTimestamps = File_layer_oracle_aggregate_proto.Messages().ByName("AvailableTimestamps")
	fd_AvailableTimestamps_timestamps = md_AvailableTimestamps.Fields().ByName("timestamps")
}

var _ protoreflect.Message = (*fastReflection_AvailableTimestamps)(nil)

type fastReflection_AvailableTimestamps AvailableTimestamps

func (x *AvailableTimestamps) ProtoReflect() protoreflect.Message {
	return (*fastReflection_AvailableTimestamps)(x)
}

func (x *AvailableTimestamps) slowProtoReflect() protoreflect.Message {
	mi := &file_layer_oracle_aggregate_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_AvailableTimestamps_messageType fastReflection_AvailableTimestamps_messageType
var _ protoreflect.MessageType = fastReflection_AvailableTimestamps_messageType{}

type fastReflection_AvailableTimestamps_messageType struct{}

func (x fastReflection_AvailableTimestamps_messageType) Zero() protoreflect.Message {
	return (*fastReflection_AvailableTimestamps)(nil)
}
func (x fastReflection_AvailableTimestamps_messageType) New() protoreflect.Message {
	return new(fastReflection_AvailableTimestamps)
}
func (x fastReflection_AvailableTimestamps_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_AvailableTimestamps
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_AvailableTimestamps) Descriptor() protoreflect.MessageDescriptor {
	return md_AvailableTimestamps
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_AvailableTimestamps) Type() protoreflect.MessageType {
	return _fastReflection_AvailableTimestamps_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_AvailableTimestamps) New() protoreflect.Message {
	return new(fastReflection_AvailableTimestamps)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_AvailableTimestamps) Interface() protoreflect.ProtoMessage {
	return (*AvailableTimestamps)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_AvailableTimestamps) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.Timestamps) != 0 {
		value := protoreflect.ValueOfList(&_AvailableTimestamps_1_list{list: &x.Timestamps})
		if !f(fd_AvailableTimestamps_timestamps, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_AvailableTimestamps) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "layer.oracle.AvailableTimestamps.timestamps":
		return len(x.Timestamps) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: layer.oracle.AvailableTimestamps"))
		}
		panic(fmt.Errorf("message layer.oracle.AvailableTimestamps does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AvailableTimestamps) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "layer.oracle.AvailableTimestamps.timestamps":
		x.Timestamps = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: layer.oracle.AvailableTimestamps"))
		}
		panic(fmt.Errorf("message layer.oracle.AvailableTimestamps does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_AvailableTimestamps) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "layer.oracle.AvailableTimestamps.timestamps":
		if len(x.Timestamps) == 0 {
			return protoreflect.ValueOfList(&_AvailableTimestamps_1_list{})
		}
		listValue := &_AvailableTimestamps_1_list{list: &x.Timestamps}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: layer.oracle.AvailableTimestamps"))
		}
		panic(fmt.Errorf("message layer.oracle.AvailableTimestamps does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AvailableTimestamps) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "layer.oracle.AvailableTimestamps.timestamps":
		lv := value.List()
		clv := lv.(*_AvailableTimestamps_1_list)
		x.Timestamps = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: layer.oracle.AvailableTimestamps"))
		}
		panic(fmt.Errorf("message layer.oracle.AvailableTimestamps does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AvailableTimestamps) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "layer.oracle.AvailableTimestamps.timestamps":
		if x.Timestamps == nil {
			x.Timestamps = []*timestamppb.Timestamp{}
		}
		value := &_AvailableTimestamps_1_list{list: &x.Timestamps}
		return protoreflect.ValueOfList(value)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: layer.oracle.AvailableTimestamps"))
		}
		panic(fmt.Errorf("message layer.oracle.AvailableTimestamps does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_AvailableTimestamps) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "layer.oracle.AvailableTimestamps.timestamps":
		list := []*timestamppb.Timestamp{}
		return protoreflect.ValueOfList(&_AvailableTimestamps_1_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: layer.oracle.AvailableTimestamps"))
		}
		panic(fmt.Errorf("message layer.oracle.AvailableTimestamps does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_AvailableTimestamps) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in layer.oracle.AvailableTimestamps", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_AvailableTimestamps) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AvailableTimestamps) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_AvailableTimestamps) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_AvailableTimestamps) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*AvailableTimestamps)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.Timestamps) > 0 {
			for _, e := range x.Timestamps {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*AvailableTimestamps)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Timestamps) > 0 {
			for iNdEx := len(x.Timestamps) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Timestamps[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0xa
			}
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*AvailableTimestamps)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: AvailableTimestamps: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: AvailableTimestamps: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Timestamps", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Timestamps = append(x.Timestamps, &timestamppb.Timestamp{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Timestamps[len(x.Timestamps)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_AggregateStrings                    protoreflect.MessageDescriptor
	fd_AggregateStrings_query_id           protoreflect.FieldDescriptor
	fd_AggregateStrings_aggregate_value    protoreflect.FieldDescriptor
	fd_AggregateStrings_aggregate_reporter protoreflect.FieldDescriptor
	fd_AggregateStrings_aggregate_power    protoreflect.FieldDescriptor
	fd_AggregateStrings_flagged            protoreflect.FieldDescriptor
	fd_AggregateStrings_index              protoreflect.FieldDescriptor
	fd_AggregateStrings_height             protoreflect.FieldDescriptor
	fd_AggregateStrings_micro_height       protoreflect.FieldDescriptor
	fd_AggregateStrings_meta_id            protoreflect.FieldDescriptor
)

func init() {
	file_layer_oracle_aggregate_proto_init()
	md_AggregateStrings = File_layer_oracle_aggregate_proto.Messages().ByName("AggregateStrings")
	fd_AggregateStrings_query_id = md_AggregateStrings.Fields().ByName("query_id")
	fd_AggregateStrings_aggregate_value = md_AggregateStrings.Fields().ByName("aggregate_value")
	fd_AggregateStrings_aggregate_reporter = md_AggregateStrings.Fields().ByName("aggregate_reporter")
	fd_AggregateStrings_aggregate_power = md_AggregateStrings.Fields().ByName("aggregate_power")
	fd_AggregateStrings_flagged = md_AggregateStrings.Fields().ByName("flagged")
	fd_AggregateStrings_index = md_AggregateStrings.Fields().ByName("index")
	fd_AggregateStrings_height = md_AggregateStrings.Fields().ByName("height")
	fd_AggregateStrings_micro_height = md_AggregateStrings.Fields().ByName("micro_height")
	fd_AggregateStrings_meta_id = md_AggregateStrings.Fields().ByName("meta_id")
}

var _ protoreflect.Message = (*fastReflection_AggregateStrings)(nil)

type fastReflection_AggregateStrings AggregateStrings

func (x *AggregateStrings) ProtoReflect() protoreflect.Message {
	return (*fastReflection_AggregateStrings)(x)
}

func (x *AggregateStrings) slowProtoReflect() protoreflect.Message {
	mi := &file_layer_oracle_aggregate_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_AggregateStrings_messageType fastReflection_AggregateStrings_messageType
var _ protoreflect.MessageType = fastReflection_AggregateStrings_messageType{}

type fastReflection_AggregateStrings_messageType struct{}

func (x fastReflection_AggregateStrings_messageType) Zero() protoreflect.Message {
	return (*fastReflection_AggregateStrings)(nil)
}
func (x fastReflection_AggregateStrings_messageType) New() protoreflect.Message {
	return new(fastReflection_AggregateStrings)
}
func (x fastReflection_AggregateStrings_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_AggregateStrings
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_AggregateStrings) Descriptor() protoreflect.MessageDescriptor {
	return md_AggregateStrings
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_AggregateStrings) Type() protoreflect.MessageType {
	return _fastReflection_AggregateStrings_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_AggregateStrings) New() protoreflect.Message {
	return new(fastReflection_AggregateStrings)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_AggregateStrings) Interface() protoreflect.ProtoMessage {
	return (*AggregateStrings)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_AggregateStrings) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.QueryId != "" {
		value := protoreflect.ValueOfString(x.QueryId)
		if !f(fd_AggregateStrings_query_id, value) {
			return
		}
	}
	if x.AggregateValue != "" {
		value := protoreflect.ValueOfString(x.AggregateValue)
		if !f(fd_AggregateStrings_aggregate_value, value) {
			return
		}
	}
	if x.AggregateReporter != "" {
		value := protoreflect.ValueOfString(x.AggregateReporter)
		if !f(fd_AggregateStrings_aggregate_reporter, value) {
			return
		}
	}
	if x.AggregatePower != uint64(0) {
		value := protoreflect.ValueOfUint64(x.AggregatePower)
		if !f(fd_AggregateStrings_aggregate_power, value) {
			return
		}
	}
	if x.Flagged != false {
		value := protoreflect.ValueOfBool(x.Flagged)
		if !f(fd_AggregateStrings_flagged, value) {
			return
		}
	}
	if x.Index != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Index)
		if !f(fd_AggregateStrings_index, value) {
			return
		}
	}
	if x.Height != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Height)
		if !f(fd_AggregateStrings_height, value) {
			return
		}
	}
	if x.MicroHeight != uint64(0) {
		value := protoreflect.ValueOfUint64(x.MicroHeight)
		if !f(fd_AggregateStrings_micro_height, value) {
			return
		}
	}
	if x.MetaId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.MetaId)
		if !f(fd_AggregateStrings_meta_id, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_AggregateStrings) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "layer.oracle.AggregateStrings.query_id":
		return x.QueryId != ""
	case "layer.oracle.AggregateStrings.aggregate_value":
		return x.AggregateValue != ""
	case "layer.oracle.AggregateStrings.aggregate_reporter":
		return x.AggregateReporter != ""
	case "layer.oracle.AggregateStrings.aggregate_power":
		return x.AggregatePower != uint64(0)
	case "layer.oracle.AggregateStrings.flagged":
		return x.Flagged != false
	case "layer.oracle.AggregateStrings.index":
		return x.Index != uint64(0)
	case "layer.oracle.AggregateStrings.height":
		return x.Height != uint64(0)
	case "layer.oracle.AggregateStrings.micro_height":
		return x.MicroHeight != uint64(0)
	case "layer.oracle.AggregateStrings.meta_id":
		return x.MetaId != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: layer.oracle.AggregateStrings"))
		}
		panic(fmt.Errorf("message layer.oracle.AggregateStrings does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AggregateStrings) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "layer.oracle.AggregateStrings.query_id":
		x.QueryId = ""
	case "layer.oracle.AggregateStrings.aggregate_value":
		x.AggregateValue = ""
	case "layer.oracle.AggregateStrings.aggregate_reporter":
		x.AggregateReporter = ""
	case "layer.oracle.AggregateStrings.aggregate_power":
		x.AggregatePower = uint64(0)
	case "layer.oracle.AggregateStrings.flagged":
		x.Flagged = false
	case "layer.oracle.AggregateStrings.index":
		x.Index = uint64(0)
	case "layer.oracle.AggregateStrings.height":
		x.Height = uint64(0)
	case "layer.oracle.AggregateStrings.micro_height":
		x.MicroHeight = uint64(0)
	case "layer.oracle.AggregateStrings.meta_id":
		x.MetaId = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: layer.oracle.AggregateStrings"))
		}
		panic(fmt.Errorf("message layer.oracle.AggregateStrings does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_AggregateStrings) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "layer.oracle.AggregateStrings.query_id":
		value := x.QueryId
		return protoreflect.ValueOfString(value)
	case "layer.oracle.AggregateStrings.aggregate_value":
		value := x.AggregateValue
		return protoreflect.ValueOfString(value)
	case "layer.oracle.AggregateStrings.aggregate_reporter":
		value := x.AggregateReporter
		return protoreflect.ValueOfString(value)
	case "layer.oracle.AggregateStrings.aggregate_power":
		value := x.AggregatePower
		return protoreflect.ValueOfUint64(value)
	case "layer.oracle.AggregateStrings.flagged":
		value := x.Flagged
		return protoreflect.ValueOfBool(value)
	case "layer.oracle.AggregateStrings.index":
		value := x.Index
		return protoreflect.ValueOfUint64(value)
	case "layer.oracle.AggregateStrings.height":
		value := x.Height
		return protoreflect.ValueOfUint64(value)
	case "layer.oracle.AggregateStrings.micro_height":
		value := x.MicroHeight
		return protoreflect.ValueOfUint64(value)
	case "layer.oracle.AggregateStrings.meta_id":
		value := x.MetaId
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: layer.oracle.AggregateStrings"))
		}
		panic(fmt.Errorf("message layer.oracle.AggregateStrings does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AggregateStrings) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "layer.oracle.AggregateStrings.query_id":
		x.QueryId = value.Interface().(string)
	case "layer.oracle.AggregateStrings.aggregate_value":
		x.AggregateValue = value.Interface().(string)
	case "layer.oracle.AggregateStrings.aggregate_reporter":
		x.AggregateReporter = value.Interface().(string)
	case "layer.oracle.AggregateStrings.aggregate_power":
		x.AggregatePower = value.Uint()
	case "layer.oracle.AggregateStrings.flagged":
		x.Flagged = value.Bool()
	case "layer.oracle.AggregateStrings.index":
		x.Index = value.Uint()
	case "layer.oracle.AggregateStrings.height":
		x.Height = value.Uint()
	case "layer.oracle.AggregateStrings.micro_height":
		x.MicroHeight = value.Uint()
	case "layer.oracle.AggregateStrings.meta_id":
		x.MetaId = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: layer.oracle.AggregateStrings"))
		}
		panic(fmt.Errorf("message layer.oracle.AggregateStrings does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AggregateStrings) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "layer.oracle.AggregateStrings.query_id":
		panic(fmt.Errorf("field query_id of message layer.oracle.AggregateStrings is not mutable"))
	case "layer.oracle.AggregateStrings.aggregate_value":
		panic(fmt.Errorf("field aggregate_value of message layer.oracle.AggregateStrings is not mutable"))
	case "layer.oracle.AggregateStrings.aggregate_reporter":
		panic(fmt.Errorf("field aggregate_reporter of message layer.oracle.AggregateStrings is not mutable"))
	case "layer.oracle.AggregateStrings.aggregate_power":
		panic(fmt.Errorf("field aggregate_power of message layer.oracle.AggregateStrings is not mutable"))
	case "layer.oracle.AggregateStrings.flagged":
		panic(fmt.Errorf("field flagged of message layer.oracle.AggregateStrings is not mutable"))
	case "layer.oracle.AggregateStrings.index":
		panic(fmt.Errorf("field index of message layer.oracle.AggregateStrings is not mutable"))
	case "layer.oracle.AggregateStrings.height":
		panic(fmt.Errorf("field height of message layer.oracle.AggregateStrings is not mutable"))
	case "layer.oracle.AggregateStrings.micro_height":
		panic(fmt.Errorf("field micro_height of message layer.oracle.AggregateStrings is not mutable"))
	case "layer.oracle.AggregateStrings.meta_id":
		panic(fmt.Errorf("field meta_id of message layer.oracle.AggregateStrings is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: layer.oracle.AggregateStrings"))
		}
		panic(fmt.Errorf("message layer.oracle.AggregateStrings does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_AggregateStrings) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "layer.oracle.AggregateStrings.query_id":
		return protoreflect.ValueOfString("")
	case "layer.oracle.AggregateStrings.aggregate_value":
		return protoreflect.ValueOfString("")
	case "layer.oracle.AggregateStrings.aggregate_reporter":
		return protoreflect.ValueOfString("")
	case "layer.oracle.AggregateStrings.aggregate_power":
		return protoreflect.ValueOfUint64(uint64(0))
	case "layer.oracle.AggregateStrings.flagged":
		return protoreflect.ValueOfBool(false)
	case "layer.oracle.AggregateStrings.index":
		return protoreflect.ValueOfUint64(uint64(0))
	case "layer.oracle.AggregateStrings.height":
		return protoreflect.ValueOfUint64(uint64(0))
	case "layer.oracle.AggregateStrings.micro_height":
		return protoreflect.ValueOfUint64(uint64(0))
	case "layer.oracle.AggregateStrings.meta_id":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: layer.oracle.AggregateStrings"))
		}
		panic(fmt.Errorf("message layer.oracle.AggregateStrings does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_AggregateStrings) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in layer.oracle.AggregateStrings", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_AggregateStrings) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AggregateStrings) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_AggregateStrings) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_AggregateStrings) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*AggregateStrings)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.QueryId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.AggregateValue)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.AggregateReporter)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.AggregatePower != 0 {
			n += 1 + runtime.Sov(uint64(x.AggregatePower))
		}
		if x.Flagged {
			n += 2
		}
		if x.Index != 0 {
			n += 1 + runtime.Sov(uint64(x.Index))
		}
		if x.Height != 0 {
			n += 1 + runtime.Sov(uint64(x.Height))
		}
		if x.MicroHeight != 0 {
			n += 1 + runtime.Sov(uint64(x.MicroHeight))
		}
		if x.MetaId != 0 {
			n += 1 + runtime.Sov(uint64(x.MetaId))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*AggregateStrings)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.MetaId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MetaId))
			i--
			dAtA[i] = 0x48
		}
		if x.MicroHeight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MicroHeight))
			i--
			dAtA[i] = 0x40
		}
		if x.Height != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Height))
			i--
			dAtA[i] = 0x38
		}
		if x.Index != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Index))
			i--
			dAtA[i] = 0x30
		}
		if x.Flagged {
			i--
			if x.Flagged {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x28
		}
		if x.AggregatePower != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.AggregatePower))
			i--
			dAtA[i] = 0x20
		}
		if len(x.AggregateReporter) > 0 {
			i -= len(x.AggregateReporter)
			copy(dAtA[i:], x.AggregateReporter)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.AggregateReporter)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.AggregateValue) > 0 {
			i -= len(x.AggregateValue)
			copy(dAtA[i:], x.AggregateValue)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.AggregateValue)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.QueryId) > 0 {
			i -= len(x.QueryId)
			copy(dAtA[i:], x.QueryId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.QueryId)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*AggregateStrings)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: AggregateStrings: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: AggregateStrings: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field QueryId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.QueryId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AggregateValue", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AggregateValue = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AggregateReporter", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AggregateReporter = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AggregatePower", wireType)
				}
				x.AggregatePower = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.AggregatePower |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Flagged", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.Flagged = bool(v != 0)
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
				}
				x.Index = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Index |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
				}
				x.Height = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Height |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 8:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MicroHeight", wireType)
				}
				x.MicroHeight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MicroHeight |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 9:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MetaId", wireType)
				}
				x.MetaId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MetaId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: layer/oracle/aggregate.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// aggregate struct to represent meta data of an aggregate report
type Aggregate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// query_id is the id of the query
	QueryId []byte `protobuf:"bytes,1,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	// aggregate_value is the value of the aggregate
	AggregateValue string `protobuf:"bytes,2,opt,name=aggregate_value,json=aggregateValue,proto3" json:"aggregate_value,omitempty"`
	// aggregate_reporter is the address of the reporter
	AggregateReporter string `protobuf:"bytes,3,opt,name=aggregate_reporter,json=aggregateReporter,proto3" json:"aggregate_reporter,omitempty"`
	// aggregate_power is the power of all the reporters
	// that reported for the aggregate
	AggregatePower uint64 `protobuf:"varint,4,opt,name=aggregate_power,json=aggregatePower,proto3" json:"aggregate_power,omitempty"`
	// flagged is true if the aggregate was flagged by a dispute
	Flagged bool `protobuf:"varint,5,opt,name=flagged,proto3" json:"flagged,omitempty"`
	// index is the index of the aggregate
	Index uint64 `protobuf:"varint,6,opt,name=index,proto3" json:"index,omitempty"`
	// height of the aggregate report
	Height uint64 `protobuf:"varint,7,opt,name=height,proto3" json:"height,omitempty"`
	// height of the micro report
	MicroHeight uint64 `protobuf:"varint,8,opt,name=micro_height,json=microHeight,proto3" json:"micro_height,omitempty"`
	// meta_id is the id of the querymeta iterator
	MetaId uint64 `protobuf:"varint,9,opt,name=meta_id,json=metaId,proto3" json:"meta_id,omitempty"`
}

func (x *Aggregate) Reset() {
	*x = Aggregate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_layer_oracle_aggregate_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Aggregate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aggregate) ProtoMessage() {}

// Deprecated: Use Aggregate.ProtoReflect.Descriptor instead.
func (*Aggregate) Descriptor() ([]byte, []int) {
	return file_layer_oracle_aggregate_proto_rawDescGZIP(), []int{0}
}

func (x *Aggregate) GetQueryId() []byte {
	if x != nil {
		return x.QueryId
	}
	return nil
}

func (x *Aggregate) GetAggregateValue() string {
	if x != nil {
		return x.AggregateValue
	}
	return ""
}

func (x *Aggregate) GetAggregateReporter() string {
	if x != nil {
		return x.AggregateReporter
	}
	return ""
}

func (x *Aggregate) GetAggregatePower() uint64 {
	if x != nil {
		return x.AggregatePower
	}
	return 0
}

func (x *Aggregate) GetFlagged() bool {
	if x != nil {
		return x.Flagged
	}
	return false
}

func (x *Aggregate) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Aggregate) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Aggregate) GetMicroHeight() uint64 {
	if x != nil {
		return x.MicroHeight
	}
	return 0
}

func (x *Aggregate) GetMetaId() uint64 {
	if x != nil {
		return x.MetaId
	}
	return 0
}

type AvailableTimestamps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamps []*timestamppb.Timestamp `protobuf:"bytes,1,rep,name=timestamps,proto3" json:"timestamps,omitempty"`
}

func (x *AvailableTimestamps) Reset() {
	*x = AvailableTimestamps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_layer_oracle_aggregate_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailableTimestamps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailableTimestamps) ProtoMessage() {}

// Deprecated: Use AvailableTimestamps.ProtoReflect.Descriptor instead.
func (*AvailableTimestamps) Descriptor() ([]byte, []int) {
	return file_layer_oracle_aggregate_proto_rawDescGZIP(), []int{1}
}

func (x *AvailableTimestamps) GetTimestamps() []*timestamppb.Timestamp {
	if x != nil {
		return x.Timestamps
	}
	return nil
}

// aggregate struct but with strings for queries to return
type AggregateStrings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// query_id is the id of the query
	QueryId string `protobuf:"bytes,1,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	// aggregate_value is the value of the aggregate
	AggregateValue string `protobuf:"bytes,2,opt,name=aggregate_value,json=aggregateValue,proto3" json:"aggregate_value,omitempty"`
	// aggregate_reporter is the address of the reporter
	AggregateReporter string `protobuf:"bytes,3,opt,name=aggregate_reporter,json=aggregateReporter,proto3" json:"aggregate_reporter,omitempty"`
	// aggregate_power is the power of all the reporters
	// that reported for the aggregate
	AggregatePower uint64 `protobuf:"varint,4,opt,name=aggregate_power,json=aggregatePower,proto3" json:"aggregate_power,omitempty"`
	// flagged is true if the aggregate was flagged by a dispute
	Flagged bool `protobuf:"varint,5,opt,name=flagged,proto3" json:"flagged,omitempty"`
	// index is the index of the aggregate
	Index uint64 `protobuf:"varint,6,opt,name=index,proto3" json:"index,omitempty"`
	// height of the aggregate report
	Height uint64 `protobuf:"varint,7,opt,name=height,proto3" json:"height,omitempty"`
	// height of the micro report
	MicroHeight uint64 `protobuf:"varint,8,opt,name=micro_height,json=microHeight,proto3" json:"micro_height,omitempty"`
	// meta_id is the id of the querymeta iterator
	MetaId uint64 `protobuf:"varint,9,opt,name=meta_id,json=metaId,proto3" json:"meta_id,omitempty"`
}

func (x *AggregateStrings) Reset() {
	*x = AggregateStrings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_layer_oracle_aggregate_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregateStrings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregateStrings) ProtoMessage() {}

// Deprecated: Use AggregateStrings.ProtoReflect.Descriptor instead.
func (*AggregateStrings) Descriptor() ([]byte, []int) {
	return file_layer_oracle_aggregate_proto_rawDescGZIP(), []int{2}
}

func (x *AggregateStrings) GetQueryId() string {
	if x != nil {
		return x.QueryId
	}
	return ""
}

func (x *AggregateStrings) GetAggregateValue() string {
	if x != nil {
		return x.AggregateValue
	}
	return ""
}

func (x *AggregateStrings) GetAggregateReporter() string {
	if x != nil {
		return x.AggregateReporter
	}
	return ""
}

func (x *AggregateStrings) GetAggregatePower() uint64 {
	if x != nil {
		return x.AggregatePower
	}
	return 0
}

func (x *AggregateStrings) GetFlagged() bool {
	if x != nil {
		return x.Flagged
	}
	return false
}

func (x *AggregateStrings) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *AggregateStrings) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *AggregateStrings) GetMicroHeight() uint64 {
	if x != nil {
		return x.MicroHeight
	}
	return 0
}

func (x *AggregateStrings) GetMetaId() uint64 {
	if x != nil {
		return x.MetaId
	}
	return 0
}

var File_layer_oracle_aggregate_proto protoreflect.FileDescriptor

var file_layer_oracle_aggregate_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2f, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x1a, 0x14, 0x67, 0x6f,
	0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2f, 0x6f, 0x72, 0x61, 0x63, 0x6c,
	0x65, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xab, 0x02, 0x0a, 0x09, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2d, 0x0a, 0x12,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c, 0x61, 0x67, 0x67, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x66, 0x6c, 0x61, 0x67, 0x67, 0x65, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x6d, 0x65, 0x74, 0x61, 0x49, 0x64, 0x22, 0x5b, 0x0a, 0x13, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x12,
	0x44, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x08, 0xc8, 0xde, 0x1f, 0x00, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x73, 0x22, 0xb2, 0x02, 0x0a, 0x10, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2d,
	0x0a, 0x12, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x12, 0x27, 0x0a,
	0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c, 0x61, 0x67, 0x67, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x66, 0x6c, 0x61, 0x67, 0x67, 0x65, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x61, 0x49, 0x64, 0x42, 0xa0, 0x01, 0x0a, 0x10, 0x63,
	0x6f, 0x6d, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x42,
	0x0e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x65,
	0x6c, 0x6c, 0x6f, 0x72, 0x2d, 0x69, 0x6f, 0x2f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0xa2, 0x02,
	0x03, 0x4c, 0x4f, 0x58, 0xaa, 0x02, 0x0c, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x61,
	0x63, 0x6c, 0x65, 0xca, 0x02, 0x0c, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x5c, 0x4f, 0x72, 0x61, 0x63,
	0x6c, 0x65, 0xe2, 0x02, 0x18, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x5c, 0x4f, 0x72, 0x61, 0x63, 0x6c,
	0x65, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0d,
	0x4c, 0x61, 0x79, 0x65, 0x72, 0x3a, 0x3a, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_layer_oracle_aggregate_proto_rawDescOnce sync.Once
	file_layer_oracle_aggregate_proto_rawDescData = file_layer_oracle_aggregate_proto_rawDesc
)

func file_layer_oracle_aggregate_proto_rawDescGZIP() []byte {
	file_layer_oracle_aggregate_proto_rawDescOnce.Do(func() {
		file_layer_oracle_aggregate_proto_rawDescData = protoimpl.X.CompressGZIP(file_layer_oracle_aggregate_proto_rawDescData)
	})
	return file_layer_oracle_aggregate_proto_rawDescData
}

var file_layer_oracle_aggregate_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_layer_oracle_aggregate_proto_goTypes = []interface{}{
	(*Aggregate)(nil),             // 0: layer.oracle.Aggregate
	(*AvailableTimestamps)(nil),   // 1: layer.oracle.AvailableTimestamps
	(*AggregateStrings)(nil),      // 2: layer.oracle.AggregateStrings
	(*timestamppb.Timestamp)(nil), // 3: google.protobuf.Timestamp
}
var file_layer_oracle_aggregate_proto_depIdxs = []int32{
	3, // 0: layer.oracle.AvailableTimestamps.timestamps:type_name -> google.protobuf.Timestamp
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_layer_oracle_aggregate_proto_init() }
func file_layer_oracle_aggregate_proto_init() {
	if File_layer_oracle_aggregate_proto != nil {
		return
	}
	file_layer_oracle_aggregate_reporter_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_layer_oracle_aggregate_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Aggregate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_layer_oracle_aggregate_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailableTimestamps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_layer_oracle_aggregate_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregateStrings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_layer_oracle_aggregate_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_layer_oracle_aggregate_proto_goTypes,
		DependencyIndexes: file_layer_oracle_aggregate_proto_depIdxs,
		MessageInfos:      file_layer_oracle_aggregate_proto_msgTypes,
	}.Build()
	File_layer_oracle_aggregate_proto = out.File
	file_layer_oracle_aggregate_proto_rawDesc = nil
	file_layer_oracle_aggregate_proto_goTypes = nil
	file_layer_oracle_aggregate_proto_depIdxs = nil
}
