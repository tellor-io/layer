// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package daemons

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TokenBridgeServiceClient is the client API for TokenBridgeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TokenBridgeServiceClient interface {
	// GetPendingBridgeDeposit returns the oldest pending bridge deposit report data.
	GetPendingDepositReport(ctx context.Context, in *GetPendingDepositReportRequest, opts ...grpc.CallOption) (*GetPendingDepositReportResponse, error)
}

type tokenBridgeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTokenBridgeServiceClient(cc grpc.ClientConnInterface) TokenBridgeServiceClient {
	return &tokenBridgeServiceClient{cc}
}

func (c *tokenBridgeServiceClient) GetPendingDepositReport(ctx context.Context, in *GetPendingDepositReportRequest, opts ...grpc.CallOption) (*GetPendingDepositReportResponse, error) {
	out := new(GetPendingDepositReportResponse)
	err := c.cc.Invoke(ctx, "/layer.daemons.TokenBridgeService/GetPendingDepositReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokenBridgeServiceServer is the server API for TokenBridgeService service.
// All implementations must embed UnimplementedTokenBridgeServiceServer
// for forward compatibility
type TokenBridgeServiceServer interface {
	// GetPendingBridgeDeposit returns the oldest pending bridge deposit report data.
	GetPendingDepositReport(context.Context, *GetPendingDepositReportRequest) (*GetPendingDepositReportResponse, error)
	mustEmbedUnimplementedTokenBridgeServiceServer()
}

// UnimplementedTokenBridgeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTokenBridgeServiceServer struct {
}

func (UnimplementedTokenBridgeServiceServer) GetPendingDepositReport(context.Context, *GetPendingDepositReportRequest) (*GetPendingDepositReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPendingDepositReport not implemented")
}
func (UnimplementedTokenBridgeServiceServer) mustEmbedUnimplementedTokenBridgeServiceServer() {}

// UnsafeTokenBridgeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TokenBridgeServiceServer will
// result in compilation errors.
type UnsafeTokenBridgeServiceServer interface {
	mustEmbedUnimplementedTokenBridgeServiceServer()
}

func RegisterTokenBridgeServiceServer(s grpc.ServiceRegistrar, srv TokenBridgeServiceServer) {
	s.RegisterService(&TokenBridgeService_ServiceDesc, srv)
}

func _TokenBridgeService_GetPendingDepositReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPendingDepositReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenBridgeServiceServer).GetPendingDepositReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.daemons.TokenBridgeService/GetPendingDepositReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenBridgeServiceServer).GetPendingDepositReport(ctx, req.(*GetPendingDepositReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TokenBridgeService_ServiceDesc is the grpc.ServiceDesc for TokenBridgeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TokenBridgeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "layer.daemons.TokenBridgeService",
	HandlerType: (*TokenBridgeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPendingDepositReport",
			Handler:    _TokenBridgeService_GetPendingDepositReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "layer/daemons/token_bridge.proto",
}
