// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package daemons

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TokenBridgeTipServiceClient is the client API for TokenBridgeTipService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TokenBridgeTipServiceClient interface {
	// GetPendingBridgeDeposit returns the oldest pending bridge deposit report data.
	GetTokenBridgeTip(ctx context.Context, in *GetTokenBridgeTipRequest, opts ...grpc.CallOption) (*GetTokenBridgeTipResponse, error)
}

type tokenBridgeTipServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTokenBridgeTipServiceClient(cc grpc.ClientConnInterface) TokenBridgeTipServiceClient {
	return &tokenBridgeTipServiceClient{cc}
}

func (c *tokenBridgeTipServiceClient) GetTokenBridgeTip(ctx context.Context, in *GetTokenBridgeTipRequest, opts ...grpc.CallOption) (*GetTokenBridgeTipResponse, error) {
	out := new(GetTokenBridgeTipResponse)
	err := c.cc.Invoke(ctx, "/layer.daemons.TokenBridgeTipService/GetTokenBridgeTip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokenBridgeTipServiceServer is the server API for TokenBridgeTipService service.
// All implementations must embed UnimplementedTokenBridgeTipServiceServer
// for forward compatibility
type TokenBridgeTipServiceServer interface {
	// GetPendingBridgeDeposit returns the oldest pending bridge deposit report data.
	GetTokenBridgeTip(context.Context, *GetTokenBridgeTipRequest) (*GetTokenBridgeTipResponse, error)
	mustEmbedUnimplementedTokenBridgeTipServiceServer()
}

// UnimplementedTokenBridgeTipServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTokenBridgeTipServiceServer struct {
}

func (UnimplementedTokenBridgeTipServiceServer) GetTokenBridgeTip(context.Context, *GetTokenBridgeTipRequest) (*GetTokenBridgeTipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenBridgeTip not implemented")
}
func (UnimplementedTokenBridgeTipServiceServer) mustEmbedUnimplementedTokenBridgeTipServiceServer() {}

// UnsafeTokenBridgeTipServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TokenBridgeTipServiceServer will
// result in compilation errors.
type UnsafeTokenBridgeTipServiceServer interface {
	mustEmbedUnimplementedTokenBridgeTipServiceServer()
}

func RegisterTokenBridgeTipServiceServer(s grpc.ServiceRegistrar, srv TokenBridgeTipServiceServer) {
	s.RegisterService(&TokenBridgeTipService_ServiceDesc, srv)
}

func _TokenBridgeTipService_GetTokenBridgeTip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenBridgeTipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenBridgeTipServiceServer).GetTokenBridgeTip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.daemons.TokenBridgeTipService/GetTokenBridgeTip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenBridgeTipServiceServer).GetTokenBridgeTip(ctx, req.(*GetTokenBridgeTipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TokenBridgeTipService_ServiceDesc is the grpc.ServiceDesc for TokenBridgeTipService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TokenBridgeTipService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "layer.daemons.TokenBridgeTipService",
	HandlerType: (*TokenBridgeTipServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTokenBridgeTip",
			Handler:    _TokenBridgeTipService_GetTokenBridgeTip_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "layer/daemons/token_bridge_tips.proto",
}
