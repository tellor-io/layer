// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: layer/reporter/distribution.proto

package types

import (
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ReporterAccumulatedCommission represents accumulated commission for a reporter
type ReporterAccumulatedCommission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// commission is the accumulated commission for the reporter
	Commission []*types.DecCoin `protobuf:"bytes,1,rep,name=commission,proto3" json:"commission,omitempty"`
}

func (x *ReporterAccumulatedCommission) Reset() {
	*x = ReporterAccumulatedCommission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_layer_reporter_distribution_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReporterAccumulatedCommission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReporterAccumulatedCommission) ProtoMessage() {}

func (x *ReporterAccumulatedCommission) ProtoReflect() protoreflect.Message {
	mi := &file_layer_reporter_distribution_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReporterAccumulatedCommission.ProtoReflect.Descriptor instead.
func (*ReporterAccumulatedCommission) Descriptor() ([]byte, []int) {
	return file_layer_reporter_distribution_proto_rawDescGZIP(), []int{0}
}

func (x *ReporterAccumulatedCommission) GetCommission() []*types.DecCoin {
	if x != nil {
		return x.Commission
	}
	return nil
}

// ReporterOutstandingRewards represents outstanding (un-withdrawn) rewards
// for a reporter inexpensive to track, allows simple sanity checks.
type ReporterOutstandingRewards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// rewards is the outstanding rewards for the reporter
	Rewards []*types.DecCoin `protobuf:"bytes,1,rep,name=rewards,proto3" json:"rewards,omitempty"`
}

func (x *ReporterOutstandingRewards) Reset() {
	*x = ReporterOutstandingRewards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_layer_reporter_distribution_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReporterOutstandingRewards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReporterOutstandingRewards) ProtoMessage() {}

func (x *ReporterOutstandingRewards) ProtoReflect() protoreflect.Message {
	mi := &file_layer_reporter_distribution_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReporterOutstandingRewards.ProtoReflect.Descriptor instead.
func (*ReporterOutstandingRewards) Descriptor() ([]byte, []int) {
	return file_layer_reporter_distribution_proto_rawDescGZIP(), []int{1}
}

func (x *ReporterOutstandingRewards) GetRewards() []*types.DecCoin {
	if x != nil {
		return x.Rewards
	}
	return nil
}

// DelegatorStartingInfo represents the starting info for a delegator reward
// period. It tracks the previous reporter period, the delegation's amount of
// staking token, and the creation height (to check later on if any disputes have
// occurred).
type DelegatorStartingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// previous_period is the period last tracked for the delegator
	PreviousPeriod uint64 `protobuf:"varint,1,opt,name=previous_period,json=previousPeriod,proto3" json:"previous_period,omitempty"`
	// stake is the amount of staking token delegated.
	Stake string `protobuf:"bytes,2,opt,name=stake,proto3" json:"stake,omitempty"`
	// creation_height is the height at which the starting was created/last updated.
	Height uint64 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *DelegatorStartingInfo) Reset() {
	*x = DelegatorStartingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_layer_reporter_distribution_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegatorStartingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegatorStartingInfo) ProtoMessage() {}

func (x *DelegatorStartingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_layer_reporter_distribution_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegatorStartingInfo.ProtoReflect.Descriptor instead.
func (*DelegatorStartingInfo) Descriptor() ([]byte, []int) {
	return file_layer_reporter_distribution_proto_rawDescGZIP(), []int{2}
}

func (x *DelegatorStartingInfo) GetPreviousPeriod() uint64 {
	if x != nil {
		return x.PreviousPeriod
	}
	return 0
}

func (x *DelegatorStartingInfo) GetStake() string {
	if x != nil {
		return x.Stake
	}
	return ""
}

func (x *DelegatorStartingInfo) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

// ReporterHistoricalRewards represents historical rewards for a reporter.
// Height is implicit within the store key.
// Cumulative reward ratio is the sum from the zeroeth period
// until this period of rewards / tokens, per the spec.
// The reference count indicates the number of objects
// which might need to reference this historical entry at any point.
// ReferenceCount =
//
//	  number of outstanding delegations which ended the associated period (and
//	  might need to read that record)
//	+ number of slashes which ended the associated period (and might need to
//	read that record)
//	+ one per reporter for the zeroeth period, set on initialization
type ReporterHistoricalRewards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CumulativeRewardRatio []*types.DecCoin `protobuf:"bytes,1,rep,name=cumulative_reward_ratio,json=cumulativeRewardRatio,proto3" json:"cumulative_reward_ratio,omitempty"`
	ReferenceCount        uint32           `protobuf:"varint,2,opt,name=reference_count,json=referenceCount,proto3" json:"reference_count,omitempty"`
}

func (x *ReporterHistoricalRewards) Reset() {
	*x = ReporterHistoricalRewards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_layer_reporter_distribution_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReporterHistoricalRewards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReporterHistoricalRewards) ProtoMessage() {}

func (x *ReporterHistoricalRewards) ProtoReflect() protoreflect.Message {
	mi := &file_layer_reporter_distribution_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReporterHistoricalRewards.ProtoReflect.Descriptor instead.
func (*ReporterHistoricalRewards) Descriptor() ([]byte, []int) {
	return file_layer_reporter_distribution_proto_rawDescGZIP(), []int{3}
}

func (x *ReporterHistoricalRewards) GetCumulativeRewardRatio() []*types.DecCoin {
	if x != nil {
		return x.CumulativeRewardRatio
	}
	return nil
}

func (x *ReporterHistoricalRewards) GetReferenceCount() uint32 {
	if x != nil {
		return x.ReferenceCount
	}
	return 0
}

// ReporterCurrentRewards represents current rewards and current
// period for a reporter kept as a running counter and incremented
// each block as long as the reporter's tokens remain constant.
type ReporterCurrentRewards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rewards []*types.DecCoin `protobuf:"bytes,1,rep,name=rewards,proto3" json:"rewards,omitempty"`
	Period  uint64           `protobuf:"varint,2,opt,name=period,proto3" json:"period,omitempty"`
}

func (x *ReporterCurrentRewards) Reset() {
	*x = ReporterCurrentRewards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_layer_reporter_distribution_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReporterCurrentRewards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReporterCurrentRewards) ProtoMessage() {}

func (x *ReporterCurrentRewards) ProtoReflect() protoreflect.Message {
	mi := &file_layer_reporter_distribution_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReporterCurrentRewards.ProtoReflect.Descriptor instead.
func (*ReporterCurrentRewards) Descriptor() ([]byte, []int) {
	return file_layer_reporter_distribution_proto_rawDescGZIP(), []int{4}
}

func (x *ReporterCurrentRewards) GetRewards() []*types.DecCoin {
	if x != nil {
		return x.Rewards
	}
	return nil
}

func (x *ReporterCurrentRewards) GetPeriod() uint64 {
	if x != nil {
		return x.Period
	}
	return 0
}

// ReporterDisputeEvent tracks disputes and the fraction of the
// reporter's stake that is slashed.
type ReporterDisputeEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReporterPeriod uint64 `protobuf:"varint,1,opt,name=reporter_period,json=reporterPeriod,proto3" json:"reporter_period,omitempty"`
	Fraction       string `protobuf:"bytes,2,opt,name=fraction,proto3" json:"fraction,omitempty"`
}

func (x *ReporterDisputeEvent) Reset() {
	*x = ReporterDisputeEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_layer_reporter_distribution_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReporterDisputeEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReporterDisputeEvent) ProtoMessage() {}

func (x *ReporterDisputeEvent) ProtoReflect() protoreflect.Message {
	mi := &file_layer_reporter_distribution_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReporterDisputeEvent.ProtoReflect.Descriptor instead.
func (*ReporterDisputeEvent) Descriptor() ([]byte, []int) {
	return file_layer_reporter_distribution_proto_rawDescGZIP(), []int{5}
}

func (x *ReporterDisputeEvent) GetReporterPeriod() uint64 {
	if x != nil {
		return x.ReporterPeriod
	}
	return 0
}

func (x *ReporterDisputeEvent) GetFraction() string {
	if x != nil {
		return x.Fraction
	}
	return ""
}

var File_layer_reporter_distribution_proto protoreflect.FileDescriptor

var file_layer_reporter_distribution_proto_rawDesc = []byte{
	0x0a, 0x21, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x2f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x1a, 0x11, 0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x2f, 0x61, 0x6d, 0x69, 0x6e, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x62,
	0x61, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x97, 0x01, 0x0a, 0x1d, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x76, 0x0a, 0x0a, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x38, 0xc8, 0xde, 0x1f,
	0x00, 0xaa, 0xdf, 0x1f, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64,
	0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x43, 0x6f, 0x69, 0x6e, 0x73,
	0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x8e, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x4f, 0x75,
	0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x12, 0x70, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x43, 0x6f, 0x69, 0x6e, 0x42,
	0x38, 0xc8, 0xde, 0x1f, 0x00, 0xaa, 0xdf, 0x1f, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x43,
	0x6f, 0x69, 0x6e, 0x73, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x22, 0xc9, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a, 0x0f,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x41, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e,
	0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x52, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x44, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x2c, 0xea, 0xde, 0x1f, 0x0f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0xa2, 0xe7, 0xb0,
	0x2a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xd5,
	0x01, 0x0a, 0x19, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x8e, 0x01, 0x0a,
	0x17, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x38, 0xc8, 0xde,
	0x1f, 0x00, 0xaa, 0xdf, 0x1f, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73,
	0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x43, 0x6f, 0x69, 0x6e,
	0x73, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x15, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x27, 0x0a,
	0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa2, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x12, 0x70, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x43, 0x6f, 0x69, 0x6e,
	0x42, 0x38, 0xc8, 0xde, 0x1f, 0x00, 0xaa, 0xdf, 0x1f, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x63,
	0x43, 0x6f, 0x69, 0x6e, 0x73, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x07, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0x8e, 0x01, 0x0a, 0x14,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x44, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x4d, 0x0a,
	0x08, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x31, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73,
	0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63,
	0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44,
	0x65, 0x63, 0x52, 0x08, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x2d, 0x5a, 0x2b,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x65, 0x6c, 0x6c, 0x6f,
	0x72, 0x2d, 0x69, 0x6f, 0x2f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2f, 0x78, 0x2f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_layer_reporter_distribution_proto_rawDescOnce sync.Once
	file_layer_reporter_distribution_proto_rawDescData = file_layer_reporter_distribution_proto_rawDesc
)

func file_layer_reporter_distribution_proto_rawDescGZIP() []byte {
	file_layer_reporter_distribution_proto_rawDescOnce.Do(func() {
		file_layer_reporter_distribution_proto_rawDescData = protoimpl.X.CompressGZIP(file_layer_reporter_distribution_proto_rawDescData)
	})
	return file_layer_reporter_distribution_proto_rawDescData
}

var file_layer_reporter_distribution_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_layer_reporter_distribution_proto_goTypes = []interface{}{
	(*ReporterAccumulatedCommission)(nil), // 0: layer.reporter.ReporterAccumulatedCommission
	(*ReporterOutstandingRewards)(nil),    // 1: layer.reporter.ReporterOutstandingRewards
	(*DelegatorStartingInfo)(nil),         // 2: layer.reporter.DelegatorStartingInfo
	(*ReporterHistoricalRewards)(nil),     // 3: layer.reporter.ReporterHistoricalRewards
	(*ReporterCurrentRewards)(nil),        // 4: layer.reporter.ReporterCurrentRewards
	(*ReporterDisputeEvent)(nil),          // 5: layer.reporter.ReporterDisputeEvent
	(*types.DecCoin)(nil),                 // 6: cosmos.base.v1beta1.DecCoin
}
var file_layer_reporter_distribution_proto_depIdxs = []int32{
	6, // 0: layer.reporter.ReporterAccumulatedCommission.commission:type_name -> cosmos.base.v1beta1.DecCoin
	6, // 1: layer.reporter.ReporterOutstandingRewards.rewards:type_name -> cosmos.base.v1beta1.DecCoin
	6, // 2: layer.reporter.ReporterHistoricalRewards.cumulative_reward_ratio:type_name -> cosmos.base.v1beta1.DecCoin
	6, // 3: layer.reporter.ReporterCurrentRewards.rewards:type_name -> cosmos.base.v1beta1.DecCoin
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_layer_reporter_distribution_proto_init() }
func file_layer_reporter_distribution_proto_init() {
	if File_layer_reporter_distribution_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_layer_reporter_distribution_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReporterAccumulatedCommission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_layer_reporter_distribution_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReporterOutstandingRewards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_layer_reporter_distribution_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegatorStartingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_layer_reporter_distribution_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReporterHistoricalRewards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_layer_reporter_distribution_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReporterCurrentRewards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_layer_reporter_distribution_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReporterDisputeEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_layer_reporter_distribution_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_layer_reporter_distribution_proto_goTypes,
		DependencyIndexes: file_layer_reporter_distribution_proto_depIdxs,
		MessageInfos:      file_layer_reporter_distribution_proto_msgTypes,
	}.Build()
	File_layer_reporter_distribution_proto = out.File
	file_layer_reporter_distribution_proto_rawDesc = nil
	file_layer_reporter_distribution_proto_goTypes = nil
	file_layer_reporter_distribution_proto_depIdxs = nil
}
