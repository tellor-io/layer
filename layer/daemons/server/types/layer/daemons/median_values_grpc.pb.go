// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package types

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MedianValuesServiceClient is the client API for MedianValuesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MedianValuesServiceClient interface {
	// GetAllMedianValues returns the median values for all markets
	GetAllMedianValues(ctx context.Context, in *GetAllMedianValuesRequest, opts ...grpc.CallOption) (*GetAllMedianValuesResponse, error)
	// GetMedianValue returns the median value for a market given a query data that a market is associated with
	GetMedianValue(ctx context.Context, in *GetMedianValueRequest, opts ...grpc.CallOption) (*GetMedianValueResponse, error)
}

type medianValuesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMedianValuesServiceClient(cc grpc.ClientConnInterface) MedianValuesServiceClient {
	return &medianValuesServiceClient{cc}
}

func (c *medianValuesServiceClient) GetAllMedianValues(ctx context.Context, in *GetAllMedianValuesRequest, opts ...grpc.CallOption) (*GetAllMedianValuesResponse, error) {
	out := new(GetAllMedianValuesResponse)
	err := c.cc.Invoke(ctx, "/layer.daemons.MedianValuesService/GetAllMedianValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medianValuesServiceClient) GetMedianValue(ctx context.Context, in *GetMedianValueRequest, opts ...grpc.CallOption) (*GetMedianValueResponse, error) {
	out := new(GetMedianValueResponse)
	err := c.cc.Invoke(ctx, "/layer.daemons.MedianValuesService/GetMedianValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MedianValuesServiceServer is the server API for MedianValuesService service.
// All implementations must embed UnimplementedMedianValuesServiceServer
// for forward compatibility
type MedianValuesServiceServer interface {
	// GetAllMedianValues returns the median values for all markets
	GetAllMedianValues(context.Context, *GetAllMedianValuesRequest) (*GetAllMedianValuesResponse, error)
	// GetMedianValue returns the median value for a market given a query data that a market is associated with
	GetMedianValue(context.Context, *GetMedianValueRequest) (*GetMedianValueResponse, error)
	mustEmbedUnimplementedMedianValuesServiceServer()
}

// UnimplementedMedianValuesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMedianValuesServiceServer struct {
}

func (UnimplementedMedianValuesServiceServer) GetAllMedianValues(context.Context, *GetAllMedianValuesRequest) (*GetAllMedianValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllMedianValues not implemented")
}
func (UnimplementedMedianValuesServiceServer) GetMedianValue(context.Context, *GetMedianValueRequest) (*GetMedianValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMedianValue not implemented")
}
func (UnimplementedMedianValuesServiceServer) mustEmbedUnimplementedMedianValuesServiceServer() {}

// UnsafeMedianValuesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MedianValuesServiceServer will
// result in compilation errors.
type UnsafeMedianValuesServiceServer interface {
	mustEmbedUnimplementedMedianValuesServiceServer()
}

func RegisterMedianValuesServiceServer(s grpc.ServiceRegistrar, srv MedianValuesServiceServer) {
	s.RegisterService(&MedianValuesService_ServiceDesc, srv)
}

func _MedianValuesService_GetAllMedianValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllMedianValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedianValuesServiceServer).GetAllMedianValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.daemons.MedianValuesService/GetAllMedianValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedianValuesServiceServer).GetAllMedianValues(ctx, req.(*GetAllMedianValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedianValuesService_GetMedianValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMedianValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedianValuesServiceServer).GetMedianValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.daemons.MedianValuesService/GetMedianValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedianValuesServiceServer).GetMedianValue(ctx, req.(*GetMedianValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MedianValuesService_ServiceDesc is the grpc.ServiceDesc for MedianValuesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MedianValuesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "layer.daemons.MedianValuesService",
	HandlerType: (*MedianValuesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllMedianValues",
			Handler:    _MedianValuesService_GetAllMedianValues_Handler,
		},
		{
			MethodName: "GetMedianValue",
			Handler:    _MedianValuesService_GetMedianValue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "layer/daemons/median_values.proto",
}
