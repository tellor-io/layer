// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: layer/dispute/dispute.proto

package types

import (
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	types "github.com/tellor-io/layer/x/oracle/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// DisputeCategory defines the severity of a dispute.
type DisputeCategory int32

const (
	// UNSPECIFIED defines an invalid dispute category.
	DisputeCategory_DISPUTE_CATEGORY_UNSPECIFIED DisputeCategory = 0
	// WARNING defines a 1 percent slashing.
	DisputeCategory_DISPUTE_CATEGORY_WARNING DisputeCategory = 1
	// MINOR defines a 5 percent slashing.
	DisputeCategory_DISPUTE_CATEGORY_MINOR DisputeCategory = 2
	// MAJOR defines a 100 percent slashing.
	DisputeCategory_DISPUTE_CATEGORY_MAJOR DisputeCategory = 3
)

// Enum value maps for DisputeCategory.
var (
	DisputeCategory_name = map[int32]string{
		0: "DISPUTE_CATEGORY_UNSPECIFIED",
		1: "DISPUTE_CATEGORY_WARNING",
		2: "DISPUTE_CATEGORY_MINOR",
		3: "DISPUTE_CATEGORY_MAJOR",
	}
	DisputeCategory_value = map[string]int32{
		"DISPUTE_CATEGORY_UNSPECIFIED": 0,
		"DISPUTE_CATEGORY_WARNING":     1,
		"DISPUTE_CATEGORY_MINOR":       2,
		"DISPUTE_CATEGORY_MAJOR":       3,
	}
)

func (x DisputeCategory) Enum() *DisputeCategory {
	p := new(DisputeCategory)
	*p = x
	return p
}

func (x DisputeCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DisputeCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_layer_dispute_dispute_proto_enumTypes[0].Descriptor()
}

func (DisputeCategory) Type() protoreflect.EnumType {
	return &file_layer_dispute_dispute_proto_enumTypes[0]
}

func (x DisputeCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DisputeCategory.Descriptor instead.
func (DisputeCategory) EnumDescriptor() ([]byte, []int) {
	return file_layer_dispute_dispute_proto_rawDescGZIP(), []int{0}
}

// DisputeStatus defines the status of a dispute.
type DisputeStatus int32

const (
	// PREVOTE defines a dispute that hasn't started voting (ie in funding).
	DisputeStatus_DISPUTE_STATUS_PREVOTE DisputeStatus = 0
	// VOTING defines a dispute that has been funded and is in voting.
	DisputeStatus_DISPUTE_STATUS_VOTING DisputeStatus = 1
	// RESOLVED defines a dispute that has completed voting and reached quroum
	DisputeStatus_DISPUTE_STATUS_RESOLVED DisputeStatus = 2
	// UNRESOLVED defines a dispute that has completed voting and but hasn't reached quroum
	DisputeStatus_DISPUTE_STATUS_UNRESOLVED DisputeStatus = 3
	// FAILED defines a dispute that failed to pay the dispute fee to start vote.
	DisputeStatus_DISPUTE_STATUS_FAILED DisputeStatus = 4
)

// Enum value maps for DisputeStatus.
var (
	DisputeStatus_name = map[int32]string{
		0: "DISPUTE_STATUS_PREVOTE",
		1: "DISPUTE_STATUS_VOTING",
		2: "DISPUTE_STATUS_RESOLVED",
		3: "DISPUTE_STATUS_UNRESOLVED",
		4: "DISPUTE_STATUS_FAILED",
	}
	DisputeStatus_value = map[string]int32{
		"DISPUTE_STATUS_PREVOTE":    0,
		"DISPUTE_STATUS_VOTING":     1,
		"DISPUTE_STATUS_RESOLVED":   2,
		"DISPUTE_STATUS_UNRESOLVED": 3,
		"DISPUTE_STATUS_FAILED":     4,
	}
)

func (x DisputeStatus) Enum() *DisputeStatus {
	p := new(DisputeStatus)
	*p = x
	return p
}

func (x DisputeStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DisputeStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_layer_dispute_dispute_proto_enumTypes[1].Descriptor()
}

func (DisputeStatus) Type() protoreflect.EnumType {
	return &file_layer_dispute_dispute_proto_enumTypes[1]
}

func (x DisputeStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DisputeStatus.Descriptor instead.
func (DisputeStatus) EnumDescriptor() ([]byte, []int) {
	return file_layer_dispute_dispute_proto_rawDescGZIP(), []int{1}
}

// Dispute defines a dispute.
type Dispute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique dispute hash identifier
	HashId []byte `protobuf:"bytes,1,opt,name=hash_id,json=hashId,proto3" json:"hash_id,omitempty"`
	// current dispute id
	DisputeId uint64 `protobuf:"varint,2,opt,name=dispute_id,json=disputeId,proto3" json:"dispute_id,omitempty"`
	// dispute severity level
	DisputeCategory DisputeCategory `protobuf:"varint,3,opt,name=dispute_category,json=disputeCategory,proto3,enum=layer.dispute.DisputeCategory" json:"dispute_category,omitempty"`
	// cost to start dispute
	DisputeFee string `protobuf:"bytes,4,opt,name=dispute_fee,json=disputeFee,proto3" json:"dispute_fee,omitempty"`
	// current dispute status
	DisputeStatus DisputeStatus `protobuf:"varint,5,opt,name=dispute_status,json=disputeStatus,proto3,enum=layer.dispute.DisputeStatus" json:"dispute_status,omitempty"`
	// start time of the dispute that begins after dispute fee is fully paid
	DisputeStartTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=dispute_start_time,json=disputeStartTime,proto3" json:"dispute_start_time,omitempty"`
	// end time that the dispute stop taking votes and creating new rounds
	DisputeEndTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=dispute_end_time,json=disputeEndTime,proto3" json:"dispute_end_time,omitempty"`
	// height of the block that started the dispute
	DisputeStartBlock int64 `protobuf:"varint,8,opt,name=dispute_start_block,json=disputeStartBlock,proto3" json:"dispute_start_block,omitempty"`
	// current dispute round
	DisputeRound uint64 `protobuf:"varint,9,opt,name=dispute_round,json=disputeRound,proto3" json:"dispute_round,omitempty"`
	// reporter's slashed amount
	SlashAmount string `protobuf:"bytes,10,opt,name=slash_amount,json=slashAmount,proto3" json:"slash_amount,omitempty"`
	// burn amount that will be divided in half and paid to voters and the other half burned
	BurnAmount string `protobuf:"bytes,11,opt,name=burn_amount,json=burnAmount,proto3" json:"burn_amount,omitempty"`
	// single report evidence
	ReportEvidence *types.MicroReport `protobuf:"bytes,12,opt,name=report_evidence,json=reportEvidence,proto3" json:"report_evidence,omitempty"`
	// fee payers that were involved in paying the dispute fee in order to start the dispute
	FeePayers []*PayerInfo `protobuf:"bytes,13,rep,name=fee_payers,json=feePayers,proto3" json:"fee_payers,omitempty"`
	// total fee paid tracked to know if dispute fee is fully paid to start dispute
	FeeTotal string `protobuf:"bytes,14,opt,name=fee_total,json=feeTotal,proto3" json:"fee_total,omitempty"`
	// list of dispute ids that preceded before this current round began
	PrevDisputeIds []uint64 `protobuf:"varint,15,rep,packed,name=prev_dispute_ids,json=prevDisputeIds,proto3" json:"prev_dispute_ids,omitempty"`
}

func (x *Dispute) Reset() {
	*x = Dispute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_layer_dispute_dispute_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dispute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dispute) ProtoMessage() {}

func (x *Dispute) ProtoReflect() protoreflect.Message {
	mi := &file_layer_dispute_dispute_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dispute.ProtoReflect.Descriptor instead.
func (*Dispute) Descriptor() ([]byte, []int) {
	return file_layer_dispute_dispute_proto_rawDescGZIP(), []int{0}
}

func (x *Dispute) GetHashId() []byte {
	if x != nil {
		return x.HashId
	}
	return nil
}

func (x *Dispute) GetDisputeId() uint64 {
	if x != nil {
		return x.DisputeId
	}
	return 0
}

func (x *Dispute) GetDisputeCategory() DisputeCategory {
	if x != nil {
		return x.DisputeCategory
	}
	return DisputeCategory_DISPUTE_CATEGORY_UNSPECIFIED
}

func (x *Dispute) GetDisputeFee() string {
	if x != nil {
		return x.DisputeFee
	}
	return ""
}

func (x *Dispute) GetDisputeStatus() DisputeStatus {
	if x != nil {
		return x.DisputeStatus
	}
	return DisputeStatus_DISPUTE_STATUS_PREVOTE
}

func (x *Dispute) GetDisputeStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DisputeStartTime
	}
	return nil
}

func (x *Dispute) GetDisputeEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DisputeEndTime
	}
	return nil
}

func (x *Dispute) GetDisputeStartBlock() int64 {
	if x != nil {
		return x.DisputeStartBlock
	}
	return 0
}

func (x *Dispute) GetDisputeRound() uint64 {
	if x != nil {
		return x.DisputeRound
	}
	return 0
}

func (x *Dispute) GetSlashAmount() string {
	if x != nil {
		return x.SlashAmount
	}
	return ""
}

func (x *Dispute) GetBurnAmount() string {
	if x != nil {
		return x.BurnAmount
	}
	return ""
}

func (x *Dispute) GetReportEvidence() *types.MicroReport {
	if x != nil {
		return x.ReportEvidence
	}
	return nil
}

func (x *Dispute) GetFeePayers() []*PayerInfo {
	if x != nil {
		return x.FeePayers
	}
	return nil
}

func (x *Dispute) GetFeeTotal() string {
	if x != nil {
		return x.FeeTotal
	}
	return ""
}

func (x *Dispute) GetPrevDisputeIds() []uint64 {
	if x != nil {
		return x.PrevDisputeIds
	}
	return nil
}

// PayerInfo defines the payer info of a dispute
// fee payer's info that was involved in paying the dispute fee in order to start the dispute
type PayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// fee payer's Account address
	PayerAddress string `protobuf:"bytes,1,opt,name=payer_address,json=payerAddress,proto3" json:"payer_address,omitempty"`
	// amount paid
	Amount string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// source of funds either from bond or free floating funds
	FromBond bool `protobuf:"varint,3,opt,name=from_bond,json=fromBond,proto3" json:"from_bond,omitempty"`
	// block number when this specific fee was paid
	// keeping track of this in case the bond was used
	// in order to reward the reporters' delegators in the future
	BlockNumber int64 `protobuf:"varint,4,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
}

func (x *PayerInfo) Reset() {
	*x = PayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_layer_dispute_dispute_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayerInfo) ProtoMessage() {}

func (x *PayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_layer_dispute_dispute_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayerInfo.ProtoReflect.Descriptor instead.
func (*PayerInfo) Descriptor() ([]byte, []int) {
	return file_layer_dispute_dispute_proto_rawDescGZIP(), []int{1}
}

func (x *PayerInfo) GetPayerAddress() string {
	if x != nil {
		return x.PayerAddress
	}
	return ""
}

func (x *PayerInfo) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *PayerInfo) GetFromBond() bool {
	if x != nil {
		return x.FromBond
	}
	return false
}

func (x *PayerInfo) GetBlockNumber() int64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

var File_layer_dispute_dispute_proto protoreflect.FileDescriptor

var file_layer_dispute_dispute_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2f, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x2f,
	0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x1a, 0x1e, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2f, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xb3, 0x07, 0x0a, 0x07, 0x44, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x68,
	0x61, 0x73, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x68, 0x61,
	0x73, 0x68, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74,
	0x65, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x44, 0x69,
	0x73, 0x70, 0x75, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0f, 0x64,
	0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x4c,
	0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2b, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49,
	0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x52, 0x0a, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x46, 0x65, 0x65, 0x12, 0x43, 0x0a, 0x0e,
	0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x64, 0x69, 0x73,
	0x70, 0x75, 0x74, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x52, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xc8, 0xde, 0x1f, 0x00, 0x90,
	0xdf, 0x1f, 0x01, 0x52, 0x10, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65,
	0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xc8, 0xde, 0x1f,
	0x00, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x45, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x11, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65,
	0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x64, 0x69,
	0x73, 0x70, 0x75, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x4e, 0x0a, 0x0c, 0x73, 0x6c,
	0x61, 0x73, 0x68, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2b, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2,
	0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x0b, 0x73,
	0x6c, 0x61, 0x73, 0x68, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x0b, 0x62, 0x75,
	0x72, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2b, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73,
	0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4,
	0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x0a, 0x62, 0x75,
	0x72, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65,
	0x2e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x04, 0xc8, 0xde,
	0x1f, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x64,
	0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x50, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x09, 0x66, 0x65, 0x65, 0x50, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x12, 0x48, 0x0a, 0x09, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e,
	0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x52, 0x08, 0x66, 0x65, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x70,
	0x72, 0x65, 0x76, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x44, 0x69, 0x73, 0x70, 0x75,
	0x74, 0x65, 0x49, 0x64, 0x73, 0x22, 0xcf, 0x01, 0x0a, 0x09, 0x50, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x0d, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xd2, 0xb4, 0x2d, 0x14,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x70, 0x61, 0x79, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x43, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2b, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e,
	0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x62, 0x6f, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d,
	0x42, 0x6f, 0x6e, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x2a, 0xc3, 0x01, 0x0a, 0x0f, 0x44, 0x69, 0x73, 0x70,
	0x75, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x31, 0x0a, 0x1c, 0x44,
	0x49, 0x53, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x1a, 0x0f, 0x8a,
	0x9d, 0x20, 0x0b, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x29,
	0x0a, 0x18, 0x44, 0x49, 0x53, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x1a, 0x0b, 0x8a, 0x9d,
	0x20, 0x07, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x16, 0x44, 0x49, 0x53,
	0x50, 0x55, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x4d, 0x49,
	0x4e, 0x4f, 0x52, 0x10, 0x02, 0x1a, 0x09, 0x8a, 0x9d, 0x20, 0x05, 0x4d, 0x69, 0x6e, 0x6f, 0x72,
	0x12, 0x25, 0x0a, 0x16, 0x44, 0x49, 0x53, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45,
	0x47, 0x4f, 0x52, 0x59, 0x5f, 0x4d, 0x41, 0x4a, 0x4f, 0x52, 0x10, 0x03, 0x1a, 0x09, 0x8a, 0x9d,
	0x20, 0x05, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x1a, 0x04, 0x88, 0xa3, 0x1e, 0x00, 0x2a, 0xe6, 0x01,
	0x0a, 0x0d, 0x44, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x27, 0x0a, 0x16, 0x44, 0x49, 0x53, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x50, 0x52, 0x45, 0x56, 0x4f, 0x54, 0x45, 0x10, 0x00, 0x1a, 0x0b, 0x8a, 0x9d, 0x20,
	0x07, 0x50, 0x72, 0x65, 0x76, 0x6f, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x15, 0x44, 0x49, 0x53, 0x50,
	0x55, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x56, 0x4f, 0x54, 0x49, 0x4e,
	0x47, 0x10, 0x01, 0x1a, 0x0a, 0x8a, 0x9d, 0x20, 0x06, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x29, 0x0a, 0x17, 0x44, 0x49, 0x53, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x44, 0x10, 0x02, 0x1a, 0x0c, 0x8a, 0x9d,
	0x20, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x19, 0x44, 0x49,
	0x53, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x52,
	0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x44, 0x10, 0x03, 0x1a, 0x0e, 0x8a, 0x9d, 0x20, 0x0a, 0x55,
	0x6e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x15, 0x44, 0x49, 0x53,
	0x50, 0x55, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x10, 0x04, 0x1a, 0x0a, 0x8a, 0x9d, 0x20, 0x06, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x1a, 0x04, 0x88, 0xa3, 0x1e, 0x00, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x2d, 0x69, 0x6f, 0x2f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2f, 0x78, 0x2f, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_layer_dispute_dispute_proto_rawDescOnce sync.Once
	file_layer_dispute_dispute_proto_rawDescData = file_layer_dispute_dispute_proto_rawDesc
)

func file_layer_dispute_dispute_proto_rawDescGZIP() []byte {
	file_layer_dispute_dispute_proto_rawDescOnce.Do(func() {
		file_layer_dispute_dispute_proto_rawDescData = protoimpl.X.CompressGZIP(file_layer_dispute_dispute_proto_rawDescData)
	})
	return file_layer_dispute_dispute_proto_rawDescData
}

var file_layer_dispute_dispute_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_layer_dispute_dispute_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_layer_dispute_dispute_proto_goTypes = []interface{}{
	(DisputeCategory)(0),          // 0: layer.dispute.DisputeCategory
	(DisputeStatus)(0),            // 1: layer.dispute.DisputeStatus
	(*Dispute)(nil),               // 2: layer.dispute.Dispute
	(*PayerInfo)(nil),             // 3: layer.dispute.PayerInfo
	(*timestamppb.Timestamp)(nil), // 4: google.protobuf.Timestamp
	(*types.MicroReport)(nil),     // 5: layer.oracle.MicroReport
}
var file_layer_dispute_dispute_proto_depIdxs = []int32{
	0, // 0: layer.dispute.Dispute.dispute_category:type_name -> layer.dispute.DisputeCategory
	1, // 1: layer.dispute.Dispute.dispute_status:type_name -> layer.dispute.DisputeStatus
	4, // 2: layer.dispute.Dispute.dispute_start_time:type_name -> google.protobuf.Timestamp
	4, // 3: layer.dispute.Dispute.dispute_end_time:type_name -> google.protobuf.Timestamp
	5, // 4: layer.dispute.Dispute.report_evidence:type_name -> layer.oracle.MicroReport
	3, // 5: layer.dispute.Dispute.fee_payers:type_name -> layer.dispute.PayerInfo
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_layer_dispute_dispute_proto_init() }
func file_layer_dispute_dispute_proto_init() {
	if File_layer_dispute_dispute_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_layer_dispute_dispute_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dispute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_layer_dispute_dispute_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_layer_dispute_dispute_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_layer_dispute_dispute_proto_goTypes,
		DependencyIndexes: file_layer_dispute_dispute_proto_depIdxs,
		EnumInfos:         file_layer_dispute_dispute_proto_enumTypes,
		MessageInfos:      file_layer_dispute_dispute_proto_msgTypes,
	}.Build()
	File_layer_dispute_dispute_proto = out.File
	file_layer_dispute_dispute_proto_rawDesc = nil
	file_layer_dispute_dispute_proto_goTypes = nil
	file_layer_dispute_dispute_proto_depIdxs = nil
}
