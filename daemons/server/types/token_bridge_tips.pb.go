// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: layer/daemons/token_bridge_tips.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GetTokenBridgeTipRequest is a request message for getting pending bridge deposits.
type GetTokenBridgeTipRequest struct {
}

func (m *GetTokenBridgeTipRequest) Reset()         { *m = GetTokenBridgeTipRequest{} }
func (m *GetTokenBridgeTipRequest) String() string { return proto.CompactTextString(m) }
func (*GetTokenBridgeTipRequest) ProtoMessage()    {}
func (*GetTokenBridgeTipRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a14e481a3209d5d9, []int{0}
}
func (m *GetTokenBridgeTipRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTokenBridgeTipRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTokenBridgeTipRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTokenBridgeTipRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTokenBridgeTipRequest.Merge(m, src)
}
func (m *GetTokenBridgeTipRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTokenBridgeTipRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTokenBridgeTipRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTokenBridgeTipRequest proto.InternalMessageInfo

// GetTokenBridgeTipResponse is a response message for getting pending bridge deposits.
type GetTokenBridgeTipResponse struct {
	QueryData []byte `protobuf:"bytes,1,opt,name=query_data,json=queryData,proto3" json:"query_data,omitempty"`
}

func (m *GetTokenBridgeTipResponse) Reset()         { *m = GetTokenBridgeTipResponse{} }
func (m *GetTokenBridgeTipResponse) String() string { return proto.CompactTextString(m) }
func (*GetTokenBridgeTipResponse) ProtoMessage()    {}
func (*GetTokenBridgeTipResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a14e481a3209d5d9, []int{1}
}
func (m *GetTokenBridgeTipResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTokenBridgeTipResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTokenBridgeTipResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTokenBridgeTipResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTokenBridgeTipResponse.Merge(m, src)
}
func (m *GetTokenBridgeTipResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTokenBridgeTipResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTokenBridgeTipResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTokenBridgeTipResponse proto.InternalMessageInfo

func (m *GetTokenBridgeTipResponse) GetQueryData() []byte {
	if m != nil {
		return m.QueryData
	}
	return nil
}

func init() {
	proto.RegisterType((*GetTokenBridgeTipRequest)(nil), "layer.daemons.GetTokenBridgeTipRequest")
	proto.RegisterType((*GetTokenBridgeTipResponse)(nil), "layer.daemons.GetTokenBridgeTipResponse")
}

func init() {
	proto.RegisterFile("layer/daemons/token_bridge_tips.proto", fileDescriptor_a14e481a3209d5d9)
}

var fileDescriptor_a14e481a3209d5d9 = []byte{
	// 297 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0x3f, 0x4b, 0x03, 0x31,
	0x18, 0xc6, 0x1b, 0x07, 0xc1, 0xa0, 0x83, 0x87, 0x42, 0x3d, 0x34, 0x6a, 0x41, 0xda, 0xc5, 0x0b,
	0xe8, 0xe6, 0x58, 0x04, 0x71, 0xad, 0x9d, 0x5c, 0x8e, 0xb4, 0x7d, 0x89, 0xc1, 0x6b, 0xde, 0x34,
	0x79, 0x5b, 0xe8, 0xea, 0x17, 0x50, 0xf0, 0x53, 0xf8, 0x4d, 0x1c, 0x0b, 0x2e, 0x8e, 0xd2, 0xf3,
	0x83, 0xc8, 0xdd, 0x75, 0x39, 0xff, 0xe0, 0x16, 0xf2, 0xfe, 0xf2, 0xe4, 0xc9, 0x2f, 0xfc, 0x24,
	0x53, 0x73, 0xf0, 0x72, 0xa4, 0x60, 0x8c, 0x36, 0x48, 0xc2, 0x7b, 0xb0, 0xe9, 0xc0, 0x9b, 0x91,
	0x86, 0x94, 0x8c, 0x0b, 0x89, 0xf3, 0x48, 0x18, 0x6d, 0x95, 0x58, 0xb2, 0xc2, 0xe2, 0x1d, 0x8d,
	0x1a, 0xcb, 0x89, 0x2c, 0x56, 0x15, 0x14, 0xef, 0x6b, 0x44, 0x9d, 0x81, 0x54, 0xce, 0x48, 0x65,
	0x2d, 0x92, 0x22, 0x83, 0x76, 0x15, 0xd1, 0x8a, 0x79, 0xf3, 0x0a, 0xa8, 0x5f, 0x5c, 0xd0, 0x2d,
	0xf3, 0xfb, 0xc6, 0xf5, 0x60, 0x32, 0x85, 0x40, 0xad, 0x0b, 0xbe, 0xf7, 0xcb, 0x2c, 0x38, 0xb4,
	0x01, 0xa2, 0x03, 0xce, 0x27, 0x53, 0xf0, 0xf3, 0x74, 0xa4, 0x48, 0x35, 0xd9, 0x11, 0xeb, 0x6c,
	0xf6, 0x36, 0xca, 0x9d, 0x4b, 0x45, 0xea, 0xec, 0x85, 0xf1, 0xdd, 0xfa, 0xc9, 0x1b, 0xf0, 0x33,
	0x33, 0x84, 0xe8, 0x91, 0xf1, 0xed, 0x1f, 0xb1, 0x51, 0x3b, 0xa9, 0xbd, 0x25, 0xf9, 0xab, 0x54,
	0xdc, 0xf9, 0x1f, 0xac, 0x1a, 0xb6, 0xda, 0x0f, 0x6f, 0x9f, 0xcf, 0x6b, 0xc7, 0xd1, 0xa1, 0xac,
	0x6c, 0x16, 0x02, 0x34, 0x50, 0xfa, 0xdd, 0x66, 0xf7, 0xfa, 0x75, 0x29, 0xd8, 0x62, 0x29, 0xd8,
	0xc7, 0x52, 0xb0, 0xa7, 0x5c, 0x34, 0x16, 0xb9, 0x68, 0xbc, 0xe7, 0xa2, 0x71, 0x2b, 0xb5, 0xa1,
	0xbb, 0xe9, 0x20, 0x19, 0xe2, 0x58, 0x12, 0x64, 0x19, 0xfa, 0x53, 0x83, 0xb2, 0xfe, 0x39, 0x01,
	0xfc, 0x0c, 0xbc, 0xa4, 0xb9, 0x83, 0x30, 0x58, 0x2f, 0xad, 0x9e, 0x7f, 0x05, 0x00, 0x00, 0xff,
	0xff, 0x23, 0xde, 0x76, 0x1e, 0xc1, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TokenBridgeTipServiceClient is the client API for TokenBridgeTipService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TokenBridgeTipServiceClient interface {
	// GetPendingBridgeDeposit returns the oldest pending bridge deposit report data.
	GetTokenBridgeTip(ctx context.Context, in *GetTokenBridgeTipRequest, opts ...grpc.CallOption) (*GetTokenBridgeTipResponse, error)
}

type tokenBridgeTipServiceClient struct {
	cc grpc1.ClientConn
}

func NewTokenBridgeTipServiceClient(cc grpc1.ClientConn) TokenBridgeTipServiceClient {
	return &tokenBridgeTipServiceClient{cc}
}

func (c *tokenBridgeTipServiceClient) GetTokenBridgeTip(ctx context.Context, in *GetTokenBridgeTipRequest, opts ...grpc.CallOption) (*GetTokenBridgeTipResponse, error) {
	out := new(GetTokenBridgeTipResponse)
	err := c.cc.Invoke(ctx, "/layer.daemons.TokenBridgeTipService/GetTokenBridgeTip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokenBridgeTipServiceServer is the server API for TokenBridgeTipService service.
type TokenBridgeTipServiceServer interface {
	// GetPendingBridgeDeposit returns the oldest pending bridge deposit report data.
	GetTokenBridgeTip(context.Context, *GetTokenBridgeTipRequest) (*GetTokenBridgeTipResponse, error)
}

// UnimplementedTokenBridgeTipServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTokenBridgeTipServiceServer struct {
}

func (*UnimplementedTokenBridgeTipServiceServer) GetTokenBridgeTip(ctx context.Context, req *GetTokenBridgeTipRequest) (*GetTokenBridgeTipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenBridgeTip not implemented")
}

func RegisterTokenBridgeTipServiceServer(s grpc1.Server, srv TokenBridgeTipServiceServer) {
	s.RegisterService(&_TokenBridgeTipService_serviceDesc, srv)
}

func _TokenBridgeTipService_GetTokenBridgeTip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenBridgeTipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenBridgeTipServiceServer).GetTokenBridgeTip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.daemons.TokenBridgeTipService/GetTokenBridgeTip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenBridgeTipServiceServer).GetTokenBridgeTip(ctx, req.(*GetTokenBridgeTipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var TokenBridgeTipService_serviceDesc = _TokenBridgeTipService_serviceDesc
var _TokenBridgeTipService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "layer.daemons.TokenBridgeTipService",
	HandlerType: (*TokenBridgeTipServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTokenBridgeTip",
			Handler:    _TokenBridgeTipService_GetTokenBridgeTip_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "layer/daemons/token_bridge_tips.proto",
}

func (m *GetTokenBridgeTipRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTokenBridgeTipRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTokenBridgeTipRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetTokenBridgeTipResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTokenBridgeTipResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTokenBridgeTipResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.QueryData) > 0 {
		i -= len(m.QueryData)
		copy(dAtA[i:], m.QueryData)
		i = encodeVarintTokenBridgeTips(dAtA, i, uint64(len(m.QueryData)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTokenBridgeTips(dAtA []byte, offset int, v uint64) int {
	offset -= sovTokenBridgeTips(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetTokenBridgeTipRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetTokenBridgeTipResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.QueryData)
	if l > 0 {
		n += 1 + l + sovTokenBridgeTips(uint64(l))
	}
	return n
}

func sovTokenBridgeTips(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTokenBridgeTips(x uint64) (n int) {
	return sovTokenBridgeTips(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetTokenBridgeTipRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTokenBridgeTips
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTokenBridgeTipRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTokenBridgeTipRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTokenBridgeTips(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTokenBridgeTips
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTokenBridgeTipResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTokenBridgeTips
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTokenBridgeTipResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTokenBridgeTipResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenBridgeTips
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTokenBridgeTips
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTokenBridgeTips
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryData = append(m.QueryData[:0], dAtA[iNdEx:postIndex]...)
			if m.QueryData == nil {
				m.QueryData = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTokenBridgeTips(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTokenBridgeTips
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTokenBridgeTips(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTokenBridgeTips
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTokenBridgeTips
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTokenBridgeTips
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTokenBridgeTips
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTokenBridgeTips
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTokenBridgeTips
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTokenBridgeTips        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTokenBridgeTips          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTokenBridgeTips = fmt.Errorf("proto: unexpected end of group")
)
