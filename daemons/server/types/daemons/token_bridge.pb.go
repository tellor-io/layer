// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: daemons/token_bridge.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GetPendingDepositReportRequest is a request message for getting pending bridge deposits.
type GetPendingDepositReportRequest struct {
}

func (m *GetPendingDepositReportRequest) Reset()         { *m = GetPendingDepositReportRequest{} }
func (m *GetPendingDepositReportRequest) String() string { return proto.CompactTextString(m) }
func (*GetPendingDepositReportRequest) ProtoMessage()    {}
func (*GetPendingDepositReportRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_89a8152f8cfa4e5c, []int{0}
}
func (m *GetPendingDepositReportRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPendingDepositReportRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPendingDepositReportRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPendingDepositReportRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPendingDepositReportRequest.Merge(m, src)
}
func (m *GetPendingDepositReportRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPendingDepositReportRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPendingDepositReportRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPendingDepositReportRequest proto.InternalMessageInfo

// GetPendingDepositReportResponse is a response message for getting pending bridge deposits.
type GetPendingDepositReportResponse struct {
	QueryData []byte `protobuf:"bytes,1,opt,name=query_data,json=queryData,proto3" json:"query_data,omitempty"`
	Value     []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *GetPendingDepositReportResponse) Reset()         { *m = GetPendingDepositReportResponse{} }
func (m *GetPendingDepositReportResponse) String() string { return proto.CompactTextString(m) }
func (*GetPendingDepositReportResponse) ProtoMessage()    {}
func (*GetPendingDepositReportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_89a8152f8cfa4e5c, []int{1}
}
func (m *GetPendingDepositReportResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPendingDepositReportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPendingDepositReportResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPendingDepositReportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPendingDepositReportResponse.Merge(m, src)
}
func (m *GetPendingDepositReportResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPendingDepositReportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPendingDepositReportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPendingDepositReportResponse proto.InternalMessageInfo

func (m *GetPendingDepositReportResponse) GetQueryData() []byte {
	if m != nil {
		return m.QueryData
	}
	return nil
}

func (m *GetPendingDepositReportResponse) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterType((*GetPendingDepositReportRequest)(nil), "daemons.GetPendingDepositReportRequest")
	proto.RegisterType((*GetPendingDepositReportResponse)(nil), "daemons.GetPendingDepositReportResponse")
}

func init() { proto.RegisterFile("daemons/token_bridge.proto", fileDescriptor_89a8152f8cfa4e5c) }

var fileDescriptor_89a8152f8cfa4e5c = []byte{
	// 319 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0xc1, 0x4a, 0x2b, 0x31,
	0x14, 0x86, 0x3b, 0x85, 0x7b, 0x2f, 0x37, 0xdc, 0x55, 0x28, 0xdc, 0x32, 0x68, 0x2c, 0x05, 0x69,
	0x37, 0x9d, 0x80, 0xbe, 0x41, 0x29, 0x88, 0x3b, 0xa9, 0xe2, 0xc2, 0xcd, 0x90, 0x76, 0x0e, 0x31,
	0x38, 0xcd, 0x49, 0x93, 0x33, 0x85, 0x6e, 0x7d, 0x02, 0xc1, 0xa5, 0x6f, 0xe1, 0x53, 0xb8, 0x2c,
	0xb8, 0x71, 0x29, 0xad, 0x0f, 0x22, 0xcd, 0xd4, 0x65, 0x75, 0x97, 0x9c, 0xef, 0xfc, 0xc9, 0xf9,
	0xcf, 0xcf, 0xd2, 0x42, 0xc1, 0x0c, 0x6d, 0x90, 0x84, 0x77, 0x60, 0xf3, 0x89, 0x37, 0x85, 0x86,
	0xcc, 0x79, 0x24, 0xe4, 0x7f, 0x76, 0x2c, 0x6d, 0x69, 0xd4, 0x18, 0x6b, 0x72, 0x7b, 0xaa, 0x71,
	0x7a, 0xa0, 0x11, 0x75, 0x09, 0x52, 0x39, 0x23, 0x95, 0xb5, 0x48, 0x8a, 0x0c, 0xda, 0x50, 0xd3,
	0x6e, 0x87, 0x89, 0x33, 0xa0, 0x0b, 0xb0, 0x85, 0xb1, 0x7a, 0x04, 0x0e, 0x83, 0xa1, 0x31, 0x38,
	0xf4, 0x34, 0x86, 0x79, 0x05, 0x81, 0xba, 0xd7, 0xec, 0x68, 0x6f, 0x47, 0x70, 0x68, 0x03, 0xf0,
	0x43, 0xc6, 0xe6, 0x15, 0xf8, 0x65, 0x5e, 0x28, 0x52, 0xed, 0xa4, 0x93, 0xf4, 0xff, 0x8d, 0xff,
	0xc6, 0xca, 0x48, 0x91, 0xe2, 0x2d, 0xf6, 0x6b, 0xa1, 0xca, 0x0a, 0xda, 0xcd, 0x48, 0xea, 0xcb,
	0xc9, 0x73, 0xc2, 0xf8, 0xd5, 0xd6, 0xcd, 0x30, 0x9a, 0xb9, 0x04, 0xbf, 0x30, 0x53, 0xe0, 0x4f,
	0x09, 0xfb, 0xbf, 0xe7, 0x3f, 0xde, 0xcb, 0x76, 0x56, 0xb3, 0xef, 0x67, 0x4e, 0xfb, 0x3f, 0x37,
	0xd6, 0xa3, 0x77, 0x07, 0xf7, 0xaf, 0x1f, 0x8f, 0xcd, 0x1e, 0x3f, 0x96, 0xa5, 0x5a, 0x82, 0x8f,
	0x5b, 0xd2, 0x40, 0xb9, 0xab, 0x45, 0x79, 0x51, 0xab, 0x72, 0x1f, 0x65, 0xc3, 0xf3, 0x97, 0xb5,
	0x48, 0x56, 0x6b, 0x91, 0xbc, 0xaf, 0x45, 0xf2, 0xb0, 0x11, 0x8d, 0xd5, 0x46, 0x34, 0xde, 0x36,
	0xa2, 0x71, 0x23, 0xb5, 0xa1, 0xdb, 0x6a, 0x92, 0x4d, 0x71, 0x26, 0x09, 0xca, 0x12, 0xfd, 0xc0,
	0xe0, 0xee, 0xd1, 0xaf, 0xf0, 0x02, 0xf8, 0x05, 0x78, 0x49, 0x4b, 0x07, 0x61, 0xf2, 0x3b, 0x06,
	0x70, 0xfa, 0x19, 0x00, 0x00, 0xff, 0xff, 0x47, 0xc6, 0x21, 0x99, 0xdb, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TokenBridgeServiceClient is the client API for TokenBridgeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TokenBridgeServiceClient interface {
	// GetPendingBridgeDeposit returns the oldest pending bridge deposit report data.
	GetPendingDepositReport(ctx context.Context, in *GetPendingDepositReportRequest, opts ...grpc.CallOption) (*GetPendingDepositReportResponse, error)
}

type tokenBridgeServiceClient struct {
	cc grpc1.ClientConn
}

func NewTokenBridgeServiceClient(cc grpc1.ClientConn) TokenBridgeServiceClient {
	return &tokenBridgeServiceClient{cc}
}

func (c *tokenBridgeServiceClient) GetPendingDepositReport(ctx context.Context, in *GetPendingDepositReportRequest, opts ...grpc.CallOption) (*GetPendingDepositReportResponse, error) {
	out := new(GetPendingDepositReportResponse)
	err := c.cc.Invoke(ctx, "/daemons.TokenBridgeService/GetPendingDepositReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokenBridgeServiceServer is the server API for TokenBridgeService service.
type TokenBridgeServiceServer interface {
	// GetPendingBridgeDeposit returns the oldest pending bridge deposit report data.
	GetPendingDepositReport(context.Context, *GetPendingDepositReportRequest) (*GetPendingDepositReportResponse, error)
}

// UnimplementedTokenBridgeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTokenBridgeServiceServer struct {
}

func (*UnimplementedTokenBridgeServiceServer) GetPendingDepositReport(ctx context.Context, req *GetPendingDepositReportRequest) (*GetPendingDepositReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPendingDepositReport not implemented")
}

func RegisterTokenBridgeServiceServer(s grpc1.Server, srv TokenBridgeServiceServer) {
	s.RegisterService(&_TokenBridgeService_serviceDesc, srv)
}

func _TokenBridgeService_GetPendingDepositReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPendingDepositReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenBridgeServiceServer).GetPendingDepositReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daemons.TokenBridgeService/GetPendingDepositReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenBridgeServiceServer).GetPendingDepositReport(ctx, req.(*GetPendingDepositReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var TokenBridgeService_serviceDesc = _TokenBridgeService_serviceDesc
var _TokenBridgeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "daemons.TokenBridgeService",
	HandlerType: (*TokenBridgeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPendingDepositReport",
			Handler:    _TokenBridgeService_GetPendingDepositReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "daemons/token_bridge.proto",
}

func (m *GetPendingDepositReportRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPendingDepositReportRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPendingDepositReportRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetPendingDepositReportResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPendingDepositReportResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPendingDepositReportResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintTokenBridge(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.QueryData) > 0 {
		i -= len(m.QueryData)
		copy(dAtA[i:], m.QueryData)
		i = encodeVarintTokenBridge(dAtA, i, uint64(len(m.QueryData)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTokenBridge(dAtA []byte, offset int, v uint64) int {
	offset -= sovTokenBridge(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetPendingDepositReportRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetPendingDepositReportResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.QueryData)
	if l > 0 {
		n += 1 + l + sovTokenBridge(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTokenBridge(uint64(l))
	}
	return n
}

func sovTokenBridge(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTokenBridge(x uint64) (n int) {
	return sovTokenBridge(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetPendingDepositReportRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTokenBridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPendingDepositReportRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPendingDepositReportRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTokenBridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTokenBridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPendingDepositReportResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTokenBridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPendingDepositReportResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPendingDepositReportResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTokenBridge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTokenBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryData = append(m.QueryData[:0], dAtA[iNdEx:postIndex]...)
			if m.QueryData == nil {
				m.QueryData = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTokenBridge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTokenBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTokenBridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTokenBridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTokenBridge(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTokenBridge
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTokenBridge
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTokenBridge
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTokenBridge
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTokenBridge
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTokenBridge
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTokenBridge        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTokenBridge          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTokenBridge = fmt.Errorf("proto: unexpected end of group")
)
